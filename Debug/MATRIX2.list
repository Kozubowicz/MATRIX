
MATRIX2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fd48  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000088c  0800fed8  0800fed8  0001fed8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010764  08010764  00030300  2**0
                  CONTENTS
  4 .ARM          00000008  08010764  08010764  00020764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801076c  0801076c  00030300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801076c  0801076c  0002076c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010770  08010770  00020770  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000300  20000000  08010774  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002848  20000300  08010a74  00030300  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002b48  08010a74  00032b48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030300  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002ef3c  00000000  00000000  00030330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000519f  00000000  00000000  0005f26c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000021b0  00000000  00000000  00064410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001fe0  00000000  00000000  000665c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002705f  00000000  00000000  000685a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000263eb  00000000  00000000  0008f5ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ecf11  00000000  00000000  000b59ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001a28fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a52c  00000000  00000000  001a2950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000300 	.word	0x20000300
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fec0 	.word	0x0800fec0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000304 	.word	0x20000304
 80001cc:	0800fec0 	.word	0x0800fec0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <GFX_SetFont>:
#if  USING_STRINGS == 1
const uint8_t* font;
uint8_t size = 1;

void GFX_SetFont(const uint8_t* font_t)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	font = font_t;
 8000ff4:	4a04      	ldr	r2, [pc, #16]	; (8001008 <GFX_SetFont+0x1c>)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6013      	str	r3, [r2, #0]
}
 8000ffa:	bf00      	nop
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	2000287c 	.word	0x2000287c

0800100c <GFX_SetFontSize>:

void GFX_SetFontSize(uint8_t size_t)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	71fb      	strb	r3, [r7, #7]
	if(size_t != 0)
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d002      	beq.n	8001022 <GFX_SetFontSize+0x16>
		size = size_t;
 800101c:	4a04      	ldr	r2, [pc, #16]	; (8001030 <GFX_SetFontSize+0x24>)
 800101e:	79fb      	ldrb	r3, [r7, #7]
 8001020:	7013      	strb	r3, [r2, #0]
}
 8001022:	bf00      	nop
 8001024:	370c      	adds	r7, #12
 8001026:	46bd      	mov	sp, r7
 8001028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	20000000 	.word	0x20000000

08001034 <GFX_GetFontWidth>:
{
	return font[0];
}

uint8_t GFX_GetFontWidth(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
	return font[1];
 8001038:	4b04      	ldr	r3, [pc, #16]	; (800104c <GFX_GetFontWidth+0x18>)
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	3301      	adds	r3, #1
 800103e:	781b      	ldrb	r3, [r3, #0]
}
 8001040:	4618      	mov	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	2000287c 	.word	0x2000287c

08001050 <GFX_DrawChar>:
{
	return size;
}

void GFX_DrawChar(int x, int y, char chr, uint8_t color, uint8_t background)
{
 8001050:	b590      	push	{r4, r7, lr}
 8001052:	b089      	sub	sp, #36	; 0x24
 8001054:	af02      	add	r7, sp, #8
 8001056:	60f8      	str	r0, [r7, #12]
 8001058:	60b9      	str	r1, [r7, #8]
 800105a:	4611      	mov	r1, r2
 800105c:	461a      	mov	r2, r3
 800105e:	460b      	mov	r3, r1
 8001060:	71fb      	strb	r3, [r7, #7]
 8001062:	4613      	mov	r3, r2
 8001064:	71bb      	strb	r3, [r7, #6]
	if(chr > 0x7E) return; // chr > '~'
 8001066:	79fb      	ldrb	r3, [r7, #7]
 8001068:	2b7e      	cmp	r3, #126	; 0x7e
 800106a:	f200 8092 	bhi.w	8001192 <GFX_DrawChar+0x142>

	for(uint8_t i=0; i<font[1]; i++ )
 800106e:	2300      	movs	r3, #0
 8001070:	75fb      	strb	r3, [r7, #23]
 8001072:	e085      	b.n	8001180 <GFX_DrawChar+0x130>
	{
        uint8_t line = (uint8_t)font[(chr-0x20) * font[1] + i + 2];
 8001074:	4b49      	ldr	r3, [pc, #292]	; (800119c <GFX_DrawChar+0x14c>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	79fb      	ldrb	r3, [r7, #7]
 800107a:	3b20      	subs	r3, #32
 800107c:	4947      	ldr	r1, [pc, #284]	; (800119c <GFX_DrawChar+0x14c>)
 800107e:	6809      	ldr	r1, [r1, #0]
 8001080:	3101      	adds	r1, #1
 8001082:	7809      	ldrb	r1, [r1, #0]
 8001084:	fb01 f103 	mul.w	r1, r1, r3
 8001088:	7dfb      	ldrb	r3, [r7, #23]
 800108a:	440b      	add	r3, r1
 800108c:	3302      	adds	r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	75bb      	strb	r3, [r7, #22]

        for(int8_t j=0; j<font[0]; j++, line >>= 1)
 8001094:	2300      	movs	r3, #0
 8001096:	757b      	strb	r3, [r7, #21]
 8001098:	e068      	b.n	800116c <GFX_DrawChar+0x11c>
        {
            if(line & 1)
 800109a:	7dbb      	ldrb	r3, [r7, #22]
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d02a      	beq.n	80010fa <GFX_DrawChar+0xaa>
            {
            	if(size == 1)
 80010a4:	4b3e      	ldr	r3, [pc, #248]	; (80011a0 <GFX_DrawChar+0x150>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b01      	cmp	r3, #1
 80010aa:	d10b      	bne.n	80010c4 <GFX_DrawChar+0x74>
            		GFX_DrawPixel(x+i, y+j, color);
 80010ac:	7dfa      	ldrb	r2, [r7, #23]
 80010ae:	68fb      	ldr	r3, [r7, #12]
 80010b0:	18d0      	adds	r0, r2, r3
 80010b2:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80010b6:	68bb      	ldr	r3, [r7, #8]
 80010b8:	4413      	add	r3, r2
 80010ba:	79ba      	ldrb	r2, [r7, #6]
 80010bc:	4619      	mov	r1, r3
 80010be:	f001 f8fb 	bl	80022b8 <MAX7219_SetPixel>
 80010c2:	e04a      	b.n	800115a <GFX_DrawChar+0x10a>
            	else
            		GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, color);
 80010c4:	7dfb      	ldrb	r3, [r7, #23]
 80010c6:	4a36      	ldr	r2, [pc, #216]	; (80011a0 <GFX_DrawChar+0x150>)
 80010c8:	7812      	ldrb	r2, [r2, #0]
 80010ca:	fb02 f203 	mul.w	r2, r2, r3
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	18d0      	adds	r0, r2, r3
 80010d2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80010d6:	4a32      	ldr	r2, [pc, #200]	; (80011a0 <GFX_DrawChar+0x150>)
 80010d8:	7812      	ldrb	r2, [r2, #0]
 80010da:	fb02 f203 	mul.w	r2, r2, r3
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	18d1      	adds	r1, r2, r3
 80010e2:	4b2f      	ldr	r3, [pc, #188]	; (80011a0 <GFX_DrawChar+0x150>)
 80010e4:	781b      	ldrb	r3, [r3, #0]
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	4b2d      	ldr	r3, [pc, #180]	; (80011a0 <GFX_DrawChar+0x150>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	b29c      	uxth	r4, r3
 80010ee:	79bb      	ldrb	r3, [r7, #6]
 80010f0:	9300      	str	r3, [sp, #0]
 80010f2:	4623      	mov	r3, r4
 80010f4:	f000 f94c 	bl	8001390 <GFX_DrawFillRectangle>
 80010f8:	e02f      	b.n	800115a <GFX_DrawChar+0x10a>
            }
            else if(background == 0)
 80010fa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d12b      	bne.n	800115a <GFX_DrawChar+0x10a>
            {
            	if(size == 1)
 8001102:	4b27      	ldr	r3, [pc, #156]	; (80011a0 <GFX_DrawChar+0x150>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	2b01      	cmp	r3, #1
 8001108:	d10c      	bne.n	8001124 <GFX_DrawChar+0xd4>
					GFX_DrawPixel(x+i, y+j, background);
 800110a:	7dfa      	ldrb	r2, [r7, #23]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	18d0      	adds	r0, r2, r3
 8001110:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001114:	68bb      	ldr	r3, [r7, #8]
 8001116:	4413      	add	r3, r2
 8001118:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800111c:	4619      	mov	r1, r3
 800111e:	f001 f8cb 	bl	80022b8 <MAX7219_SetPixel>
 8001122:	e01a      	b.n	800115a <GFX_DrawChar+0x10a>
				else
					GFX_DrawFillRectangle(x+i*size, y+j*size, size, size, background);
 8001124:	7dfb      	ldrb	r3, [r7, #23]
 8001126:	4a1e      	ldr	r2, [pc, #120]	; (80011a0 <GFX_DrawChar+0x150>)
 8001128:	7812      	ldrb	r2, [r2, #0]
 800112a:	fb02 f203 	mul.w	r2, r2, r3
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	18d0      	adds	r0, r2, r3
 8001132:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001136:	4a1a      	ldr	r2, [pc, #104]	; (80011a0 <GFX_DrawChar+0x150>)
 8001138:	7812      	ldrb	r2, [r2, #0]
 800113a:	fb02 f203 	mul.w	r2, r2, r3
 800113e:	68bb      	ldr	r3, [r7, #8]
 8001140:	18d1      	adds	r1, r2, r3
 8001142:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <GFX_DrawChar+0x150>)
 8001144:	781b      	ldrb	r3, [r3, #0]
 8001146:	b29a      	uxth	r2, r3
 8001148:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <GFX_DrawChar+0x150>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	b29c      	uxth	r4, r3
 800114e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	4623      	mov	r3, r4
 8001156:	f000 f91b 	bl	8001390 <GFX_DrawFillRectangle>
        for(int8_t j=0; j<font[0]; j++, line >>= 1)
 800115a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800115e:	b2db      	uxtb	r3, r3
 8001160:	3301      	adds	r3, #1
 8001162:	b2db      	uxtb	r3, r3
 8001164:	757b      	strb	r3, [r7, #21]
 8001166:	7dbb      	ldrb	r3, [r7, #22]
 8001168:	085b      	lsrs	r3, r3, #1
 800116a:	75bb      	strb	r3, [r7, #22]
 800116c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001170:	4a0a      	ldr	r2, [pc, #40]	; (800119c <GFX_DrawChar+0x14c>)
 8001172:	6812      	ldr	r2, [r2, #0]
 8001174:	7812      	ldrb	r2, [r2, #0]
 8001176:	4293      	cmp	r3, r2
 8001178:	db8f      	blt.n	800109a <GFX_DrawChar+0x4a>
	for(uint8_t i=0; i<font[1]; i++ )
 800117a:	7dfb      	ldrb	r3, [r7, #23]
 800117c:	3301      	adds	r3, #1
 800117e:	75fb      	strb	r3, [r7, #23]
 8001180:	4b06      	ldr	r3, [pc, #24]	; (800119c <GFX_DrawChar+0x14c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	3301      	adds	r3, #1
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	7dfa      	ldrb	r2, [r7, #23]
 800118a:	429a      	cmp	r2, r3
 800118c:	f4ff af72 	bcc.w	8001074 <GFX_DrawChar+0x24>
 8001190:	e000      	b.n	8001194 <GFX_DrawChar+0x144>
	if(chr > 0x7E) return; // chr > '~'
 8001192:	bf00      	nop
            }
        }
    }
}
 8001194:	371c      	adds	r7, #28
 8001196:	46bd      	mov	sp, r7
 8001198:	bd90      	pop	{r4, r7, pc}
 800119a:	bf00      	nop
 800119c:	2000287c 	.word	0x2000287c
 80011a0:	20000000 	.word	0x20000000

080011a4 <GFX_DrawString>:

void GFX_DrawString(int x, int y, char* str, uint8_t color, uint8_t background)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b088      	sub	sp, #32
 80011a8:	af02      	add	r7, sp, #8
 80011aa:	60f8      	str	r0, [r7, #12]
 80011ac:	60b9      	str	r1, [r7, #8]
 80011ae:	607a      	str	r2, [r7, #4]
 80011b0:	70fb      	strb	r3, [r7, #3]
	int x_tmp = x;
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	617b      	str	r3, [r7, #20]
	char znak;
	znak = *str;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 80011bc:	e037      	b.n	800122e <GFX_DrawString+0x8a>
	{
		GFX_DrawChar(x_tmp, y, znak, color, background);
 80011be:	78f9      	ldrb	r1, [r7, #3]
 80011c0:	7cfa      	ldrb	r2, [r7, #19]
 80011c2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011c6:	9300      	str	r3, [sp, #0]
 80011c8:	460b      	mov	r3, r1
 80011ca:	68b9      	ldr	r1, [r7, #8]
 80011cc:	6978      	ldr	r0, [r7, #20]
 80011ce:	f7ff ff3f 	bl	8001050 <GFX_DrawChar>
		x_tmp += ((uint8_t)font[1] * size) + 1;
 80011d2:	4b1c      	ldr	r3, [pc, #112]	; (8001244 <GFX_DrawString+0xa0>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	3301      	adds	r3, #1
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	461a      	mov	r2, r3
 80011dc:	4b1a      	ldr	r3, [pc, #104]	; (8001248 <GFX_DrawString+0xa4>)
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	fb03 f302 	mul.w	r3, r3, r2
 80011e4:	3301      	adds	r3, #1
 80011e6:	697a      	ldr	r2, [r7, #20]
 80011e8:	4413      	add	r3, r2
 80011ea:	617b      	str	r3, [r7, #20]
		if(background == 0)
 80011ec:	f897 3020 	ldrb.w	r3, [r7, #32]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d119      	bne.n	8001228 <GFX_DrawString+0x84>
		{
			for(uint8_t i=0; i<(font[0]*size); i++)
 80011f4:	2300      	movs	r3, #0
 80011f6:	74bb      	strb	r3, [r7, #18]
 80011f8:	e00b      	b.n	8001212 <GFX_DrawString+0x6e>
			{
				GFX_DrawPixel(x_tmp-1, y+i, PIXEL_BLACK);
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	1e58      	subs	r0, r3, #1
 80011fe:	7cba      	ldrb	r2, [r7, #18]
 8001200:	68bb      	ldr	r3, [r7, #8]
 8001202:	4413      	add	r3, r2
 8001204:	2200      	movs	r2, #0
 8001206:	4619      	mov	r1, r3
 8001208:	f001 f856 	bl	80022b8 <MAX7219_SetPixel>
			for(uint8_t i=0; i<(font[0]*size); i++)
 800120c:	7cbb      	ldrb	r3, [r7, #18]
 800120e:	3301      	adds	r3, #1
 8001210:	74bb      	strb	r3, [r7, #18]
 8001212:	7cba      	ldrb	r2, [r7, #18]
 8001214:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <GFX_DrawString+0xa0>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	4619      	mov	r1, r3
 800121c:	4b0a      	ldr	r3, [pc, #40]	; (8001248 <GFX_DrawString+0xa4>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	fb03 f301 	mul.w	r3, r3, r1
 8001224:	429a      	cmp	r2, r3
 8001226:	dbe8      	blt.n	80011fa <GFX_DrawString+0x56>
			}
		}
		znak = *str;
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	74fb      	strb	r3, [r7, #19]
	while(*str++)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	1c5a      	adds	r2, r3, #1
 8001232:	607a      	str	r2, [r7, #4]
 8001234:	781b      	ldrb	r3, [r3, #0]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1c1      	bne.n	80011be <GFX_DrawString+0x1a>
	}
}
 800123a:	bf00      	nop
 800123c:	bf00      	nop
 800123e:	3718      	adds	r7, #24
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	2000287c 	.word	0x2000287c
 8001248:	20000000 	.word	0x20000000

0800124c <GFX_WriteLine>:
#endif
#if USING_LINES == 1
void GFX_WriteLine(int x_start, int y_start, int x_end, int y_end, uint8_t color)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08c      	sub	sp, #48	; 0x30
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	607a      	str	r2, [r7, #4]
 8001258:	603b      	str	r3, [r7, #0]
	int16_t steep = abs(y_end - y_start) > abs(x_end - x_start);
 800125a:	683a      	ldr	r2, [r7, #0]
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001264:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001268:	6879      	ldr	r1, [r7, #4]
 800126a:	68fb      	ldr	r3, [r7, #12]
 800126c:	1acb      	subs	r3, r1, r3
 800126e:	2b00      	cmp	r3, #0
 8001270:	bfb8      	it	lt
 8001272:	425b      	neglt	r3, r3
 8001274:	429a      	cmp	r2, r3
 8001276:	bfcc      	ite	gt
 8001278:	2301      	movgt	r3, #1
 800127a:	2300      	movle	r3, #0
 800127c:	b2db      	uxtb	r3, r3
 800127e:	857b      	strh	r3, [r7, #42]	; 0x2a

	    if (steep) {
 8001280:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001284:	2b00      	cmp	r3, #0
 8001286:	d00b      	beq.n	80012a0 <GFX_WriteLine+0x54>
	        _swap_int(x_start, y_start);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	627b      	str	r3, [r7, #36]	; 0x24
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001292:	60bb      	str	r3, [r7, #8]
	        _swap_int(x_end, y_end);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	623b      	str	r3, [r7, #32]
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	6a3b      	ldr	r3, [r7, #32]
 800129e:	603b      	str	r3, [r7, #0]
	    }

	    if (x_start > x_end) {
 80012a0:	68fa      	ldr	r2, [r7, #12]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	dd0b      	ble.n	80012c0 <GFX_WriteLine+0x74>
	        _swap_int(x_start, x_end);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	61fb      	str	r3, [r7, #28]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	607b      	str	r3, [r7, #4]
	        _swap_int(y_start, y_end);
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	61bb      	str	r3, [r7, #24]
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	60bb      	str	r3, [r7, #8]
 80012bc:	69bb      	ldr	r3, [r7, #24]
 80012be:	603b      	str	r3, [r7, #0]
	    }

	    int16_t dx, dy;
	    dx = x_end - x_start;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	b29a      	uxth	r2, r3
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	b29b      	uxth	r3, r3
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	b29b      	uxth	r3, r3
 80012cc:	82fb      	strh	r3, [r7, #22]
	    dy = abs(y_end - y_start);
 80012ce:	683a      	ldr	r2, [r7, #0]
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	1ad3      	subs	r3, r2, r3
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	bfb8      	it	lt
 80012d8:	425b      	neglt	r3, r3
 80012da:	82bb      	strh	r3, [r7, #20]

	    int16_t err = dx / 2;
 80012dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012e0:	0fda      	lsrs	r2, r3, #31
 80012e2:	4413      	add	r3, r2
 80012e4:	105b      	asrs	r3, r3, #1
 80012e6:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    int16_t ystep;

	    if (y_start < y_end) {
 80012e8:	68ba      	ldr	r2, [r7, #8]
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	da02      	bge.n	80012f6 <GFX_WriteLine+0xaa>
	        ystep = 1;
 80012f0:	2301      	movs	r3, #1
 80012f2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 80012f4:	e02c      	b.n	8001350 <GFX_WriteLine+0x104>
	    } else {
	        ystep = -1;
 80012f6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012fa:	85bb      	strh	r3, [r7, #44]	; 0x2c
	    }

	    for (; x_start<=x_end; x_start++) {
 80012fc:	e028      	b.n	8001350 <GFX_WriteLine+0x104>
	        if (steep) {
 80012fe:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001302:	2b00      	cmp	r3, #0
 8001304:	d007      	beq.n	8001316 <GFX_WriteLine+0xca>
	        	GFX_DrawPixel(y_start, x_start, color);
 8001306:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800130a:	461a      	mov	r2, r3
 800130c:	68f9      	ldr	r1, [r7, #12]
 800130e:	68b8      	ldr	r0, [r7, #8]
 8001310:	f000 ffd2 	bl	80022b8 <MAX7219_SetPixel>
 8001314:	e006      	b.n	8001324 <GFX_WriteLine+0xd8>
	        } else {
	        	GFX_DrawPixel(x_start, y_start, color);
 8001316:	f897 3038 	ldrb.w	r3, [r7, #56]	; 0x38
 800131a:	461a      	mov	r2, r3
 800131c:	68b9      	ldr	r1, [r7, #8]
 800131e:	68f8      	ldr	r0, [r7, #12]
 8001320:	f000 ffca 	bl	80022b8 <MAX7219_SetPixel>
	        }
	        err -= dy;
 8001324:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001326:	8abb      	ldrh	r3, [r7, #20]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	b29b      	uxth	r3, r3
 800132c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	        if (err < 0) {
 800132e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001332:	2b00      	cmp	r3, #0
 8001334:	da09      	bge.n	800134a <GFX_WriteLine+0xfe>
	            y_start += ystep;
 8001336:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	4413      	add	r3, r2
 800133e:	60bb      	str	r3, [r7, #8]
	            err += dx;
 8001340:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001342:	8afb      	ldrh	r3, [r7, #22]
 8001344:	4413      	add	r3, r2
 8001346:	b29b      	uxth	r3, r3
 8001348:	85fb      	strh	r3, [r7, #46]	; 0x2e
	    for (; x_start<=x_end; x_start++) {
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	3301      	adds	r3, #1
 800134e:	60fb      	str	r3, [r7, #12]
 8001350:	68fa      	ldr	r2, [r7, #12]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	429a      	cmp	r2, r3
 8001356:	ddd2      	ble.n	80012fe <GFX_WriteLine+0xb2>
	        }
	    }
}
 8001358:	bf00      	nop
 800135a:	bf00      	nop
 800135c:	3730      	adds	r7, #48	; 0x30
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <GFX_DrawFastVLine>:

void GFX_DrawFastVLine(int x_start, int y_start, int h, uint8_t color)
{
 8001362:	b580      	push	{r7, lr}
 8001364:	b086      	sub	sp, #24
 8001366:	af02      	add	r7, sp, #8
 8001368:	60f8      	str	r0, [r7, #12]
 800136a:	60b9      	str	r1, [r7, #8]
 800136c:	607a      	str	r2, [r7, #4]
 800136e:	70fb      	strb	r3, [r7, #3]
	GFX_WriteLine(x_start, y_start, x_start, y_start+h-1, color);
 8001370:	68ba      	ldr	r2, [r7, #8]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	1e5a      	subs	r2, r3, #1
 8001378:	78fb      	ldrb	r3, [r7, #3]
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	4613      	mov	r3, r2
 800137e:	68fa      	ldr	r2, [r7, #12]
 8001380:	68b9      	ldr	r1, [r7, #8]
 8001382:	68f8      	ldr	r0, [r7, #12]
 8001384:	f7ff ff62 	bl	800124c <GFX_WriteLine>
}
 8001388:	bf00      	nop
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}

08001390 <GFX_DrawFillRectangle>:

}
#endif
#if USING_FILL_RECTANGLE == 1
void GFX_DrawFillRectangle(int x, int y, uint16_t w, uint16_t h, uint8_t color)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	4611      	mov	r1, r2
 800139c:	461a      	mov	r2, r3
 800139e:	460b      	mov	r3, r1
 80013a0:	80fb      	strh	r3, [r7, #6]
 80013a2:	4613      	mov	r3, r2
 80013a4:	80bb      	strh	r3, [r7, #4]
    for (int i=x; i<x+w; i++) {
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	617b      	str	r3, [r7, #20]
 80013aa:	e009      	b.n	80013c0 <GFX_DrawFillRectangle+0x30>
    	GFX_DrawFastVLine(i, y, h, color);
 80013ac:	88ba      	ldrh	r2, [r7, #4]
 80013ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013b2:	68b9      	ldr	r1, [r7, #8]
 80013b4:	6978      	ldr	r0, [r7, #20]
 80013b6:	f7ff ffd4 	bl	8001362 <GFX_DrawFastVLine>
    for (int i=x; i<x+w; i++) {
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	3301      	adds	r3, #1
 80013be:	617b      	str	r3, [r7, #20]
 80013c0:	88fa      	ldrh	r2, [r7, #6]
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	4413      	add	r3, r2
 80013c6:	697a      	ldr	r2, [r7, #20]
 80013c8:	429a      	cmp	r2, r3
 80013ca:	dbef      	blt.n	80013ac <GFX_DrawFillRectangle+0x1c>
    }

}
 80013cc:	bf00      	nop
 80013ce:	bf00      	nop
 80013d0:	3718      	adds	r7, #24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
	...

080013d8 <HAL_UART_RxCpltCallback>:
void StartTempTask(void *argument);
void StartUartTask(void *argument);

/* USER CODE BEGIN PFP */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
	if (1) // interrupt rx
	{
		//osMessageQueuePut(mq_id, msg_ptr, msg_prio, timeout)
		osMessageQueuePut(UartQueueHandle, &uart2RecBuf, 0, 0);
 80013e0:	4b07      	ldr	r3, [pc, #28]	; (8001400 <HAL_UART_RxCpltCallback+0x28>)
 80013e2:	6818      	ldr	r0, [r3, #0]
 80013e4:	2300      	movs	r3, #0
 80013e6:	2200      	movs	r2, #0
 80013e8:	4906      	ldr	r1, [pc, #24]	; (8001404 <HAL_UART_RxCpltCallback+0x2c>)
 80013ea:	f007 faad 	bl	8008948 <osMessageQueuePut>
		//mask= mask? 0:1 ;
		HAL_UART_Receive_IT(&huart2, &uart2RecBuf, 1);
 80013ee:	2201      	movs	r2, #1
 80013f0:	4904      	ldr	r1, [pc, #16]	; (8001404 <HAL_UART_RxCpltCallback+0x2c>)
 80013f2:	4805      	ldr	r0, [pc, #20]	; (8001408 <HAL_UART_RxCpltCallback+0x30>)
 80013f4:	f005 fe54 	bl	80070a0 <HAL_UART_Receive_IT>
	}
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	200028e0 	.word	0x200028e0
 8001404:	2000032c 	.word	0x2000032c
 8001408:	200029d4 	.word	0x200029d4

0800140c <scan>:

uint8_t scan(uint8_t *stt){
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	uint8_t f = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	73fb      	strb	r3, [r7, #15]
	for (int i = 1; i <255; i++){
 8001418:	2301      	movs	r3, #1
 800141a:	60bb      	str	r3, [r7, #8]
 800141c:	e01b      	b.n	8001456 <scan+0x4a>
		if(stt[i] == '#' ){
 800141e:	68bb      	ldr	r3, [r7, #8]
 8001420:	687a      	ldr	r2, [r7, #4]
 8001422:	4413      	add	r3, r2
 8001424:	781b      	ldrb	r3, [r3, #0]
 8001426:	2b23      	cmp	r3, #35	; 0x23
 8001428:	d101      	bne.n	800142e <scan+0x22>
			f = 1;
 800142a:	2301      	movs	r3, #1
 800142c:	73fb      	strb	r3, [r7, #15]
		}
		if(f == 0){
 800142e:	7bfb      	ldrb	r3, [r7, #15]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d108      	bne.n	8001446 <scan+0x3a>
			str[i-1]=stt[i];
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	687a      	ldr	r2, [r7, #4]
 8001438:	441a      	add	r2, r3
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	3b01      	subs	r3, #1
 800143e:	7811      	ldrb	r1, [r2, #0]
 8001440:	4a0a      	ldr	r2, [pc, #40]	; (800146c <scan+0x60>)
 8001442:	54d1      	strb	r1, [r2, r3]
 8001444:	e004      	b.n	8001450 <scan+0x44>
		}
		else{
			str[i-1]= NULL;
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	3b01      	subs	r3, #1
 800144a:	4a08      	ldr	r2, [pc, #32]	; (800146c <scan+0x60>)
 800144c:	2100      	movs	r1, #0
 800144e:	54d1      	strb	r1, [r2, r3]
	for (int i = 1; i <255; i++){
 8001450:	68bb      	ldr	r3, [r7, #8]
 8001452:	3301      	adds	r3, #1
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	68bb      	ldr	r3, [r7, #8]
 8001458:	2bfe      	cmp	r3, #254	; 0xfe
 800145a:	dde0      	ble.n	800141e <scan+0x12>
		}
	}

}
 800145c:	bf00      	nop
 800145e:	4618      	mov	r0, r3
 8001460:	3714      	adds	r7, #20
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	20000004 	.word	0x20000004

08001470 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001474:	f001 fbe1 	bl	8002c3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001478:	f000 f892 	bl	80015a0 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800147c:	f000 f8f2 	bl	8001664 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001480:	f000 fa44 	bl	800190c <MX_GPIO_Init>
  MX_ADC1_Init();
 8001484:	f000 f91c 	bl	80016c0 <MX_ADC1_Init>
  MX_I2C3_Init();
 8001488:	f000 f97e 	bl	8001788 <MX_I2C3_Init>
  MX_SPI3_Init();
 800148c:	f000 f9d0 	bl	8001830 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 8001490:	f000 fa0c 	bl	80018ac <MX_USART2_UART_Init>
  MX_RNG_Init();
 8001494:	f000 f9b8 	bl	8001808 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  MAX7219_Init(&hspi3);
 8001498:	4829      	ldr	r0, [pc, #164]	; (8001540 <main+0xd0>)
 800149a:	f001 f849 	bl	8002530 <MAX7219_Init>
  HAL_Delay(100);
 800149e:	2064      	movs	r0, #100	; 0x64
 80014a0:	f001 fc04 	bl	8002cac <HAL_Delay>
  GFX_SetFont(font_8x5);
 80014a4:	4827      	ldr	r0, [pc, #156]	; (8001544 <main+0xd4>)
 80014a6:	f7ff fda1 	bl	8000fec <GFX_SetFont>
  GFX_SetFontSize(1);
 80014aa:	2001      	movs	r0, #1
 80014ac:	f7ff fdae 	bl	800100c <GFX_SetFontSize>
  MAX7219_Clear(MAX7219_BLACK);
 80014b0:	2000      	movs	r0, #0
 80014b2:	f000 ffbb 	bl	800242c <MAX7219_Clear>
  MAX7219_Display();
 80014b6:	f000 ffd9 	bl	800246c <MAX7219_Display>
  HAL_UART_Receive_IT(&huart2, &uart2RecBuf, 1);
 80014ba:	2201      	movs	r2, #1
 80014bc:	4922      	ldr	r1, [pc, #136]	; (8001548 <main+0xd8>)
 80014be:	4823      	ldr	r0, [pc, #140]	; (800154c <main+0xdc>)
 80014c0:	f005 fdee 	bl	80070a0 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80014c4:	f007 f8d6 	bl	8008674 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of UartQueue */
  UartQueueHandle = osMessageQueueNew (16, sizeof(uint16_t), &UartQueue_attributes);
 80014c8:	4a21      	ldr	r2, [pc, #132]	; (8001550 <main+0xe0>)
 80014ca:	2102      	movs	r1, #2
 80014cc:	2010      	movs	r0, #16
 80014ce:	f007 f9c8 	bl	8008862 <osMessageQueueNew>
 80014d2:	4603      	mov	r3, r0
 80014d4:	4a1f      	ldr	r2, [pc, #124]	; (8001554 <main+0xe4>)
 80014d6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80014d8:	4a1f      	ldr	r2, [pc, #124]	; (8001558 <main+0xe8>)
 80014da:	2100      	movs	r1, #0
 80014dc:	481f      	ldr	r0, [pc, #124]	; (800155c <main+0xec>)
 80014de:	f007 f913 	bl	8008708 <osThreadNew>
 80014e2:	4603      	mov	r3, r0
 80014e4:	4a1e      	ldr	r2, [pc, #120]	; (8001560 <main+0xf0>)
 80014e6:	6013      	str	r3, [r2, #0]

  /* creation of MartixTask */
  MartixTaskHandle = osThreadNew(StartMartixTask, NULL, &MartixTask_attributes);
 80014e8:	4a1e      	ldr	r2, [pc, #120]	; (8001564 <main+0xf4>)
 80014ea:	2100      	movs	r1, #0
 80014ec:	481e      	ldr	r0, [pc, #120]	; (8001568 <main+0xf8>)
 80014ee:	f007 f90b 	bl	8008708 <osThreadNew>
 80014f2:	4603      	mov	r3, r0
 80014f4:	4a1d      	ldr	r2, [pc, #116]	; (800156c <main+0xfc>)
 80014f6:	6013      	str	r3, [r2, #0]

  /* creation of PotentionTask */
  PotentionTaskHandle = osThreadNew(StartPotentionTask, NULL, &PotentionTask_attributes);
 80014f8:	4a1d      	ldr	r2, [pc, #116]	; (8001570 <main+0x100>)
 80014fa:	2100      	movs	r1, #0
 80014fc:	481d      	ldr	r0, [pc, #116]	; (8001574 <main+0x104>)
 80014fe:	f007 f903 	bl	8008708 <osThreadNew>
 8001502:	4603      	mov	r3, r0
 8001504:	4a1c      	ldr	r2, [pc, #112]	; (8001578 <main+0x108>)
 8001506:	6013      	str	r3, [r2, #0]

  /* creation of SwitchTask */
  SwitchTaskHandle = osThreadNew(StartSwitchTask, NULL, &SwitchTask_attributes);
 8001508:	4a1c      	ldr	r2, [pc, #112]	; (800157c <main+0x10c>)
 800150a:	2100      	movs	r1, #0
 800150c:	481c      	ldr	r0, [pc, #112]	; (8001580 <main+0x110>)
 800150e:	f007 f8fb 	bl	8008708 <osThreadNew>
 8001512:	4603      	mov	r3, r0
 8001514:	4a1b      	ldr	r2, [pc, #108]	; (8001584 <main+0x114>)
 8001516:	6013      	str	r3, [r2, #0]

  /* creation of TempTask */
  TempTaskHandle = osThreadNew(StartTempTask, NULL, &TempTask_attributes);
 8001518:	4a1b      	ldr	r2, [pc, #108]	; (8001588 <main+0x118>)
 800151a:	2100      	movs	r1, #0
 800151c:	481b      	ldr	r0, [pc, #108]	; (800158c <main+0x11c>)
 800151e:	f007 f8f3 	bl	8008708 <osThreadNew>
 8001522:	4603      	mov	r3, r0
 8001524:	4a1a      	ldr	r2, [pc, #104]	; (8001590 <main+0x120>)
 8001526:	6013      	str	r3, [r2, #0]

  /* creation of UartTask */
  UartTaskHandle = osThreadNew(StartUartTask, NULL, &UartTask_attributes);
 8001528:	4a1a      	ldr	r2, [pc, #104]	; (8001594 <main+0x124>)
 800152a:	2100      	movs	r1, #0
 800152c:	481a      	ldr	r0, [pc, #104]	; (8001598 <main+0x128>)
 800152e:	f007 f8eb 	bl	8008708 <osThreadNew>
 8001532:	4603      	mov	r3, r0
 8001534:	4a19      	ldr	r2, [pc, #100]	; (800159c <main+0x12c>)
 8001536:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001538:	f007 f8c0 	bl	80086bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800153c:	e7fe      	b.n	800153c <main+0xcc>
 800153e:	bf00      	nop
 8001540:	200028e4 	.word	0x200028e4
 8001544:	0800ff98 	.word	0x0800ff98
 8001548:	2000032c 	.word	0x2000032c
 800154c:	200029d4 	.word	0x200029d4
 8001550:	08010250 	.word	0x08010250
 8001554:	200028e0 	.word	0x200028e0
 8001558:	08010178 	.word	0x08010178
 800155c:	080019bd 	.word	0x080019bd
 8001560:	20002880 	.word	0x20002880
 8001564:	0801019c 	.word	0x0801019c
 8001568:	080019cd 	.word	0x080019cd
 800156c:	20002a58 	.word	0x20002a58
 8001570:	080101c0 	.word	0x080101c0
 8001574:	08001b55 	.word	0x08001b55
 8001578:	200029ac 	.word	0x200029ac
 800157c:	080101e4 	.word	0x080101e4
 8001580:	08001bd5 	.word	0x08001bd5
 8001584:	200029cc 	.word	0x200029cc
 8001588:	08010208 	.word	0x08010208
 800158c:	08001c6d 	.word	0x08001c6d
 8001590:	200029c8 	.word	0x200029c8
 8001594:	0801022c 	.word	0x0801022c
 8001598:	08001dad 	.word	0x08001dad
 800159c:	200029d0 	.word	0x200029d0

080015a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b096      	sub	sp, #88	; 0x58
 80015a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015a6:	f107 0314 	add.w	r3, r7, #20
 80015aa:	2244      	movs	r2, #68	; 0x44
 80015ac:	2100      	movs	r1, #0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f00a f8f5 	bl	800b79e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b4:	463b      	mov	r3, r7
 80015b6:	2200      	movs	r2, #0
 80015b8:	601a      	str	r2, [r3, #0]
 80015ba:	605a      	str	r2, [r3, #4]
 80015bc:	609a      	str	r2, [r3, #8]
 80015be:	60da      	str	r2, [r3, #12]
 80015c0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80015c2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80015c6:	f003 fcaf 	bl	8004f28 <HAL_PWREx_ControlVoltageScaling>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80015d0:	f000 fd88 	bl	80020e4 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80015d4:	f003 fc8a 	bl	8004eec <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80015d8:	4b21      	ldr	r3, [pc, #132]	; (8001660 <SystemClock_Config+0xc0>)
 80015da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80015de:	4a20      	ldr	r2, [pc, #128]	; (8001660 <SystemClock_Config+0xc0>)
 80015e0:	f023 0318 	bic.w	r3, r3, #24
 80015e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80015e8:	2314      	movs	r3, #20
 80015ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80015ec:	2301      	movs	r3, #1
 80015ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80015f0:	2301      	movs	r3, #1
 80015f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80015f8:	2360      	movs	r3, #96	; 0x60
 80015fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015fc:	2302      	movs	r3, #2
 80015fe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001600:	2301      	movs	r3, #1
 8001602:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001604:	2301      	movs	r3, #1
 8001606:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 32;
 8001608:	2320      	movs	r3, #32
 800160a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800160c:	2307      	movs	r3, #7
 800160e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001610:	2302      	movs	r3, #2
 8001612:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001614:	2302      	movs	r3, #2
 8001616:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	4618      	mov	r0, r3
 800161e:	f003 fcd9 	bl	8004fd4 <HAL_RCC_OscConfig>
 8001622:	4603      	mov	r3, r0
 8001624:	2b00      	cmp	r3, #0
 8001626:	d001      	beq.n	800162c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001628:	f000 fd5c 	bl	80020e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800162c:	230f      	movs	r3, #15
 800162e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001630:	2303      	movs	r3, #3
 8001632:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001634:	2300      	movs	r3, #0
 8001636:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001638:	2300      	movs	r3, #0
 800163a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800163c:	2300      	movs	r3, #0
 800163e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001640:	463b      	mov	r3, r7
 8001642:	2103      	movs	r1, #3
 8001644:	4618      	mov	r0, r3
 8001646:	f004 f8d7 	bl	80057f8 <HAL_RCC_ClockConfig>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001650:	f000 fd48 	bl	80020e4 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001654:	f004 fd1a 	bl	800608c <HAL_RCCEx_EnableMSIPLLMode>
}
 8001658:	bf00      	nop
 800165a:	3758      	adds	r7, #88	; 0x58
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	40021000 	.word	0x40021000

08001664 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b096      	sub	sp, #88	; 0x58
 8001668:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800166a:	1d3b      	adds	r3, r7, #4
 800166c:	2254      	movs	r2, #84	; 0x54
 800166e:	2100      	movs	r1, #0
 8001670:	4618      	mov	r0, r3
 8001672:	f00a f894 	bl	800b79e <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RNG|RCC_PERIPHCLK_ADC;
 8001676:	f44f 2388 	mov.w	r3, #278528	; 0x44000
 800167a:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 800167c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001680:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInit.RngClockSelection = RCC_RNGCLKSOURCE_PLLSAI1;
 8001682:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001686:	64bb      	str	r3, [r7, #72]	; 0x48
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001688:	2301      	movs	r3, #1
 800168a:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800168c:	2301      	movs	r3, #1
 800168e:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001690:	2310      	movs	r3, #16
 8001692:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001694:	2307      	movs	r3, #7
 8001696:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001698:	2302      	movs	r3, #2
 800169a:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800169c:	2302      	movs	r3, #2
 800169e:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK|RCC_PLLSAI1_ADC1CLK;
 80016a0:	f04f 7388 	mov.w	r3, #17825792	; 0x1100000
 80016a4:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	4618      	mov	r0, r3
 80016aa:	f004 fafb 	bl	8005ca4 <HAL_RCCEx_PeriphCLKConfig>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <PeriphCommonClock_Config+0x54>
  {
    Error_Handler();
 80016b4:	f000 fd16 	bl	80020e4 <Error_Handler>
  }
}
 80016b8:	bf00      	nop
 80016ba:	3758      	adds	r7, #88	; 0x58
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}

080016c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b086      	sub	sp, #24
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016c6:	463b      	mov	r3, r7
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
 80016d2:	611a      	str	r2, [r3, #16]
 80016d4:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80016d6:	4b29      	ldr	r3, [pc, #164]	; (800177c <MX_ADC1_Init+0xbc>)
 80016d8:	4a29      	ldr	r2, [pc, #164]	; (8001780 <MX_ADC1_Init+0xc0>)
 80016da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80016dc:	4b27      	ldr	r3, [pc, #156]	; (800177c <MX_ADC1_Init+0xbc>)
 80016de:	2200      	movs	r2, #0
 80016e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016e2:	4b26      	ldr	r3, [pc, #152]	; (800177c <MX_ADC1_Init+0xbc>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016e8:	4b24      	ldr	r3, [pc, #144]	; (800177c <MX_ADC1_Init+0xbc>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016ee:	4b23      	ldr	r3, [pc, #140]	; (800177c <MX_ADC1_Init+0xbc>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016f4:	4b21      	ldr	r3, [pc, #132]	; (800177c <MX_ADC1_Init+0xbc>)
 80016f6:	2204      	movs	r2, #4
 80016f8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80016fa:	4b20      	ldr	r3, [pc, #128]	; (800177c <MX_ADC1_Init+0xbc>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001700:	4b1e      	ldr	r3, [pc, #120]	; (800177c <MX_ADC1_Init+0xbc>)
 8001702:	2200      	movs	r2, #0
 8001704:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001706:	4b1d      	ldr	r3, [pc, #116]	; (800177c <MX_ADC1_Init+0xbc>)
 8001708:	2201      	movs	r2, #1
 800170a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800170c:	4b1b      	ldr	r3, [pc, #108]	; (800177c <MX_ADC1_Init+0xbc>)
 800170e:	2200      	movs	r2, #0
 8001710:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001714:	4b19      	ldr	r3, [pc, #100]	; (800177c <MX_ADC1_Init+0xbc>)
 8001716:	2200      	movs	r2, #0
 8001718:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800171a:	4b18      	ldr	r3, [pc, #96]	; (800177c <MX_ADC1_Init+0xbc>)
 800171c:	2200      	movs	r2, #0
 800171e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001720:	4b16      	ldr	r3, [pc, #88]	; (800177c <MX_ADC1_Init+0xbc>)
 8001722:	2200      	movs	r2, #0
 8001724:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001728:	4b14      	ldr	r3, [pc, #80]	; (800177c <MX_ADC1_Init+0xbc>)
 800172a:	2200      	movs	r2, #0
 800172c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 800172e:	4b13      	ldr	r3, [pc, #76]	; (800177c <MX_ADC1_Init+0xbc>)
 8001730:	2200      	movs	r2, #0
 8001732:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001736:	4811      	ldr	r0, [pc, #68]	; (800177c <MX_ADC1_Init+0xbc>)
 8001738:	f001 fca4 	bl	8003084 <HAL_ADC_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8001742:	f000 fccf 	bl	80020e4 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001746:	4b0f      	ldr	r3, [pc, #60]	; (8001784 <MX_ADC1_Init+0xc4>)
 8001748:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800174a:	2306      	movs	r3, #6
 800174c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800174e:	2300      	movs	r3, #0
 8001750:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001752:	237f      	movs	r3, #127	; 0x7f
 8001754:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001756:	2304      	movs	r3, #4
 8001758:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800175a:	2300      	movs	r3, #0
 800175c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800175e:	463b      	mov	r3, r7
 8001760:	4619      	mov	r1, r3
 8001762:	4806      	ldr	r0, [pc, #24]	; (800177c <MX_ADC1_Init+0xbc>)
 8001764:	f001 fed6 	bl	8003514 <HAL_ADC_ConfigChannel>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800176e:	f000 fcb9 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001772:	bf00      	nop
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20002948 	.word	0x20002948
 8001780:	50040000 	.word	0x50040000
 8001784:	2a000400 	.word	0x2a000400

08001788 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800178c:	4b1b      	ldr	r3, [pc, #108]	; (80017fc <MX_I2C3_Init+0x74>)
 800178e:	4a1c      	ldr	r2, [pc, #112]	; (8001800 <MX_I2C3_Init+0x78>)
 8001790:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x10707DBC;
 8001792:	4b1a      	ldr	r3, [pc, #104]	; (80017fc <MX_I2C3_Init+0x74>)
 8001794:	4a1b      	ldr	r2, [pc, #108]	; (8001804 <MX_I2C3_Init+0x7c>)
 8001796:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001798:	4b18      	ldr	r3, [pc, #96]	; (80017fc <MX_I2C3_Init+0x74>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800179e:	4b17      	ldr	r3, [pc, #92]	; (80017fc <MX_I2C3_Init+0x74>)
 80017a0:	2201      	movs	r2, #1
 80017a2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80017a4:	4b15      	ldr	r3, [pc, #84]	; (80017fc <MX_I2C3_Init+0x74>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80017aa:	4b14      	ldr	r3, [pc, #80]	; (80017fc <MX_I2C3_Init+0x74>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80017b0:	4b12      	ldr	r3, [pc, #72]	; (80017fc <MX_I2C3_Init+0x74>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80017b6:	4b11      	ldr	r3, [pc, #68]	; (80017fc <MX_I2C3_Init+0x74>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80017bc:	4b0f      	ldr	r3, [pc, #60]	; (80017fc <MX_I2C3_Init+0x74>)
 80017be:	2200      	movs	r2, #0
 80017c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80017c2:	480e      	ldr	r0, [pc, #56]	; (80017fc <MX_I2C3_Init+0x74>)
 80017c4:	f002 fe08 	bl	80043d8 <HAL_I2C_Init>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80017ce:	f000 fc89 	bl	80020e4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80017d2:	2100      	movs	r1, #0
 80017d4:	4809      	ldr	r0, [pc, #36]	; (80017fc <MX_I2C3_Init+0x74>)
 80017d6:	f003 faf1 	bl	8004dbc <HAL_I2CEx_ConfigAnalogFilter>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80017e0:	f000 fc80 	bl	80020e4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80017e4:	2100      	movs	r1, #0
 80017e6:	4805      	ldr	r0, [pc, #20]	; (80017fc <MX_I2C3_Init+0x74>)
 80017e8:	f003 fb33 	bl	8004e52 <HAL_I2CEx_ConfigDigitalFilter>
 80017ec:	4603      	mov	r3, r0
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d001      	beq.n	80017f6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80017f2:	f000 fc77 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80017f6:	bf00      	nop
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	20002884 	.word	0x20002884
 8001800:	40005c00 	.word	0x40005c00
 8001804:	10707dbc 	.word	0x10707dbc

08001808 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 800180c:	4b06      	ldr	r3, [pc, #24]	; (8001828 <MX_RNG_Init+0x20>)
 800180e:	4a07      	ldr	r2, [pc, #28]	; (800182c <MX_RNG_Init+0x24>)
 8001810:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001812:	4805      	ldr	r0, [pc, #20]	; (8001828 <MX_RNG_Init+0x20>)
 8001814:	f004 fd3c 	bl	8006290 <HAL_RNG_Init>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d001      	beq.n	8001822 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800181e:	f000 fc61 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	200029b4 	.word	0x200029b4
 800182c:	50060800 	.word	0x50060800

08001830 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8001834:	4b1b      	ldr	r3, [pc, #108]	; (80018a4 <MX_SPI3_Init+0x74>)
 8001836:	4a1c      	ldr	r2, [pc, #112]	; (80018a8 <MX_SPI3_Init+0x78>)
 8001838:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800183a:	4b1a      	ldr	r3, [pc, #104]	; (80018a4 <MX_SPI3_Init+0x74>)
 800183c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001840:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8001842:	4b18      	ldr	r3, [pc, #96]	; (80018a4 <MX_SPI3_Init+0x74>)
 8001844:	2200      	movs	r2, #0
 8001846:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001848:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <MX_SPI3_Init+0x74>)
 800184a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800184e:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001850:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <MX_SPI3_Init+0x74>)
 8001852:	2200      	movs	r2, #0
 8001854:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001856:	4b13      	ldr	r3, [pc, #76]	; (80018a4 <MX_SPI3_Init+0x74>)
 8001858:	2200      	movs	r2, #0
 800185a:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800185c:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <MX_SPI3_Init+0x74>)
 800185e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001862:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001864:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <MX_SPI3_Init+0x74>)
 8001866:	2238      	movs	r2, #56	; 0x38
 8001868:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800186a:	4b0e      	ldr	r3, [pc, #56]	; (80018a4 <MX_SPI3_Init+0x74>)
 800186c:	2200      	movs	r2, #0
 800186e:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <MX_SPI3_Init+0x74>)
 8001872:	2200      	movs	r2, #0
 8001874:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001876:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <MX_SPI3_Init+0x74>)
 8001878:	2200      	movs	r2, #0
 800187a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800187c:	4b09      	ldr	r3, [pc, #36]	; (80018a4 <MX_SPI3_Init+0x74>)
 800187e:	2207      	movs	r2, #7
 8001880:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001882:	4b08      	ldr	r3, [pc, #32]	; (80018a4 <MX_SPI3_Init+0x74>)
 8001884:	2200      	movs	r2, #0
 8001886:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001888:	4b06      	ldr	r3, [pc, #24]	; (80018a4 <MX_SPI3_Init+0x74>)
 800188a:	2208      	movs	r2, #8
 800188c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800188e:	4805      	ldr	r0, [pc, #20]	; (80018a4 <MX_SPI3_Init+0x74>)
 8001890:	f004 fd55 	bl	800633e <HAL_SPI_Init>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d001      	beq.n	800189e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 800189a:	f000 fc23 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	200028e4 	.word	0x200028e4
 80018a8:	40003c00 	.word	0x40003c00

080018ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018b0:	4b14      	ldr	r3, [pc, #80]	; (8001904 <MX_USART2_UART_Init+0x58>)
 80018b2:	4a15      	ldr	r2, [pc, #84]	; (8001908 <MX_USART2_UART_Init+0x5c>)
 80018b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80018b6:	4b13      	ldr	r3, [pc, #76]	; (8001904 <MX_USART2_UART_Init+0x58>)
 80018b8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80018bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018be:	4b11      	ldr	r3, [pc, #68]	; (8001904 <MX_USART2_UART_Init+0x58>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018c4:	4b0f      	ldr	r3, [pc, #60]	; (8001904 <MX_USART2_UART_Init+0x58>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <MX_USART2_UART_Init+0x58>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <MX_USART2_UART_Init+0x58>)
 80018d2:	220c      	movs	r2, #12
 80018d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018d6:	4b0b      	ldr	r3, [pc, #44]	; (8001904 <MX_USART2_UART_Init+0x58>)
 80018d8:	2200      	movs	r2, #0
 80018da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018dc:	4b09      	ldr	r3, [pc, #36]	; (8001904 <MX_USART2_UART_Init+0x58>)
 80018de:	2200      	movs	r2, #0
 80018e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018e2:	4b08      	ldr	r3, [pc, #32]	; (8001904 <MX_USART2_UART_Init+0x58>)
 80018e4:	2200      	movs	r2, #0
 80018e6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018e8:	4b06      	ldr	r3, [pc, #24]	; (8001904 <MX_USART2_UART_Init+0x58>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018ee:	4805      	ldr	r0, [pc, #20]	; (8001904 <MX_USART2_UART_Init+0x58>)
 80018f0:	f005 fb1a 	bl	8006f28 <HAL_UART_Init>
 80018f4:	4603      	mov	r3, r0
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80018fa:	f000 fbf3 	bl	80020e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018fe:	bf00      	nop
 8001900:	bd80      	pop	{r7, pc}
 8001902:	bf00      	nop
 8001904:	200029d4 	.word	0x200029d4
 8001908:	40004400 	.word	0x40004400

0800190c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b088      	sub	sp, #32
 8001910:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001912:	f107 030c 	add.w	r3, r7, #12
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	609a      	str	r2, [r3, #8]
 800191e:	60da      	str	r2, [r3, #12]
 8001920:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001922:	4b25      	ldr	r3, [pc, #148]	; (80019b8 <MX_GPIO_Init+0xac>)
 8001924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001926:	4a24      	ldr	r2, [pc, #144]	; (80019b8 <MX_GPIO_Init+0xac>)
 8001928:	f043 0304 	orr.w	r3, r3, #4
 800192c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800192e:	4b22      	ldr	r3, [pc, #136]	; (80019b8 <MX_GPIO_Init+0xac>)
 8001930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001932:	f003 0304 	and.w	r3, r3, #4
 8001936:	60bb      	str	r3, [r7, #8]
 8001938:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800193a:	4b1f      	ldr	r3, [pc, #124]	; (80019b8 <MX_GPIO_Init+0xac>)
 800193c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193e:	4a1e      	ldr	r2, [pc, #120]	; (80019b8 <MX_GPIO_Init+0xac>)
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001946:	4b1c      	ldr	r3, [pc, #112]	; (80019b8 <MX_GPIO_Init+0xac>)
 8001948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	607b      	str	r3, [r7, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001952:	4b19      	ldr	r3, [pc, #100]	; (80019b8 <MX_GPIO_Init+0xac>)
 8001954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001956:	4a18      	ldr	r2, [pc, #96]	; (80019b8 <MX_GPIO_Init+0xac>)
 8001958:	f043 0302 	orr.w	r3, r3, #2
 800195c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800195e:	4b16      	ldr	r3, [pc, #88]	; (80019b8 <MX_GPIO_Init+0xac>)
 8001960:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	603b      	str	r3, [r7, #0]
 8001968:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800196a:	2200      	movs	r2, #0
 800196c:	2110      	movs	r1, #16
 800196e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001972:	f002 fd19 	bl	80043a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001976:	2310      	movs	r3, #16
 8001978:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800197a:	2301      	movs	r3, #1
 800197c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001982:	2300      	movs	r3, #0
 8001984:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001986:	f107 030c 	add.w	r3, r7, #12
 800198a:	4619      	mov	r1, r3
 800198c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001990:	f002 fb88 	bl	80040a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001994:	2340      	movs	r3, #64	; 0x40
 8001996:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001998:	2300      	movs	r3, #0
 800199a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800199c:	2301      	movs	r3, #1
 800199e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a0:	f107 030c 	add.w	r3, r7, #12
 80019a4:	4619      	mov	r1, r3
 80019a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019aa:	f002 fb7b 	bl	80040a4 <HAL_GPIO_Init>

}
 80019ae:	bf00      	nop
 80019b0:	3720      	adds	r7, #32
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40021000 	.word	0x40021000

080019bc <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80019c4:	2001      	movs	r0, #1
 80019c6:	f006 ff31 	bl	800882c <osDelay>
 80019ca:	e7fb      	b.n	80019c4 <StartDefaultTask+0x8>

080019cc <StartMartixTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartMartixTask */
void StartMartixTask(void *argument)
{
 80019cc:	b590      	push	{r4, r7, lr}
 80019ce:	b089      	sub	sp, #36	; 0x24
 80019d0:	af02      	add	r7, sp, #8
 80019d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartMartixTask */
  /* Infinite loop */
	for(;;)
	  {
		if (flag == 0 || flag == 1){
 80019d4:	4b57      	ldr	r3, [pc, #348]	; (8001b34 <StartMartixTask+0x168>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d003      	beq.n	80019e4 <StartMartixTask+0x18>
 80019dc:	4b55      	ldr	r3, [pc, #340]	; (8001b34 <StartMartixTask+0x168>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d127      	bne.n	8001a34 <StartMartixTask+0x68>
			if (flag == 0){
 80019e4:	4b53      	ldr	r3, [pc, #332]	; (8001b34 <StartMartixTask+0x168>)
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d107      	bne.n	80019fc <StartMartixTask+0x30>
				sprintf(Text, "%d#", sensor);
 80019ec:	4b52      	ldr	r3, [pc, #328]	; (8001b38 <StartMartixTask+0x16c>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	461a      	mov	r2, r3
 80019f2:	4952      	ldr	r1, [pc, #328]	; (8001b3c <StartMartixTask+0x170>)
 80019f4:	4852      	ldr	r0, [pc, #328]	; (8001b40 <StartMartixTask+0x174>)
 80019f6:	f00a fe2f 	bl	800c658 <siprintf>
 80019fa:	e00a      	b.n	8001a12 <StartMartixTask+0x46>
			}
			else if (flag == 1){
 80019fc:	4b4d      	ldr	r3, [pc, #308]	; (8001b34 <StartMartixTask+0x168>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d106      	bne.n	8001a12 <StartMartixTask+0x46>
				sprintf(Text, "%d$", sensor);
 8001a04:	4b4c      	ldr	r3, [pc, #304]	; (8001b38 <StartMartixTask+0x16c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	461a      	mov	r2, r3
 8001a0a:	494e      	ldr	r1, [pc, #312]	; (8001b44 <StartMartixTask+0x178>)
 8001a0c:	484c      	ldr	r0, [pc, #304]	; (8001b40 <StartMartixTask+0x174>)
 8001a0e:	f00a fe23 	bl	800c658 <siprintf>
			}
			MAX7219_Clear(MAX7219_BLACK);
 8001a12:	2000      	movs	r0, #0
 8001a14:	f000 fd0a 	bl	800242c <MAX7219_Clear>
			GFX_DrawString(0,0, Text, MAX7219_WHITE, MAX7219_BLACK);
 8001a18:	2300      	movs	r3, #0
 8001a1a:	9300      	str	r3, [sp, #0]
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	4a48      	ldr	r2, [pc, #288]	; (8001b40 <StartMartixTask+0x174>)
 8001a20:	2100      	movs	r1, #0
 8001a22:	2000      	movs	r0, #0
 8001a24:	f7ff fbbe 	bl	80011a4 <GFX_DrawString>
			MAX7219_Display();
 8001a28:	f000 fd20 	bl	800246c <MAX7219_Display>
			osDelay(200);
 8001a2c:	20c8      	movs	r0, #200	; 0xc8
 8001a2e:	f006 fefd 	bl	800882c <osDelay>
 8001a32:	e079      	b.n	8001b28 <StartMartixTask+0x15c>
		}
		else if(flag == 2){
 8001a34:	4b3f      	ldr	r3, [pc, #252]	; (8001b34 <StartMartixTask+0x168>)
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	2b02      	cmp	r3, #2
 8001a3a:	d143      	bne.n	8001ac4 <StartMartixTask+0xf8>

			uint8_t w=sizeof(img);
 8001a3c:	2310      	movs	r3, #16
 8001a3e:	73bb      	strb	r3, [r7, #14]

			uint8_t h=8;
 8001a40:	2308      	movs	r3, #8
 8001a42:	737b      	strb	r3, [r7, #13]
			uint8_t i, j, jj;


				MAX7219_Clear(MAX7219_BLACK);
 8001a44:	2000      	movs	r0, #0
 8001a46:	f000 fcf1 	bl	800242c <MAX7219_Clear>
				for(j = 0; j < h; j++)
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	75bb      	strb	r3, [r7, #22]
 8001a4e:	e02b      	b.n	8001aa8 <StartMartixTask+0xdc>
				{
					for(i = 0; i < w; i++)
 8001a50:	2300      	movs	r3, #0
 8001a52:	75fb      	strb	r3, [r7, #23]
 8001a54:	e021      	b.n	8001a9a <StartMartixTask+0xce>
					{
						jj=(i)/8;
 8001a56:	7dfb      	ldrb	r3, [r7, #23]
 8001a58:	08db      	lsrs	r3, r3, #3
 8001a5a:	733b      	strb	r3, [r7, #12]
						if(img[(j+jj*7) + i /8] & (128 >> (i&7)) ){
 8001a5c:	7db9      	ldrb	r1, [r7, #22]
 8001a5e:	7b3a      	ldrb	r2, [r7, #12]
 8001a60:	4613      	mov	r3, r2
 8001a62:	00db      	lsls	r3, r3, #3
 8001a64:	1a9b      	subs	r3, r3, r2
 8001a66:	440b      	add	r3, r1
 8001a68:	7dfa      	ldrb	r2, [r7, #23]
 8001a6a:	08d2      	lsrs	r2, r2, #3
 8001a6c:	b2d2      	uxtb	r2, r2
 8001a6e:	4413      	add	r3, r2
 8001a70:	4a35      	ldr	r2, [pc, #212]	; (8001b48 <StartMartixTask+0x17c>)
 8001a72:	5cd3      	ldrb	r3, [r2, r3]
 8001a74:	4619      	mov	r1, r3
 8001a76:	7dfb      	ldrb	r3, [r7, #23]
 8001a78:	f003 0307 	and.w	r3, r3, #7
 8001a7c:	2280      	movs	r2, #128	; 0x80
 8001a7e:	fa42 f303 	asr.w	r3, r2, r3
 8001a82:	400b      	ands	r3, r1
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d005      	beq.n	8001a94 <StartMartixTask+0xc8>
							GFX_DrawPixel(i, j, MAX7219_WHITE);
 8001a88:	7dfb      	ldrb	r3, [r7, #23]
 8001a8a:	7db9      	ldrb	r1, [r7, #22]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f000 fc12 	bl	80022b8 <MAX7219_SetPixel>
					for(i = 0; i < w; i++)
 8001a94:	7dfb      	ldrb	r3, [r7, #23]
 8001a96:	3301      	adds	r3, #1
 8001a98:	75fb      	strb	r3, [r7, #23]
 8001a9a:	7dfa      	ldrb	r2, [r7, #23]
 8001a9c:	7bbb      	ldrb	r3, [r7, #14]
 8001a9e:	429a      	cmp	r2, r3
 8001aa0:	d3d9      	bcc.n	8001a56 <StartMartixTask+0x8a>
				for(j = 0; j < h; j++)
 8001aa2:	7dbb      	ldrb	r3, [r7, #22]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	75bb      	strb	r3, [r7, #22]
 8001aa8:	7dba      	ldrb	r2, [r7, #22]
 8001aaa:	7b7b      	ldrb	r3, [r7, #13]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d3cf      	bcc.n	8001a50 <StartMartixTask+0x84>
						}
					}
				}
				MAX7219_Display();
 8001ab0:	f000 fcdc 	bl	800246c <MAX7219_Display>
				if(flag!=2)break;
 8001ab4:	4b1f      	ldr	r3, [pc, #124]	; (8001b34 <StartMartixTask+0x168>)
 8001ab6:	781b      	ldrb	r3, [r3, #0]
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d136      	bne.n	8001b2a <StartMartixTask+0x15e>
				osDelay(100);
 8001abc:	2064      	movs	r0, #100	; 0x64
 8001abe:	f006 feb5 	bl	800882c <osDelay>
 8001ac2:	e787      	b.n	80019d4 <StartMartixTask+0x8>

		}
		else if (flag == 3){
 8001ac4:	4b1b      	ldr	r3, [pc, #108]	; (8001b34 <StartMartixTask+0x168>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	2b03      	cmp	r3, #3
 8001aca:	d183      	bne.n	80019d4 <StartMartixTask+0x8>
			uint8_t TextSize = strlen(str);
 8001acc:	481f      	ldr	r0, [pc, #124]	; (8001b4c <StartMartixTask+0x180>)
 8001ace:	f7fe fb7f 	bl	80001d0 <strlen>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	73fb      	strb	r3, [r7, #15]
				for(int i = MAX7219_X_PIXELS; i > ((TextSize * (GFX_GetFontWidth() + 1)) * -1); i--){
 8001ad6:	2310      	movs	r3, #16
 8001ad8:	613b      	str	r3, [r7, #16]
 8001ada:	e018      	b.n	8001b0e <StartMartixTask+0x142>
				MAX7219_Clear(MAX7219_BLACK);
 8001adc:	2000      	movs	r0, #0
 8001ade:	f000 fca5 	bl	800242c <MAX7219_Clear>
				GFX_DrawString(i,0, str, MAX7219_WHITE, MAX7219_BLACK);
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	9300      	str	r3, [sp, #0]
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	4a18      	ldr	r2, [pc, #96]	; (8001b4c <StartMartixTask+0x180>)
 8001aea:	2100      	movs	r1, #0
 8001aec:	6938      	ldr	r0, [r7, #16]
 8001aee:	f7ff fb59 	bl	80011a4 <GFX_DrawString>
				MAX7219_Display();
 8001af2:	f000 fcbb 	bl	800246c <MAX7219_Display>
				if(flag!=3)break;
 8001af6:	4b0f      	ldr	r3, [pc, #60]	; (8001b34 <StartMartixTask+0x168>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	2b03      	cmp	r3, #3
 8001afc:	d113      	bne.n	8001b26 <StartMartixTask+0x15a>
				osDelay(del);
 8001afe:	4b14      	ldr	r3, [pc, #80]	; (8001b50 <StartMartixTask+0x184>)
 8001b00:	881b      	ldrh	r3, [r3, #0]
 8001b02:	4618      	mov	r0, r3
 8001b04:	f006 fe92 	bl	800882c <osDelay>
				for(int i = MAX7219_X_PIXELS; i > ((TextSize * (GFX_GetFontWidth() + 1)) * -1); i--){
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	7bfc      	ldrb	r4, [r7, #15]
 8001b10:	f7ff fa90 	bl	8001034 <GFX_GetFontWidth>
 8001b14:	4603      	mov	r3, r0
 8001b16:	3301      	adds	r3, #1
 8001b18:	fb03 f304 	mul.w	r3, r3, r4
 8001b1c:	425b      	negs	r3, r3
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	429a      	cmp	r2, r3
 8001b22:	dcdb      	bgt.n	8001adc <StartMartixTask+0x110>
 8001b24:	e756      	b.n	80019d4 <StartMartixTask+0x8>
				if(flag!=3)break;
 8001b26:	bf00      	nop
		if (flag == 0 || flag == 1){
 8001b28:	e754      	b.n	80019d4 <StartMartixTask+0x8>
				if(flag!=2)break;
 8001b2a:	bf00      	nop
			}
		}

	  }
  /* USER CODE END StartMartixTask */
}
 8001b2c:	bf00      	nop
 8001b2e:	371c      	adds	r7, #28
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd90      	pop	{r4, r7, pc}
 8001b34:	20000106 	.word	0x20000106
 8001b38:	2000031c 	.word	0x2000031c
 8001b3c:	0800ff30 	.word	0x0800ff30
 8001b40:	20002a5c 	.word	0x20002a5c
 8001b44:	0800ff34 	.word	0x0800ff34
 8001b48:	2000010c 	.word	0x2000010c
 8001b4c:	20000004 	.word	0x20000004
 8001b50:	20000104 	.word	0x20000104

08001b54 <StartPotentionTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartPotentionTask */
void StartPotentionTask(void *argument)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b084      	sub	sp, #16
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartPotentionTask */
  /* Infinite loop */

  for(;;)
  {
	int AD_RES = 0;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	60fb      	str	r3, [r7, #12]

	  // Start ADC Conversion
	HAL_ADC_Start(&hadc1);
 8001b60:	4819      	ldr	r0, [pc, #100]	; (8001bc8 <StartPotentionTask+0x74>)
 8001b62:	f001 fbd7 	bl	8003314 <HAL_ADC_Start>
	         // Poll ADC1 Perihperal & TimeOut = 1mSec
	HAL_ADC_PollForConversion(&hadc1, 1);
 8001b66:	2101      	movs	r1, #1
 8001b68:	4817      	ldr	r0, [pc, #92]	; (8001bc8 <StartPotentionTask+0x74>)
 8001b6a:	f001 fc36 	bl	80033da <HAL_ADC_PollForConversion>
	         // Read The ADC Conversion Result & Map It To PWM DutyCycle
	AD_RES = HAL_ADC_GetValue(&hadc1);
 8001b6e:	4816      	ldr	r0, [pc, #88]	; (8001bc8 <StartPotentionTask+0x74>)
 8001b70:	f001 fcc2 	bl	80034f8 <HAL_ADC_GetValue>
 8001b74:	4603      	mov	r3, r0
 8001b76:	60fb      	str	r3, [r7, #12]

	if((AD_RES/500)!= intesivity ){
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	4a14      	ldr	r2, [pc, #80]	; (8001bcc <StartPotentionTask+0x78>)
 8001b7c:	fb82 1203 	smull	r1, r2, r2, r3
 8001b80:	1152      	asrs	r2, r2, #5
 8001b82:	17db      	asrs	r3, r3, #31
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	4a12      	ldr	r2, [pc, #72]	; (8001bd0 <StartPotentionTask+0x7c>)
 8001b88:	7812      	ldrb	r2, [r2, #0]
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d017      	beq.n	8001bbe <StartPotentionTask+0x6a>
		intesivity = 8 - (AD_RES/500);
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	4a0e      	ldr	r2, [pc, #56]	; (8001bcc <StartPotentionTask+0x78>)
 8001b92:	fb82 1203 	smull	r1, r2, r2, r3
 8001b96:	1152      	asrs	r2, r2, #5
 8001b98:	17db      	asrs	r3, r3, #31
 8001b9a:	1a9b      	subs	r3, r3, r2
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	3308      	adds	r3, #8
 8001ba0:	b2da      	uxtb	r2, r3
 8001ba2:	4b0b      	ldr	r3, [pc, #44]	; (8001bd0 <StartPotentionTask+0x7c>)
 8001ba4:	701a      	strb	r2, [r3, #0]

		MAX7219_SetIntensity(0,intesivity);
 8001ba6:	4b0a      	ldr	r3, [pc, #40]	; (8001bd0 <StartPotentionTask+0x7c>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	4619      	mov	r1, r3
 8001bac:	2000      	movs	r0, #0
 8001bae:	f000 fafd 	bl	80021ac <MAX7219_SetIntensity>
		MAX7219_SetIntensity(1,intesivity);
 8001bb2:	4b07      	ldr	r3, [pc, #28]	; (8001bd0 <StartPotentionTask+0x7c>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	2001      	movs	r0, #1
 8001bba:	f000 faf7 	bl	80021ac <MAX7219_SetIntensity>
	}
    osDelay(100);
 8001bbe:	2064      	movs	r0, #100	; 0x64
 8001bc0:	f006 fe34 	bl	800882c <osDelay>
  {
 8001bc4:	e7ca      	b.n	8001b5c <StartPotentionTask+0x8>
 8001bc6:	bf00      	nop
 8001bc8:	20002948 	.word	0x20002948
 8001bcc:	10624dd3 	.word	0x10624dd3
 8001bd0:	20000107 	.word	0x20000107

08001bd4 <StartSwitchTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartSwitchTask */
void StartSwitchTask(void *argument)
{
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b082      	sub	sp, #8
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartSwitchTask */
  /* Infinite loop */
  for(;;)
  {

	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET){
 8001bdc:	2140      	movs	r1, #64	; 0x40
 8001bde:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001be2:	f002 fbc9 	bl	8004378 <HAL_GPIO_ReadPin>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d122      	bne.n	8001c32 <StartSwitchTask+0x5e>
		  osDelay(300);
 8001bec:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001bf0:	f006 fe1c 	bl	800882c <osDelay>
		  if(flag==0){flag=1;}
 8001bf4:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <StartSwitchTask+0x88>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d103      	bne.n	8001c04 <StartSwitchTask+0x30>
 8001bfc:	4b17      	ldr	r3, [pc, #92]	; (8001c5c <StartSwitchTask+0x88>)
 8001bfe:	2201      	movs	r2, #1
 8001c00:	701a      	strb	r2, [r3, #0]
 8001c02:	e016      	b.n	8001c32 <StartSwitchTask+0x5e>
		  else if (flag==1){flag=2;}
 8001c04:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <StartSwitchTask+0x88>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d103      	bne.n	8001c14 <StartSwitchTask+0x40>
 8001c0c:	4b13      	ldr	r3, [pc, #76]	; (8001c5c <StartSwitchTask+0x88>)
 8001c0e:	2202      	movs	r2, #2
 8001c10:	701a      	strb	r2, [r3, #0]
 8001c12:	e00e      	b.n	8001c32 <StartSwitchTask+0x5e>
		  else if (flag==2){flag=3;}
 8001c14:	4b11      	ldr	r3, [pc, #68]	; (8001c5c <StartSwitchTask+0x88>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d103      	bne.n	8001c24 <StartSwitchTask+0x50>
 8001c1c:	4b0f      	ldr	r3, [pc, #60]	; (8001c5c <StartSwitchTask+0x88>)
 8001c1e:	2203      	movs	r2, #3
 8001c20:	701a      	strb	r2, [r3, #0]
 8001c22:	e006      	b.n	8001c32 <StartSwitchTask+0x5e>
		  else if (flag==3){flag=0;}
 8001c24:	4b0d      	ldr	r3, [pc, #52]	; (8001c5c <StartSwitchTask+0x88>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b03      	cmp	r3, #3
 8001c2a:	d102      	bne.n	8001c32 <StartSwitchTask+0x5e>
 8001c2c:	4b0b      	ldr	r3, [pc, #44]	; (8001c5c <StartSwitchTask+0x88>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	701a      	strb	r2, [r3, #0]

	  }
	  if(flag == 0){sensor=sensor11;}
 8001c32:	4b0a      	ldr	r3, [pc, #40]	; (8001c5c <StartSwitchTask+0x88>)
 8001c34:	781b      	ldrb	r3, [r3, #0]
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d104      	bne.n	8001c44 <StartSwitchTask+0x70>
 8001c3a:	4b09      	ldr	r3, [pc, #36]	; (8001c60 <StartSwitchTask+0x8c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a09      	ldr	r2, [pc, #36]	; (8001c64 <StartSwitchTask+0x90>)
 8001c40:	6013      	str	r3, [r2, #0]
 8001c42:	e007      	b.n	8001c54 <StartSwitchTask+0x80>
	  else if (flag == 1){sensor=sensor12;}
 8001c44:	4b05      	ldr	r3, [pc, #20]	; (8001c5c <StartSwitchTask+0x88>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d103      	bne.n	8001c54 <StartSwitchTask+0x80>
 8001c4c:	4b06      	ldr	r3, [pc, #24]	; (8001c68 <StartSwitchTask+0x94>)
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a04      	ldr	r2, [pc, #16]	; (8001c64 <StartSwitchTask+0x90>)
 8001c52:	6013      	str	r3, [r2, #0]

    osDelay(1);
 8001c54:	2001      	movs	r0, #1
 8001c56:	f006 fde9 	bl	800882c <osDelay>
	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET){
 8001c5a:	e7bf      	b.n	8001bdc <StartSwitchTask+0x8>
 8001c5c:	20000106 	.word	0x20000106
 8001c60:	20000320 	.word	0x20000320
 8001c64:	2000031c 	.word	0x2000031c
 8001c68:	20000324 	.word	0x20000324

08001c6c <StartTempTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTempTask */
void StartTempTask(void *argument)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af02      	add	r7, sp, #8
 8001c72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTempTask */
  /* Infinite loop */
  for(;;)
  {

	  HAL_I2C_Master_Transmit(&hi2c3, AHT10_Adress,  &AHT10_TmpHum_Cmd, 1,100); // Send command (trigger measuremetns) + parameters
 8001c74:	2364      	movs	r3, #100	; 0x64
 8001c76:	9300      	str	r3, [sp, #0]
 8001c78:	2301      	movs	r3, #1
 8001c7a:	4a40      	ldr	r2, [pc, #256]	; (8001d7c <StartTempTask+0x110>)
 8001c7c:	2170      	movs	r1, #112	; 0x70
 8001c7e:	4840      	ldr	r0, [pc, #256]	; (8001d80 <StartTempTask+0x114>)
 8001c80:	f002 fc3a 	bl	80044f8 <HAL_I2C_Master_Transmit>
	  osDelay(100);
 8001c84:	2064      	movs	r0, #100	; 0x64
 8001c86:	f006 fdd1 	bl	800882c <osDelay>

	  HAL_I2C_Master_Receive(&hi2c3, AHT10_Adress,  (uint8_t*)AHT10_RX_Data, 6,100); // Receive data: STATUS[1]:HIMIDITY[2.5]:TEMPERATURE[2.5]
 8001c8a:	2364      	movs	r3, #100	; 0x64
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	2306      	movs	r3, #6
 8001c90:	4a3c      	ldr	r2, [pc, #240]	; (8001d84 <StartTempTask+0x118>)
 8001c92:	2170      	movs	r1, #112	; 0x70
 8001c94:	483a      	ldr	r0, [pc, #232]	; (8001d80 <StartTempTask+0x114>)
 8001c96:	f002 fd23 	bl	80046e0 <HAL_I2C_Master_Receive>


	  AHT10_ADC_Raw = (((uint32_t)AHT10_RX_Data[3] & 15) << 16) | ((uint32_t)AHT10_RX_Data[4] << 8) | AHT10_RX_Data[5];
 8001c9a:	4b3a      	ldr	r3, [pc, #232]	; (8001d84 <StartTempTask+0x118>)
 8001c9c:	78db      	ldrb	r3, [r3, #3]
 8001c9e:	041b      	lsls	r3, r3, #16
 8001ca0:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001ca4:	4b37      	ldr	r3, [pc, #220]	; (8001d84 <StartTempTask+0x118>)
 8001ca6:	791b      	ldrb	r3, [r3, #4]
 8001ca8:	021b      	lsls	r3, r3, #8
 8001caa:	4313      	orrs	r3, r2
 8001cac:	4a35      	ldr	r2, [pc, #212]	; (8001d84 <StartTempTask+0x118>)
 8001cae:	7952      	ldrb	r2, [r2, #5]
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	4a35      	ldr	r2, [pc, #212]	; (8001d88 <StartTempTask+0x11c>)
 8001cb4:	6013      	str	r3, [r2, #0]
	  AHT10_Temperature = (float)(AHT10_ADC_Raw * 200.00 / 1048576.00) - 50.00;
 8001cb6:	4b34      	ldr	r3, [pc, #208]	; (8001d88 <StartTempTask+0x11c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7fe fc22 	bl	8000504 <__aeabi_ui2d>
 8001cc0:	f04f 0200 	mov.w	r2, #0
 8001cc4:	4b31      	ldr	r3, [pc, #196]	; (8001d8c <StartTempTask+0x120>)
 8001cc6:	f7fe fc97 	bl	80005f8 <__aeabi_dmul>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	460b      	mov	r3, r1
 8001cce:	4610      	mov	r0, r2
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	f04f 0200 	mov.w	r2, #0
 8001cd6:	4b2e      	ldr	r3, [pc, #184]	; (8001d90 <StartTempTask+0x124>)
 8001cd8:	f7fe fdb8 	bl	800084c <__aeabi_ddiv>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	460b      	mov	r3, r1
 8001ce0:	4610      	mov	r0, r2
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	f7fe ff80 	bl	8000be8 <__aeabi_d2f>
 8001ce8:	ee07 0a10 	vmov	s14, r0
 8001cec:	eddf 7a29 	vldr	s15, [pc, #164]	; 8001d94 <StartTempTask+0x128>
 8001cf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cf4:	4b28      	ldr	r3, [pc, #160]	; (8001d98 <StartTempTask+0x12c>)
 8001cf6:	edc3 7a00 	vstr	s15, [r3]

	  AHT10_ADC_Raw = ((uint32_t)AHT10_RX_Data[1] << 12) | ((uint32_t)AHT10_RX_Data[2] << 4) | (AHT10_RX_Data[3] >> 4);
 8001cfa:	4b22      	ldr	r3, [pc, #136]	; (8001d84 <StartTempTask+0x118>)
 8001cfc:	785b      	ldrb	r3, [r3, #1]
 8001cfe:	031a      	lsls	r2, r3, #12
 8001d00:	4b20      	ldr	r3, [pc, #128]	; (8001d84 <StartTempTask+0x118>)
 8001d02:	789b      	ldrb	r3, [r3, #2]
 8001d04:	011b      	lsls	r3, r3, #4
 8001d06:	4313      	orrs	r3, r2
 8001d08:	4a1e      	ldr	r2, [pc, #120]	; (8001d84 <StartTempTask+0x118>)
 8001d0a:	78d2      	ldrb	r2, [r2, #3]
 8001d0c:	0912      	lsrs	r2, r2, #4
 8001d0e:	b2d2      	uxtb	r2, r2
 8001d10:	4313      	orrs	r3, r2
 8001d12:	4a1d      	ldr	r2, [pc, #116]	; (8001d88 <StartTempTask+0x11c>)
 8001d14:	6013      	str	r3, [r2, #0]
	  AHT10_Humidity = (float)(AHT10_ADC_Raw*100.00/1048576.00);
 8001d16:	4b1c      	ldr	r3, [pc, #112]	; (8001d88 <StartTempTask+0x11c>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f7fe fbf2 	bl	8000504 <__aeabi_ui2d>
 8001d20:	f04f 0200 	mov.w	r2, #0
 8001d24:	4b1d      	ldr	r3, [pc, #116]	; (8001d9c <StartTempTask+0x130>)
 8001d26:	f7fe fc67 	bl	80005f8 <__aeabi_dmul>
 8001d2a:	4602      	mov	r2, r0
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	4610      	mov	r0, r2
 8001d30:	4619      	mov	r1, r3
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	4b16      	ldr	r3, [pc, #88]	; (8001d90 <StartTempTask+0x124>)
 8001d38:	f7fe fd88 	bl	800084c <__aeabi_ddiv>
 8001d3c:	4602      	mov	r2, r0
 8001d3e:	460b      	mov	r3, r1
 8001d40:	4610      	mov	r0, r2
 8001d42:	4619      	mov	r1, r3
 8001d44:	f7fe ff50 	bl	8000be8 <__aeabi_d2f>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	4a15      	ldr	r2, [pc, #84]	; (8001da0 <StartTempTask+0x134>)
 8001d4c:	6013      	str	r3, [r2, #0]

	  sensor11=(int)AHT10_Temperature;
 8001d4e:	4b12      	ldr	r3, [pc, #72]	; (8001d98 <StartTempTask+0x12c>)
 8001d50:	edd3 7a00 	vldr	s15, [r3]
 8001d54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d58:	ee17 2a90 	vmov	r2, s15
 8001d5c:	4b11      	ldr	r3, [pc, #68]	; (8001da4 <StartTempTask+0x138>)
 8001d5e:	601a      	str	r2, [r3, #0]
	  sensor12=(int)AHT10_Humidity;
 8001d60:	4b0f      	ldr	r3, [pc, #60]	; (8001da0 <StartTempTask+0x134>)
 8001d62:	edd3 7a00 	vldr	s15, [r3]
 8001d66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d6a:	ee17 2a90 	vmov	r2, s15
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <StartTempTask+0x13c>)
 8001d70:	601a      	str	r2, [r3, #0]
	  osDelay(2000);
 8001d72:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d76:	f006 fd59 	bl	800882c <osDelay>
	  HAL_I2C_Master_Transmit(&hi2c3, AHT10_Adress,  &AHT10_TmpHum_Cmd, 1,100); // Send command (trigger measuremetns) + parameters
 8001d7a:	e77b      	b.n	8001c74 <StartTempTask+0x8>
 8001d7c:	20000108 	.word	0x20000108
 8001d80:	20002884 	.word	0x20002884
 8001d84:	200028d8 	.word	0x200028d8
 8001d88:	200029c4 	.word	0x200029c4
 8001d8c:	40690000 	.word	0x40690000
 8001d90:	41300000 	.word	0x41300000
 8001d94:	42480000 	.word	0x42480000
 8001d98:	20000328 	.word	0x20000328
 8001d9c:	40590000 	.word	0x40590000
 8001da0:	200029b0 	.word	0x200029b0
 8001da4:	20000320 	.word	0x20000320
 8001da8:	20000324 	.word	0x20000324

08001dac <StartUartTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartUartTask */
void StartUartTask(void *argument)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b0cc      	sub	sp, #304	; 0x130
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	1d3b      	adds	r3, r7, #4
 8001db4:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN StartUartTask */
		uint8_t accepted[] = "accepted\n" ;
 8001db6:	4ab6      	ldr	r2, [pc, #728]	; (8002090 <StartUartTask+0x2e4>)
 8001db8:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8001dbc:	ca07      	ldmia	r2, {r0, r1, r2}
 8001dbe:	c303      	stmia	r3!, {r0, r1}
 8001dc0:	801a      	strh	r2, [r3, #0]
		uint8_t error[] = "error\n" ;
 8001dc2:	4ab4      	ldr	r2, [pc, #720]	; (8002094 <StartUartTask+0x2e8>)
 8001dc4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001dc8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001dcc:	6018      	str	r0, [r3, #0]
 8001dce:	3304      	adds	r3, #4
 8001dd0:	8019      	strh	r1, [r3, #0]
 8001dd2:	3302      	adds	r3, #2
 8001dd4:	0c0a      	lsrs	r2, r1, #16
 8001dd6:	701a      	strb	r2, [r3, #0]

		uint8_t uartCMD[255] ;
		uint16_t fromQueue ;
		uint8_t index = 0 ;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
		uint8_t ii = 0;
 8001dde:	2300      	movs	r3, #0
 8001de0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
		uint16_t sl = 0;
 8001de4:	2300      	movs	r3, #0
 8001de6:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e
	  /* Infinite loop */
	  for(;;){

	    osDelay(1);
 8001dea:	2001      	movs	r0, #1
 8001dec:	f006 fd1e 	bl	800882c <osDelay>
	    osMessageQueueGet(UartQueueHandle, &fromQueue, 0, osWaitForever);
 8001df0:	4ba9      	ldr	r3, [pc, #676]	; (8002098 <StartUartTask+0x2ec>)
 8001df2:	6818      	ldr	r0, [r3, #0]
 8001df4:	f107 010a 	add.w	r1, r7, #10
 8001df8:	f04f 33ff 	mov.w	r3, #4294967295
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f006 fe03 	bl	8008a08 <osMessageQueueGet>


	    uartCMD[index] = (uint8_t) fromQueue ; index = (index<255? index+1 : 0) ;
 8001e02:	f107 030a 	add.w	r3, r7, #10
 8001e06:	881a      	ldrh	r2, [r3, #0]
 8001e08:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8001e0c:	b2d1      	uxtb	r1, r2
 8001e0e:	f107 020c 	add.w	r2, r7, #12
 8001e12:	54d1      	strb	r1, [r2, r3]
 8001e14:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8001e18:	2bff      	cmp	r3, #255	; 0xff
 8001e1a:	d004      	beq.n	8001e26 <StartUartTask+0x7a>
 8001e1c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8001e20:	3301      	adds	r3, #1
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	e000      	b.n	8001e28 <StartUartTask+0x7c>
 8001e26:	2300      	movs	r3, #0
 8001e28:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

	    if (fromQueue == 0x0A) {
 8001e2c:	f107 030a 	add.w	r3, r7, #10
 8001e30:	881b      	ldrh	r3, [r3, #0]
 8001e32:	2b0a      	cmp	r3, #10
 8001e34:	f040 812a 	bne.w	800208c <StartUartTask+0x2e0>
	    	index = 0 ;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
	        ii = 1;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

	        switch(uartCMD[0]) {
 8001e44:	f107 030c 	add.w	r3, r7, #12
 8001e48:	781b      	ldrb	r3, [r3, #0]
 8001e4a:	2b74      	cmp	r3, #116	; 0x74
 8001e4c:	f000 810e 	beq.w	800206c <StartUartTask+0x2c0>
 8001e50:	2b74      	cmp	r3, #116	; 0x74
 8001e52:	dcca      	bgt.n	8001dea <StartUartTask+0x3e>
 8001e54:	2b73      	cmp	r3, #115	; 0x73
 8001e56:	d03a      	beq.n	8001ece <StartUartTask+0x122>
 8001e58:	2b73      	cmp	r3, #115	; 0x73
 8001e5a:	dcc6      	bgt.n	8001dea <StartUartTask+0x3e>
 8001e5c:	2b33      	cmp	r3, #51	; 0x33
 8001e5e:	dc0f      	bgt.n	8001e80 <StartUartTask+0xd4>
 8001e60:	2b30      	cmp	r3, #48	; 0x30
 8001e62:	dbc2      	blt.n	8001dea <StartUartTask+0x3e>
 8001e64:	3b30      	subs	r3, #48	; 0x30
 8001e66:	2b03      	cmp	r3, #3
 8001e68:	d8bf      	bhi.n	8001dea <StartUartTask+0x3e>
 8001e6a:	a201      	add	r2, pc, #4	; (adr r2, 8001e70 <StartUartTask+0xc4>)
 8001e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e70:	08001e87 	.word	0x08001e87
 8001e74:	08001e99 	.word	0x08001e99
 8001e78:	08001eab 	.word	0x08001eab
 8001e7c:	08001ebd 	.word	0x08001ebd
 8001e80:	2b67      	cmp	r3, #103	; 0x67
 8001e82:	d076      	beq.n	8001f72 <StartUartTask+0x1c6>
 8001e84:	e103      	b.n	800208e <StartUartTask+0x2e2>

	        	case '0' :

	        		flag = 0;
 8001e86:	4b85      	ldr	r3, [pc, #532]	; (800209c <StartUartTask+0x2f0>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	701a      	strb	r2, [r3, #0]
	        		HAL_UART_Transmit_IT(&huart2, "Temperatura\n", sizeof("Temperatura\n"));
 8001e8c:	220d      	movs	r2, #13
 8001e8e:	4984      	ldr	r1, [pc, #528]	; (80020a0 <StartUartTask+0x2f4>)
 8001e90:	4884      	ldr	r0, [pc, #528]	; (80020a4 <StartUartTask+0x2f8>)
 8001e92:	f005 f897 	bl	8006fc4 <HAL_UART_Transmit_IT>
	        		break;
 8001e96:	e0fa      	b.n	800208e <StartUartTask+0x2e2>

	        	case '1' :

	        		flag = 1;
 8001e98:	4b80      	ldr	r3, [pc, #512]	; (800209c <StartUartTask+0x2f0>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	701a      	strb	r2, [r3, #0]
	        		HAL_UART_Transmit_IT(&huart2, "Wilgotnosc\n", sizeof("Wilgotnosc\n"));
 8001e9e:	220c      	movs	r2, #12
 8001ea0:	4981      	ldr	r1, [pc, #516]	; (80020a8 <StartUartTask+0x2fc>)
 8001ea2:	4880      	ldr	r0, [pc, #512]	; (80020a4 <StartUartTask+0x2f8>)
 8001ea4:	f005 f88e 	bl	8006fc4 <HAL_UART_Transmit_IT>
	        		break;
 8001ea8:	e0f1      	b.n	800208e <StartUartTask+0x2e2>

	        	case '2':

	        		flag = 2;
 8001eaa:	4b7c      	ldr	r3, [pc, #496]	; (800209c <StartUartTask+0x2f0>)
 8001eac:	2202      	movs	r2, #2
 8001eae:	701a      	strb	r2, [r3, #0]
	        		HAL_UART_Transmit_IT(&huart2, "GFX\n", sizeof("GFX\n"));
 8001eb0:	2205      	movs	r2, #5
 8001eb2:	497e      	ldr	r1, [pc, #504]	; (80020ac <StartUartTask+0x300>)
 8001eb4:	487b      	ldr	r0, [pc, #492]	; (80020a4 <StartUartTask+0x2f8>)
 8001eb6:	f005 f885 	bl	8006fc4 <HAL_UART_Transmit_IT>
	        		break;
 8001eba:	e0e8      	b.n	800208e <StartUartTask+0x2e2>

	        	case '3':

	        		flag = 3;
 8001ebc:	4b77      	ldr	r3, [pc, #476]	; (800209c <StartUartTask+0x2f0>)
 8001ebe:	2203      	movs	r2, #3
 8001ec0:	701a      	strb	r2, [r3, #0]
	        		HAL_UART_Transmit_IT(&huart2, "Text\n", sizeof("Text\n"));
 8001ec2:	2206      	movs	r2, #6
 8001ec4:	497a      	ldr	r1, [pc, #488]	; (80020b0 <StartUartTask+0x304>)
 8001ec6:	4877      	ldr	r0, [pc, #476]	; (80020a4 <StartUartTask+0x2f8>)
 8001ec8:	f005 f87c 	bl	8006fc4 <HAL_UART_Transmit_IT>
	        		break;
 8001ecc:	e0df      	b.n	800208e <StartUartTask+0x2e2>

	        	case 's':


        				for(int j = 0 ; j < 4 ; j++){
 8001ece:	2300      	movs	r3, #0
 8001ed0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001ed4:	e02b      	b.n	8001f2e <StartUartTask+0x182>

        					if (uartCMD[j] <= 0x39){
 8001ed6:	f107 020c 	add.w	r2, r7, #12
 8001eda:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001ede:	4413      	add	r3, r2
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	2b39      	cmp	r3, #57	; 0x39
 8001ee4:	d80f      	bhi.n	8001f06 <StartUartTask+0x15a>
        						uartCMD[j] = uartCMD[j] - 0x30;  // 1 - 9
 8001ee6:	f107 020c 	add.w	r2, r7, #12
 8001eea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001eee:	4413      	add	r3, r2
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	3b30      	subs	r3, #48	; 0x30
 8001ef4:	b2d9      	uxtb	r1, r3
 8001ef6:	f107 020c 	add.w	r2, r7, #12
 8001efa:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001efe:	4413      	add	r3, r2
 8001f00:	460a      	mov	r2, r1
 8001f02:	701a      	strb	r2, [r3, #0]
 8001f04:	e00e      	b.n	8001f24 <StartUartTask+0x178>
        					}
        					else{
        						uartCMD[j] = uartCMD[j] - 0x37;  //preserve A - F
 8001f06:	f107 020c 	add.w	r2, r7, #12
 8001f0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001f0e:	4413      	add	r3, r2
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	3b37      	subs	r3, #55	; 0x37
 8001f14:	b2d9      	uxtb	r1, r3
 8001f16:	f107 020c 	add.w	r2, r7, #12
 8001f1a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001f1e:	4413      	add	r3, r2
 8001f20:	460a      	mov	r2, r1
 8001f22:	701a      	strb	r2, [r3, #0]
        				for(int j = 0 ; j < 4 ; j++){
 8001f24:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001f28:	3301      	adds	r3, #1
 8001f2a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001f2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8001f32:	2b03      	cmp	r3, #3
 8001f34:	ddcf      	ble.n	8001ed6 <StartUartTask+0x12a>
        					}

        				}
        				sl = uartCMD[1] << 8 | uartCMD[2] << 4 | uartCMD[3] ;
 8001f36:	f107 030c 	add.w	r3, r7, #12
 8001f3a:	785b      	ldrb	r3, [r3, #1]
 8001f3c:	021b      	lsls	r3, r3, #8
 8001f3e:	b21a      	sxth	r2, r3
 8001f40:	f107 030c 	add.w	r3, r7, #12
 8001f44:	789b      	ldrb	r3, [r3, #2]
 8001f46:	011b      	lsls	r3, r3, #4
 8001f48:	b21b      	sxth	r3, r3
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	b21a      	sxth	r2, r3
 8001f4e:	f107 030c 	add.w	r3, r7, #12
 8001f52:	78db      	ldrb	r3, [r3, #3]
 8001f54:	b21b      	sxth	r3, r3
 8001f56:	4313      	orrs	r3, r2
 8001f58:	b21b      	sxth	r3, r3
 8001f5a:	f8a7 311e 	strh.w	r3, [r7, #286]	; 0x11e

        				HAL_UART_Transmit_IT(&huart2, "Slide\n", sizeof("Slide\n"));
 8001f5e:	2207      	movs	r2, #7
 8001f60:	4954      	ldr	r1, [pc, #336]	; (80020b4 <StartUartTask+0x308>)
 8001f62:	4850      	ldr	r0, [pc, #320]	; (80020a4 <StartUartTask+0x2f8>)
 8001f64:	f005 f82e 	bl	8006fc4 <HAL_UART_Transmit_IT>
        				del = sl;
 8001f68:	4a53      	ldr	r2, [pc, #332]	; (80020b8 <StartUartTask+0x30c>)
 8001f6a:	f8b7 311e 	ldrh.w	r3, [r7, #286]	; 0x11e
 8001f6e:	8013      	strh	r3, [r2, #0]
	        		break;
 8001f70:	e08d      	b.n	800208e <StartUartTask+0x2e2>

	        	case 'g':

	        		if (uartCMD[49] == '#'){
 8001f72:	f107 030c 	add.w	r3, r7, #12
 8001f76:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8001f7a:	2b23      	cmp	r3, #35	; 0x23
 8001f7c:	d16e      	bne.n	800205c <StartUartTask+0x2b0>

	        			for (int i = 1; i < 17; i++){
 8001f7e:	2301      	movs	r3, #1
 8001f80:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001f84:	e05b      	b.n	800203e <StartUartTask+0x292>
	        				for(int j = 0 ; j < 2 ; j++){
 8001f86:	2300      	movs	r3, #0
 8001f88:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001f8c:	e033      	b.n	8001ff6 <StartUartTask+0x24a>

	        					if (uartCMD[ii+j] <= 0x39){
 8001f8e:	f897 212e 	ldrb.w	r2, [r7, #302]	; 0x12e
 8001f92:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001f96:	4413      	add	r3, r2
 8001f98:	f107 020c 	add.w	r2, r7, #12
 8001f9c:	5cd3      	ldrb	r3, [r2, r3]
 8001f9e:	2b39      	cmp	r3, #57	; 0x39
 8001fa0:	d812      	bhi.n	8001fc8 <StartUartTask+0x21c>
	        						uartCMD[ii+j] = uartCMD[ii+j] - 0x30;  //preserve: 1 - 9
 8001fa2:	f897 212e 	ldrb.w	r2, [r7, #302]	; 0x12e
 8001fa6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001faa:	4413      	add	r3, r2
 8001fac:	f107 020c 	add.w	r2, r7, #12
 8001fb0:	5cd2      	ldrb	r2, [r2, r3]
 8001fb2:	f897 112e 	ldrb.w	r1, [r7, #302]	; 0x12e
 8001fb6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001fba:	440b      	add	r3, r1
 8001fbc:	3a30      	subs	r2, #48	; 0x30
 8001fbe:	b2d1      	uxtb	r1, r2
 8001fc0:	f107 020c 	add.w	r2, r7, #12
 8001fc4:	54d1      	strb	r1, [r2, r3]
 8001fc6:	e011      	b.n	8001fec <StartUartTask+0x240>
	        					}
	        					else{
	        						uartCMD[ii+j] = uartCMD[ii+j] - 0x37;  //preserve A - F
 8001fc8:	f897 212e 	ldrb.w	r2, [r7, #302]	; 0x12e
 8001fcc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001fd0:	4413      	add	r3, r2
 8001fd2:	f107 020c 	add.w	r2, r7, #12
 8001fd6:	5cd2      	ldrb	r2, [r2, r3]
 8001fd8:	f897 112e 	ldrb.w	r1, [r7, #302]	; 0x12e
 8001fdc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001fe0:	440b      	add	r3, r1
 8001fe2:	3a37      	subs	r2, #55	; 0x37
 8001fe4:	b2d1      	uxtb	r1, r2
 8001fe6:	f107 020c 	add.w	r2, r7, #12
 8001fea:	54d1      	strb	r1, [r2, r3]
	        				for(int j = 0 ; j < 2 ; j++){
 8001fec:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001ff6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	ddc7      	ble.n	8001f8e <StartUartTask+0x1e2>
	        					}

	        				}

	        				img[i-1] =  uartCMD[ii] << 4 | uartCMD[ii+1]  ;
 8001ffe:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8002002:	f107 020c 	add.w	r2, r7, #12
 8002006:	5cd3      	ldrb	r3, [r2, r3]
 8002008:	011b      	lsls	r3, r3, #4
 800200a:	b25a      	sxtb	r2, r3
 800200c:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 8002010:	3301      	adds	r3, #1
 8002012:	f107 010c 	add.w	r1, r7, #12
 8002016:	5ccb      	ldrb	r3, [r1, r3]
 8002018:	b25b      	sxtb	r3, r3
 800201a:	4313      	orrs	r3, r2
 800201c:	b25a      	sxtb	r2, r3
 800201e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002022:	3b01      	subs	r3, #1
 8002024:	b2d1      	uxtb	r1, r2
 8002026:	4a25      	ldr	r2, [pc, #148]	; (80020bc <StartUartTask+0x310>)
 8002028:	54d1      	strb	r1, [r2, r3]
	        				ii += 3;
 800202a:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 800202e:	3303      	adds	r3, #3
 8002030:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
	        			for (int i = 1; i < 17; i++){
 8002034:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002038:	3301      	adds	r3, #1
 800203a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800203e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002042:	2b10      	cmp	r3, #16
 8002044:	dd9f      	ble.n	8001f86 <StartUartTask+0x1da>

	        			}

	        			HAL_UART_Transmit_IT(&huart2, accepted, sizeof(accepted));
 8002046:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800204a:	220a      	movs	r2, #10
 800204c:	4619      	mov	r1, r3
 800204e:	4815      	ldr	r0, [pc, #84]	; (80020a4 <StartUartTask+0x2f8>)
 8002050:	f004 ffb8 	bl	8006fc4 <HAL_UART_Transmit_IT>
	        			flag = 2;
 8002054:	4b11      	ldr	r3, [pc, #68]	; (800209c <StartUartTask+0x2f0>)
 8002056:	2202      	movs	r2, #2
 8002058:	701a      	strb	r2, [r3, #0]
	        		}
	        		else{
	        			HAL_UART_Transmit_IT(&huart2, error, sizeof(error));
	        		}

	        		break ;
 800205a:	e018      	b.n	800208e <StartUartTask+0x2e2>
	        			HAL_UART_Transmit_IT(&huart2, error, sizeof(error));
 800205c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002060:	2207      	movs	r2, #7
 8002062:	4619      	mov	r1, r3
 8002064:	480f      	ldr	r0, [pc, #60]	; (80020a4 <StartUartTask+0x2f8>)
 8002066:	f004 ffad 	bl	8006fc4 <HAL_UART_Transmit_IT>
	        		break ;
 800206a:	e010      	b.n	800208e <StartUartTask+0x2e2>

	        	case 't':

	        		scan(uartCMD);
 800206c:	f107 030c 	add.w	r3, r7, #12
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff f9cb 	bl	800140c <scan>
	        		HAL_UART_Transmit_IT(&huart2, accepted, sizeof(accepted));
 8002076:	f507 738a 	add.w	r3, r7, #276	; 0x114
 800207a:	220a      	movs	r2, #10
 800207c:	4619      	mov	r1, r3
 800207e:	4809      	ldr	r0, [pc, #36]	; (80020a4 <StartUartTask+0x2f8>)
 8002080:	f004 ffa0 	bl	8006fc4 <HAL_UART_Transmit_IT>
	        		flag = 3;
 8002084:	4b05      	ldr	r3, [pc, #20]	; (800209c <StartUartTask+0x2f0>)
 8002086:	2203      	movs	r2, #3
 8002088:	701a      	strb	r2, [r3, #0]

	        		break ;
 800208a:	e000      	b.n	800208e <StartUartTask+0x2e2>
	        	}
	        }
 800208c:	bf00      	nop
	    osDelay(1);
 800208e:	e6ac      	b.n	8001dea <StartUartTask+0x3e>
 8002090:	0800ff6c 	.word	0x0800ff6c
 8002094:	0800ff78 	.word	0x0800ff78
 8002098:	200028e0 	.word	0x200028e0
 800209c:	20000106 	.word	0x20000106
 80020a0:	0800ff38 	.word	0x0800ff38
 80020a4:	200029d4 	.word	0x200029d4
 80020a8:	0800ff48 	.word	0x0800ff48
 80020ac:	0800ff54 	.word	0x0800ff54
 80020b0:	0800ff5c 	.word	0x0800ff5c
 80020b4:	0800ff64 	.word	0x0800ff64
 80020b8:	20000104 	.word	0x20000104
 80020bc:	2000010c 	.word	0x2000010c

080020c0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a04      	ldr	r2, [pc, #16]	; (80020e0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d101      	bne.n	80020d6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80020d2:	f000 fdcb 	bl	8002c6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80020d6:	bf00      	nop
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40001000 	.word	0x40001000

080020e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020e8:	b672      	cpsid	i
}
 80020ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020ec:	e7fe      	b.n	80020ec <Error_Handler+0x8>
	...

080020f0 <MAX7219_SendToDevice>:
SPI_HandleTypeDef *max7219_spi;
uint8_t Max7219PixelsBuffer[(MAX7219_X_PIXELS * MAX7219_Y_PIXELS) / 8];
uint8_t Max7219SpiBuffer[MAX7219_DEVICES * 2];

MAX7219_STATUS MAX7219_SendToDevice(uint8_t DeviceNumber, uint8_t Register, uint8_t Data)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	4603      	mov	r3, r0
 80020f8:	71fb      	strb	r3, [r7, #7]
 80020fa:	460b      	mov	r3, r1
 80020fc:	71bb      	strb	r3, [r7, #6]
 80020fe:	4613      	mov	r3, r2
 8002100:	717b      	strb	r3, [r7, #5]
	uint8_t Offset = DeviceNumber * 2;
 8002102:	79fb      	ldrb	r3, [r7, #7]
 8002104:	005b      	lsls	r3, r3, #1
 8002106:	73fb      	strb	r3, [r7, #15]

	memset(Max7219SpiBuffer, 0x00, (MAX7219_DEVICES * 2));
 8002108:	2204      	movs	r2, #4
 800210a:	2100      	movs	r1, #0
 800210c:	4815      	ldr	r0, [pc, #84]	; (8002164 <MAX7219_SendToDevice+0x74>)
 800210e:	f009 fb46 	bl	800b79e <memset>
	Max7219SpiBuffer[(MAX7219_DEVICES * 2)-Offset-2] = Register;
 8002112:	7bfb      	ldrb	r3, [r7, #15]
 8002114:	f1c3 0302 	rsb	r3, r3, #2
 8002118:	4912      	ldr	r1, [pc, #72]	; (8002164 <MAX7219_SendToDevice+0x74>)
 800211a:	79ba      	ldrb	r2, [r7, #6]
 800211c:	54ca      	strb	r2, [r1, r3]
	Max7219SpiBuffer[(MAX7219_DEVICES * 2)-Offset-1] = Data;
 800211e:	7bfb      	ldrb	r3, [r7, #15]
 8002120:	f1c3 0303 	rsb	r3, r3, #3
 8002124:	490f      	ldr	r1, [pc, #60]	; (8002164 <MAX7219_SendToDevice+0x74>)
 8002126:	797a      	ldrb	r2, [r7, #5]
 8002128:	54ca      	strb	r2, [r1, r3]

#ifndef SPI_CS_HARDWARE_CONTROL
	HAL_GPIO_WritePin(MAX7219_CS_GPIO_Port, MAX7219_CS_Pin, GPIO_PIN_RESET);
 800212a:	2200      	movs	r2, #0
 800212c:	2110      	movs	r1, #16
 800212e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002132:	f002 f939 	bl	80043a8 <HAL_GPIO_WritePin>
#endif

	if(HAL_OK != HAL_SPI_Transmit(max7219_spi, Max7219SpiBuffer, (MAX7219_DEVICES * 2), 10))
 8002136:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <MAX7219_SendToDevice+0x78>)
 8002138:	6818      	ldr	r0, [r3, #0]
 800213a:	230a      	movs	r3, #10
 800213c:	2204      	movs	r2, #4
 800213e:	4909      	ldr	r1, [pc, #36]	; (8002164 <MAX7219_SendToDevice+0x74>)
 8002140:	f004 f9a0 	bl	8006484 <HAL_SPI_Transmit>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MAX7219_SendToDevice+0x5e>
	{
		return MAX7219_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e006      	b.n	800215c <MAX7219_SendToDevice+0x6c>
	}

#ifndef SPI_CS_HARDWARE_CONTROL
	HAL_GPIO_WritePin(MAX7219_CS_GPIO_Port, MAX7219_CS_Pin, GPIO_PIN_SET);
 800214e:	2201      	movs	r2, #1
 8002150:	2110      	movs	r1, #16
 8002152:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002156:	f002 f927 	bl	80043a8 <HAL_GPIO_WritePin>
#endif

	return MAX7219_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	20002a90 	.word	0x20002a90
 8002168:	20002aa4 	.word	0x20002aa4

0800216c <MAX7219_SetDecodeMode>:

MAX7219_STATUS MAX7219_SetDecodeMode(uint8_t DeviceNumber, MAX7219_DecodeMode DecodeMode)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b082      	sub	sp, #8
 8002170:	af00      	add	r7, sp, #0
 8002172:	4603      	mov	r3, r0
 8002174:	460a      	mov	r2, r1
 8002176:	71fb      	strb	r3, [r7, #7]
 8002178:	4613      	mov	r3, r2
 800217a:	71bb      	strb	r3, [r7, #6]
	if(DeviceNumber >= MAX7219_DEVICES || DecodeMode > 4)
 800217c:	79fb      	ldrb	r3, [r7, #7]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d802      	bhi.n	8002188 <MAX7219_SetDecodeMode+0x1c>
 8002182:	79bb      	ldrb	r3, [r7, #6]
 8002184:	2b04      	cmp	r3, #4
 8002186:	d901      	bls.n	800218c <MAX7219_SetDecodeMode+0x20>
	{
		return MAX7219_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e00b      	b.n	80021a4 <MAX7219_SetDecodeMode+0x38>
	}

	if(MAX7219_OK != MAX7219_SendToDevice(DeviceNumber, MAX7219_DECODE_MODE_REGISTER, DecodeMode))
 800218c:	79ba      	ldrb	r2, [r7, #6]
 800218e:	79fb      	ldrb	r3, [r7, #7]
 8002190:	2109      	movs	r1, #9
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff ffac 	bl	80020f0 <MAX7219_SendToDevice>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MAX7219_SetDecodeMode+0x36>
	{
		return MAX7219_ERROR;
 800219e:	2301      	movs	r3, #1
 80021a0:	e000      	b.n	80021a4 <MAX7219_SetDecodeMode+0x38>
	}

	return MAX7219_OK;
 80021a2:	2300      	movs	r3, #0
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <MAX7219_SetIntensity>:

MAX7219_STATUS MAX7219_SetIntensity(uint8_t DeviceNumber, MAX7219_ScanLimit Intensity)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	4603      	mov	r3, r0
 80021b4:	460a      	mov	r2, r1
 80021b6:	71fb      	strb	r3, [r7, #7]
 80021b8:	4613      	mov	r3, r2
 80021ba:	71bb      	strb	r3, [r7, #6]
	if(DeviceNumber >= MAX7219_DEVICES || Intensity > 16)
 80021bc:	79fb      	ldrb	r3, [r7, #7]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d802      	bhi.n	80021c8 <MAX7219_SetIntensity+0x1c>
 80021c2:	79bb      	ldrb	r3, [r7, #6]
 80021c4:	2b10      	cmp	r3, #16
 80021c6:	d901      	bls.n	80021cc <MAX7219_SetIntensity+0x20>
	{
		return MAX7219_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e00b      	b.n	80021e4 <MAX7219_SetIntensity+0x38>
	}

	if(MAX7219_OK != MAX7219_SendToDevice(DeviceNumber, MAX7219_INTENSITY_REGISTER, Intensity))
 80021cc:	79ba      	ldrb	r2, [r7, #6]
 80021ce:	79fb      	ldrb	r3, [r7, #7]
 80021d0:	210a      	movs	r1, #10
 80021d2:	4618      	mov	r0, r3
 80021d4:	f7ff ff8c 	bl	80020f0 <MAX7219_SendToDevice>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MAX7219_SetIntensity+0x36>
	{
		return MAX7219_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	e000      	b.n	80021e4 <MAX7219_SetIntensity+0x38>
	}

	return MAX7219_OK;
 80021e2:	2300      	movs	r3, #0
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3708      	adds	r7, #8
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <MAX7219_SetScanLimit>:

MAX7219_STATUS MAX7219_SetScanLimit(uint8_t DeviceNumber, uint8_t Limit)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	460a      	mov	r2, r1
 80021f6:	71fb      	strb	r3, [r7, #7]
 80021f8:	4613      	mov	r3, r2
 80021fa:	71bb      	strb	r3, [r7, #6]
	if(DeviceNumber >= MAX7219_DEVICES || Limit > 8)
 80021fc:	79fb      	ldrb	r3, [r7, #7]
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d802      	bhi.n	8002208 <MAX7219_SetScanLimit+0x1c>
 8002202:	79bb      	ldrb	r3, [r7, #6]
 8002204:	2b08      	cmp	r3, #8
 8002206:	d901      	bls.n	800220c <MAX7219_SetScanLimit+0x20>
	{
		return MAX7219_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	e00b      	b.n	8002224 <MAX7219_SetScanLimit+0x38>
	}

	if(MAX7219_OK != MAX7219_SendToDevice(DeviceNumber, MAX7219_SCAN_LIMIT_REGISTER, Limit))
 800220c:	79ba      	ldrb	r2, [r7, #6]
 800220e:	79fb      	ldrb	r3, [r7, #7]
 8002210:	210b      	movs	r1, #11
 8002212:	4618      	mov	r0, r3
 8002214:	f7ff ff6c 	bl	80020f0 <MAX7219_SendToDevice>
 8002218:	4603      	mov	r3, r0
 800221a:	2b00      	cmp	r3, #0
 800221c:	d001      	beq.n	8002222 <MAX7219_SetScanLimit+0x36>
	{
		return MAX7219_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e000      	b.n	8002224 <MAX7219_SetScanLimit+0x38>
	}

	return MAX7219_OK;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	3708      	adds	r7, #8
 8002228:	46bd      	mov	sp, r7
 800222a:	bd80      	pop	{r7, pc}

0800222c <MAX7219_Shutdown>:

MAX7219_STATUS MAX7219_Shutdown(uint8_t DeviceNumber, MAX7219_ShutdownMode Shutdown)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	4603      	mov	r3, r0
 8002234:	460a      	mov	r2, r1
 8002236:	71fb      	strb	r3, [r7, #7]
 8002238:	4613      	mov	r3, r2
 800223a:	71bb      	strb	r3, [r7, #6]
	if(DeviceNumber >= MAX7219_DEVICES)
 800223c:	79fb      	ldrb	r3, [r7, #7]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d901      	bls.n	8002246 <MAX7219_Shutdown+0x1a>
	{
		return MAX7219_ERROR;
 8002242:	2301      	movs	r3, #1
 8002244:	e011      	b.n	800226a <MAX7219_Shutdown+0x3e>
	}

	if(MAX7219_OK != MAX7219_SendToDevice(DeviceNumber, MAX7219_SHUTDOWN_REGISTER, Shutdown?1:0))
 8002246:	79bb      	ldrb	r3, [r7, #6]
 8002248:	2b00      	cmp	r3, #0
 800224a:	bf14      	ite	ne
 800224c:	2301      	movne	r3, #1
 800224e:	2300      	moveq	r3, #0
 8002250:	b2db      	uxtb	r3, r3
 8002252:	461a      	mov	r2, r3
 8002254:	79fb      	ldrb	r3, [r7, #7]
 8002256:	210c      	movs	r1, #12
 8002258:	4618      	mov	r0, r3
 800225a:	f7ff ff49 	bl	80020f0 <MAX7219_SendToDevice>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <MAX7219_Shutdown+0x3c>
	{
		return MAX7219_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e000      	b.n	800226a <MAX7219_Shutdown+0x3e>
	}

	return MAX7219_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3708      	adds	r7, #8
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <MAX7219_SetDisplayTest>:

MAX7219_STATUS MAX7219_SetDisplayTest(uint8_t DeviceNumber, MAX7219_TestMode Enable)
{
 8002272:	b580      	push	{r7, lr}
 8002274:	b082      	sub	sp, #8
 8002276:	af00      	add	r7, sp, #0
 8002278:	4603      	mov	r3, r0
 800227a:	460a      	mov	r2, r1
 800227c:	71fb      	strb	r3, [r7, #7]
 800227e:	4613      	mov	r3, r2
 8002280:	71bb      	strb	r3, [r7, #6]
	if(DeviceNumber >= MAX7219_DEVICES)
 8002282:	79fb      	ldrb	r3, [r7, #7]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d901      	bls.n	800228c <MAX7219_SetDisplayTest+0x1a>
	{
		return MAX7219_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e011      	b.n	80022b0 <MAX7219_SetDisplayTest+0x3e>
	}

	if(MAX7219_OK != MAX7219_SendToDevice(DeviceNumber, MAX7219_DISPLAY_TEST_REGISTER, Enable?1:0))
 800228c:	79bb      	ldrb	r3, [r7, #6]
 800228e:	2b00      	cmp	r3, #0
 8002290:	bf14      	ite	ne
 8002292:	2301      	movne	r3, #1
 8002294:	2300      	moveq	r3, #0
 8002296:	b2db      	uxtb	r3, r3
 8002298:	461a      	mov	r2, r3
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	210f      	movs	r1, #15
 800229e:	4618      	mov	r0, r3
 80022a0:	f7ff ff26 	bl	80020f0 <MAX7219_SendToDevice>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <MAX7219_SetDisplayTest+0x3c>
	{
		return MAX7219_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e000      	b.n	80022b0 <MAX7219_SetDisplayTest+0x3e>
	}

	return MAX7219_OK;
 80022ae:	2300      	movs	r3, #0
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3708      	adds	r7, #8
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <MAX7219_SetPixel>:

MAX7219_STATUS MAX7219_SetPixel(int x, int y, MAX7219_Color Color)
{
 80022b8:	b4b0      	push	{r4, r5, r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	4613      	mov	r3, r2
 80022c4:	71fb      	strb	r3, [r7, #7]
	 if ((x < 0) || (x >= MAX7219_X_PIXELS) || (y < 0) || (y >= MAX7219_Y_PIXELS))
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	db08      	blt.n	80022de <MAX7219_SetPixel+0x26>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2b0f      	cmp	r3, #15
 80022d0:	dc05      	bgt.n	80022de <MAX7219_SetPixel+0x26>
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	db02      	blt.n	80022de <MAX7219_SetPixel+0x26>
 80022d8:	68bb      	ldr	r3, [r7, #8]
 80022da:	2b07      	cmp	r3, #7
 80022dc:	dd01      	ble.n	80022e2 <MAX7219_SetPixel+0x2a>
		 return MAX7219_OUT_OF_RANGE;
 80022de:	2303      	movs	r3, #3
 80022e0:	e09c      	b.n	800241c <MAX7219_SetPixel+0x164>

	 switch(Color)
 80022e2:	79fb      	ldrb	r3, [r7, #7]
 80022e4:	2b02      	cmp	r3, #2
 80022e6:	d067      	beq.n	80023b8 <MAX7219_SetPixel+0x100>
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	f300 8094 	bgt.w	8002416 <MAX7219_SetPixel+0x15e>
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d031      	beq.n	8002356 <MAX7219_SetPixel+0x9e>
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	f040 808f 	bne.w	8002416 <MAX7219_SetPixel+0x15e>
#if(MAX7219_MODULE_TYPE == 0)
		 case MAX7219_WHITE:   Max7219PixelsBuffer[(x/8) + (y*MAX7219_COLUMNS)] |=  (0x80 >> (x&7)); break;
		 case MAX7219_BLACK:   Max7219PixelsBuffer[(x/8) + (y*MAX7219_COLUMNS)] &= ~(0x80 >> (x&7)); break;
		 case MAX7219_INVERSE: Max7219PixelsBuffer[(x/8) + (y*MAX7219_COLUMNS)] ^=  (0x80 >> (x&7)); break;
#elif(MAX7219_MODULE_TYPE == 1)
		 case MAX7219_WHITE:   Max7219PixelsBuffer[(x/8) + ((MAX7219_PIXELS_PER_DEVICE_ROW-1) - ((y%8)) + ((y/8)*MAX7219_PIXELS_PER_DEVICE_ROW))*MAX7219_COLUMNS] |=  (1 << (x&7)); break;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	da00      	bge.n	8002300 <MAX7219_SetPixel+0x48>
 80022fe:	3307      	adds	r3, #7
 8002300:	10db      	asrs	r3, r3, #3
 8002302:	4619      	mov	r1, r3
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	425a      	negs	r2, r3
 8002308:	f003 0307 	and.w	r3, r3, #7
 800230c:	f002 0207 	and.w	r2, r2, #7
 8002310:	bf58      	it	pl
 8002312:	4253      	negpl	r3, r2
 8002314:	f1c3 0407 	rsb	r4, r3, #7
 8002318:	68ba      	ldr	r2, [r7, #8]
 800231a:	2a00      	cmp	r2, #0
 800231c:	da00      	bge.n	8002320 <MAX7219_SetPixel+0x68>
 800231e:	3207      	adds	r2, #7
 8002320:	10d2      	asrs	r2, r2, #3
 8002322:	00d0      	lsls	r0, r2, #3
 8002324:	4420      	add	r0, r4
 8002326:	0040      	lsls	r0, r0, #1
 8002328:	4408      	add	r0, r1
 800232a:	4c3f      	ldr	r4, [pc, #252]	; (8002428 <MAX7219_SetPixel+0x170>)
 800232c:	5c20      	ldrb	r0, [r4, r0]
 800232e:	b244      	sxtb	r4, r0
 8002330:	68f8      	ldr	r0, [r7, #12]
 8002332:	f000 0007 	and.w	r0, r0, #7
 8002336:	2501      	movs	r5, #1
 8002338:	fa05 f000 	lsl.w	r0, r5, r0
 800233c:	b240      	sxtb	r0, r0
 800233e:	4320      	orrs	r0, r4
 8002340:	b244      	sxtb	r4, r0
 8002342:	f1c3 0007 	rsb	r0, r3, #7
 8002346:	00d3      	lsls	r3, r2, #3
 8002348:	4403      	add	r3, r0
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	440b      	add	r3, r1
 800234e:	b2e1      	uxtb	r1, r4
 8002350:	4a35      	ldr	r2, [pc, #212]	; (8002428 <MAX7219_SetPixel+0x170>)
 8002352:	54d1      	strb	r1, [r2, r3]
 8002354:	e061      	b.n	800241a <MAX7219_SetPixel+0x162>
		 case MAX7219_BLACK:   Max7219PixelsBuffer[(x/8) + ((MAX7219_PIXELS_PER_DEVICE_ROW-1) - ((y%8)) + ((y/8)*MAX7219_PIXELS_PER_DEVICE_ROW))*MAX7219_COLUMNS] &= ~(1 << (x&7)); break;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2b00      	cmp	r3, #0
 800235a:	da00      	bge.n	800235e <MAX7219_SetPixel+0xa6>
 800235c:	3307      	adds	r3, #7
 800235e:	10db      	asrs	r3, r3, #3
 8002360:	4619      	mov	r1, r3
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	425a      	negs	r2, r3
 8002366:	f003 0307 	and.w	r3, r3, #7
 800236a:	f002 0207 	and.w	r2, r2, #7
 800236e:	bf58      	it	pl
 8002370:	4253      	negpl	r3, r2
 8002372:	f1c3 0407 	rsb	r4, r3, #7
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	2a00      	cmp	r2, #0
 800237a:	da00      	bge.n	800237e <MAX7219_SetPixel+0xc6>
 800237c:	3207      	adds	r2, #7
 800237e:	10d2      	asrs	r2, r2, #3
 8002380:	00d0      	lsls	r0, r2, #3
 8002382:	4420      	add	r0, r4
 8002384:	0040      	lsls	r0, r0, #1
 8002386:	4408      	add	r0, r1
 8002388:	4c27      	ldr	r4, [pc, #156]	; (8002428 <MAX7219_SetPixel+0x170>)
 800238a:	5c20      	ldrb	r0, [r4, r0]
 800238c:	b244      	sxtb	r4, r0
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f000 0007 	and.w	r0, r0, #7
 8002394:	2501      	movs	r5, #1
 8002396:	fa05 f000 	lsl.w	r0, r5, r0
 800239a:	b240      	sxtb	r0, r0
 800239c:	43c0      	mvns	r0, r0
 800239e:	b240      	sxtb	r0, r0
 80023a0:	4020      	ands	r0, r4
 80023a2:	b244      	sxtb	r4, r0
 80023a4:	f1c3 0007 	rsb	r0, r3, #7
 80023a8:	00d3      	lsls	r3, r2, #3
 80023aa:	4403      	add	r3, r0
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	440b      	add	r3, r1
 80023b0:	b2e1      	uxtb	r1, r4
 80023b2:	4a1d      	ldr	r2, [pc, #116]	; (8002428 <MAX7219_SetPixel+0x170>)
 80023b4:	54d1      	strb	r1, [r2, r3]
 80023b6:	e030      	b.n	800241a <MAX7219_SetPixel+0x162>
		 case MAX7219_INVERSE: Max7219PixelsBuffer[(x/8) + ((MAX7219_PIXELS_PER_DEVICE_ROW-1) - ((y%8)) + ((y/8)*MAX7219_PIXELS_PER_DEVICE_ROW))*MAX7219_COLUMNS] ^=  (1 << (x&7)); break;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	da00      	bge.n	80023c0 <MAX7219_SetPixel+0x108>
 80023be:	3307      	adds	r3, #7
 80023c0:	10db      	asrs	r3, r3, #3
 80023c2:	4619      	mov	r1, r3
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	425a      	negs	r2, r3
 80023c8:	f003 0307 	and.w	r3, r3, #7
 80023cc:	f002 0207 	and.w	r2, r2, #7
 80023d0:	bf58      	it	pl
 80023d2:	4253      	negpl	r3, r2
 80023d4:	f1c3 0407 	rsb	r4, r3, #7
 80023d8:	68ba      	ldr	r2, [r7, #8]
 80023da:	2a00      	cmp	r2, #0
 80023dc:	da00      	bge.n	80023e0 <MAX7219_SetPixel+0x128>
 80023de:	3207      	adds	r2, #7
 80023e0:	10d2      	asrs	r2, r2, #3
 80023e2:	00d0      	lsls	r0, r2, #3
 80023e4:	4420      	add	r0, r4
 80023e6:	0040      	lsls	r0, r0, #1
 80023e8:	4408      	add	r0, r1
 80023ea:	4c0f      	ldr	r4, [pc, #60]	; (8002428 <MAX7219_SetPixel+0x170>)
 80023ec:	5c20      	ldrb	r0, [r4, r0]
 80023ee:	b244      	sxtb	r4, r0
 80023f0:	68f8      	ldr	r0, [r7, #12]
 80023f2:	f000 0007 	and.w	r0, r0, #7
 80023f6:	2501      	movs	r5, #1
 80023f8:	fa05 f000 	lsl.w	r0, r5, r0
 80023fc:	b240      	sxtb	r0, r0
 80023fe:	4060      	eors	r0, r4
 8002400:	b244      	sxtb	r4, r0
 8002402:	f1c3 0007 	rsb	r0, r3, #7
 8002406:	00d3      	lsls	r3, r2, #3
 8002408:	4403      	add	r3, r0
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	440b      	add	r3, r1
 800240e:	b2e1      	uxtb	r1, r4
 8002410:	4a05      	ldr	r2, [pc, #20]	; (8002428 <MAX7219_SetPixel+0x170>)
 8002412:	54d1      	strb	r1, [r2, r3]
 8002414:	e001      	b.n	800241a <MAX7219_SetPixel+0x162>
#endif
		 default: return MAX7219_ERROR;
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <MAX7219_SetPixel+0x164>
	 }

	return MAX7219_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	bcb0      	pop	{r4, r5, r7}
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	20002a94 	.word	0x20002a94

0800242c <MAX7219_Clear>:

MAX7219_STATUS MAX7219_Clear(MAX7219_Color Color)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b082      	sub	sp, #8
 8002430:	af00      	add	r7, sp, #0
 8002432:	4603      	mov	r3, r0
 8002434:	71fb      	strb	r3, [r7, #7]
	switch (Color)
 8002436:	79fb      	ldrb	r3, [r7, #7]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d007      	beq.n	800244c <MAX7219_Clear+0x20>
 800243c:	2b01      	cmp	r3, #1
 800243e:	d10b      	bne.n	8002458 <MAX7219_Clear+0x2c>
	{
		case MAX7219_WHITE:
			memset(Max7219PixelsBuffer, 0xFF, (MAX7219_Y_PIXELS * MAX7219_X_PIXELS / 8));
 8002440:	2210      	movs	r2, #16
 8002442:	21ff      	movs	r1, #255	; 0xff
 8002444:	4808      	ldr	r0, [pc, #32]	; (8002468 <MAX7219_Clear+0x3c>)
 8002446:	f009 f9aa 	bl	800b79e <memset>
			break;
 800244a:	e007      	b.n	800245c <MAX7219_Clear+0x30>
		case MAX7219_BLACK:
			memset(Max7219PixelsBuffer, 0x00, (MAX7219_Y_PIXELS * MAX7219_X_PIXELS / 8));
 800244c:	2210      	movs	r2, #16
 800244e:	2100      	movs	r1, #0
 8002450:	4805      	ldr	r0, [pc, #20]	; (8002468 <MAX7219_Clear+0x3c>)
 8002452:	f009 f9a4 	bl	800b79e <memset>
			break;
 8002456:	e001      	b.n	800245c <MAX7219_Clear+0x30>
		default:
			return MAX7219_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e000      	b.n	800245e <MAX7219_Clear+0x32>
	}
	return MAX7219_OK;
 800245c:	2300      	movs	r3, #0
}
 800245e:	4618      	mov	r0, r3
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20002a94 	.word	0x20002a94

0800246c <MAX7219_Display>:

MAX7219_STATUS MAX7219_Display(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b084      	sub	sp, #16
 8002470:	af00      	add	r7, sp, #0
	uint32_t i, j, k;

	for(i = 0; i < 8; i++)
 8002472:	2300      	movs	r3, #0
 8002474:	60fb      	str	r3, [r7, #12]
 8002476:	e04d      	b.n	8002514 <MAX7219_Display+0xa8>
	{
		for(j = 0; j < MAX7219_ROWS; j++)
 8002478:	2300      	movs	r3, #0
 800247a:	60bb      	str	r3, [r7, #8]
 800247c:	e02c      	b.n	80024d8 <MAX7219_Display+0x6c>
		{
			for(k = 0; k < MAX7219_COLUMNS; k++)
 800247e:	2300      	movs	r3, #0
 8002480:	607b      	str	r3, [r7, #4]
 8002482:	e023      	b.n	80024cc <MAX7219_Display+0x60>
			{
				Max7219SpiBuffer[(MAX7219_DEVICES * 2) - (2 * (k + (j * MAX7219_COLUMNS)) ) - 2] = MAX7219_DIGIT0_REGISTER + i;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	b2da      	uxtb	r2, r3
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	0059      	lsls	r1, r3, #1
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	440b      	add	r3, r1
 8002490:	f1c3 4300 	rsb	r3, r3, #2147483648	; 0x80000000
 8002494:	3301      	adds	r3, #1
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	3201      	adds	r2, #1
 800249a:	b2d1      	uxtb	r1, r2
 800249c:	4a21      	ldr	r2, [pc, #132]	; (8002524 <MAX7219_Display+0xb8>)
 800249e:	54d1      	strb	r1, [r2, r3]
				Max7219SpiBuffer[(MAX7219_DEVICES * 2) - (2 * (k + (j * MAX7219_COLUMNS)) ) - 1] = Max7219PixelsBuffer[k + (j * MAX7219_COLUMNS * 8) + (i * MAX7219_COLUMNS)];
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	00da      	lsls	r2, r3, #3
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4413      	add	r3, r2
 80024a8:	005a      	lsls	r2, r3, #1
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	441a      	add	r2, r3
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	0059      	lsls	r1, r3, #1
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	440b      	add	r3, r1
 80024b6:	f1c3 0302 	rsb	r3, r3, #2
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	3b01      	subs	r3, #1
 80024be:	491a      	ldr	r1, [pc, #104]	; (8002528 <MAX7219_Display+0xbc>)
 80024c0:	5c89      	ldrb	r1, [r1, r2]
 80024c2:	4a18      	ldr	r2, [pc, #96]	; (8002524 <MAX7219_Display+0xb8>)
 80024c4:	54d1      	strb	r1, [r2, r3]
			for(k = 0; k < MAX7219_COLUMNS; k++)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	3301      	adds	r3, #1
 80024ca:	607b      	str	r3, [r7, #4]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d9d8      	bls.n	8002484 <MAX7219_Display+0x18>
		for(j = 0; j < MAX7219_ROWS; j++)
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	3301      	adds	r3, #1
 80024d6:	60bb      	str	r3, [r7, #8]
 80024d8:	68bb      	ldr	r3, [r7, #8]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d0cf      	beq.n	800247e <MAX7219_Display+0x12>
			}
		}

	#ifndef SPI_CS_HARDWARE_CONTROL
		HAL_GPIO_WritePin(MAX7219_CS_GPIO_Port, MAX7219_CS_Pin, GPIO_PIN_RESET);
 80024de:	2200      	movs	r2, #0
 80024e0:	2110      	movs	r1, #16
 80024e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024e6:	f001 ff5f 	bl	80043a8 <HAL_GPIO_WritePin>
	#endif

		if(HAL_OK != HAL_SPI_Transmit(max7219_spi, Max7219SpiBuffer, (MAX7219_DEVICES * 2), 10))
 80024ea:	4b10      	ldr	r3, [pc, #64]	; (800252c <MAX7219_Display+0xc0>)
 80024ec:	6818      	ldr	r0, [r3, #0]
 80024ee:	230a      	movs	r3, #10
 80024f0:	2204      	movs	r2, #4
 80024f2:	490c      	ldr	r1, [pc, #48]	; (8002524 <MAX7219_Display+0xb8>)
 80024f4:	f003 ffc6 	bl	8006484 <HAL_SPI_Transmit>
 80024f8:	4603      	mov	r3, r0
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d001      	beq.n	8002502 <MAX7219_Display+0x96>
		{
			return MAX7219_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	e00c      	b.n	800251c <MAX7219_Display+0xb0>
		}

	#ifndef SPI_CS_HARDWARE_CONTROL
		HAL_GPIO_WritePin(MAX7219_CS_GPIO_Port, MAX7219_CS_Pin, GPIO_PIN_SET);
 8002502:	2201      	movs	r2, #1
 8002504:	2110      	movs	r1, #16
 8002506:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800250a:	f001 ff4d 	bl	80043a8 <HAL_GPIO_WritePin>
	for(i = 0; i < 8; i++)
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	3301      	adds	r3, #1
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2b07      	cmp	r3, #7
 8002518:	d9ae      	bls.n	8002478 <MAX7219_Display+0xc>
	#endif
	}

	return MAX7219_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3710      	adds	r7, #16
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	20002a90 	.word	0x20002a90
 8002528:	20002a94 	.word	0x20002a94
 800252c:	20002aa4 	.word	0x20002aa4

08002530 <MAX7219_Init>:


MAX7219_STATUS MAX7219_Init(SPI_HandleTypeDef *hspi)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
	uint8_t i;
	max7219_spi = hspi;
 8002538:	4a25      	ldr	r2, [pc, #148]	; (80025d0 <MAX7219_Init+0xa0>)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6013      	str	r3, [r2, #0]

	for(i = 0; i < MAX7219_DEVICES; i++)
 800253e:	2300      	movs	r3, #0
 8002540:	73fb      	strb	r3, [r7, #15]
 8002542:	e03c      	b.n	80025be <MAX7219_Init+0x8e>
	{
		if(MAX7219_OK != MAX7219_SetDecodeMode(i, NoDecode)) return MAX7219_ERROR;
 8002544:	7bfb      	ldrb	r3, [r7, #15]
 8002546:	2100      	movs	r1, #0
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff fe0f 	bl	800216c <MAX7219_SetDecodeMode>
 800254e:	4603      	mov	r3, r0
 8002550:	2b00      	cmp	r3, #0
 8002552:	d001      	beq.n	8002558 <MAX7219_Init+0x28>
 8002554:	2301      	movs	r3, #1
 8002556:	e036      	b.n	80025c6 <MAX7219_Init+0x96>
		if(MAX7219_OK != MAX7219_SetIntensity(i, 1)) return MAX7219_ERROR;
 8002558:	7bfb      	ldrb	r3, [r7, #15]
 800255a:	2101      	movs	r1, #1
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff fe25 	bl	80021ac <MAX7219_SetIntensity>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <MAX7219_Init+0x3c>
 8002568:	2301      	movs	r3, #1
 800256a:	e02c      	b.n	80025c6 <MAX7219_Init+0x96>
		if(MAX7219_OK != MAX7219_SetScanLimit(i, ScanDigit0_7)) return MAX7219_ERROR;
 800256c:	7bfb      	ldrb	r3, [r7, #15]
 800256e:	2107      	movs	r1, #7
 8002570:	4618      	mov	r0, r3
 8002572:	f7ff fe3b 	bl	80021ec <MAX7219_SetScanLimit>
 8002576:	4603      	mov	r3, r0
 8002578:	2b00      	cmp	r3, #0
 800257a:	d001      	beq.n	8002580 <MAX7219_Init+0x50>
 800257c:	2301      	movs	r3, #1
 800257e:	e022      	b.n	80025c6 <MAX7219_Init+0x96>
		if(MAX7219_OK != MAX7219_SetDisplayTest(i, TestOff)) return MAX7219_ERROR;
 8002580:	7bfb      	ldrb	r3, [r7, #15]
 8002582:	2100      	movs	r1, #0
 8002584:	4618      	mov	r0, r3
 8002586:	f7ff fe74 	bl	8002272 <MAX7219_SetDisplayTest>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	d001      	beq.n	8002594 <MAX7219_Init+0x64>
 8002590:	2301      	movs	r3, #1
 8002592:	e018      	b.n	80025c6 <MAX7219_Init+0x96>
		if(MAX7219_OK != MAX7219_Shutdown(i, NormalOperation)) return MAX7219_ERROR;
 8002594:	7bfb      	ldrb	r3, [r7, #15]
 8002596:	2101      	movs	r1, #1
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff fe47 	bl	800222c <MAX7219_Shutdown>
 800259e:	4603      	mov	r3, r0
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d001      	beq.n	80025a8 <MAX7219_Init+0x78>
 80025a4:	2301      	movs	r3, #1
 80025a6:	e00e      	b.n	80025c6 <MAX7219_Init+0x96>
		if(MAX7219_OK != MAX7219_Clear(MAX7219_BLACK)) return MAX7219_ERROR;
 80025a8:	2000      	movs	r0, #0
 80025aa:	f7ff ff3f 	bl	800242c <MAX7219_Clear>
 80025ae:	4603      	mov	r3, r0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d001      	beq.n	80025b8 <MAX7219_Init+0x88>
 80025b4:	2301      	movs	r3, #1
 80025b6:	e006      	b.n	80025c6 <MAX7219_Init+0x96>
	for(i = 0; i < MAX7219_DEVICES; i++)
 80025b8:	7bfb      	ldrb	r3, [r7, #15]
 80025ba:	3301      	adds	r3, #1
 80025bc:	73fb      	strb	r3, [r7, #15]
 80025be:	7bfb      	ldrb	r3, [r7, #15]
 80025c0:	2b01      	cmp	r3, #1
 80025c2:	d9bf      	bls.n	8002544 <MAX7219_Init+0x14>
	}

	return MAX7219_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	20002aa4 	.word	0x20002aa4

080025d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025da:	4b11      	ldr	r3, [pc, #68]	; (8002620 <HAL_MspInit+0x4c>)
 80025dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025de:	4a10      	ldr	r2, [pc, #64]	; (8002620 <HAL_MspInit+0x4c>)
 80025e0:	f043 0301 	orr.w	r3, r3, #1
 80025e4:	6613      	str	r3, [r2, #96]	; 0x60
 80025e6:	4b0e      	ldr	r3, [pc, #56]	; (8002620 <HAL_MspInit+0x4c>)
 80025e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	607b      	str	r3, [r7, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80025f2:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <HAL_MspInit+0x4c>)
 80025f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025f6:	4a0a      	ldr	r2, [pc, #40]	; (8002620 <HAL_MspInit+0x4c>)
 80025f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025fc:	6593      	str	r3, [r2, #88]	; 0x58
 80025fe:	4b08      	ldr	r3, [pc, #32]	; (8002620 <HAL_MspInit+0x4c>)
 8002600:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002602:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002606:	603b      	str	r3, [r7, #0]
 8002608:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800260a:	2200      	movs	r2, #0
 800260c:	210f      	movs	r1, #15
 800260e:	f06f 0001 	mvn.w	r0, #1
 8002612:	f001 fc9d 	bl	8003f50 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002616:	bf00      	nop
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	40021000 	.word	0x40021000

08002624 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b08a      	sub	sp, #40	; 0x28
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800262c:	f107 0314 	add.w	r3, r7, #20
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
 8002638:	60da      	str	r2, [r3, #12]
 800263a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a15      	ldr	r2, [pc, #84]	; (8002698 <HAL_ADC_MspInit+0x74>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d124      	bne.n	8002690 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8002646:	4b15      	ldr	r3, [pc, #84]	; (800269c <HAL_ADC_MspInit+0x78>)
 8002648:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800264a:	4a14      	ldr	r2, [pc, #80]	; (800269c <HAL_ADC_MspInit+0x78>)
 800264c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002650:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002652:	4b12      	ldr	r3, [pc, #72]	; (800269c <HAL_ADC_MspInit+0x78>)
 8002654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002656:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800265a:	613b      	str	r3, [r7, #16]
 800265c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800265e:	4b0f      	ldr	r3, [pc, #60]	; (800269c <HAL_ADC_MspInit+0x78>)
 8002660:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002662:	4a0e      	ldr	r2, [pc, #56]	; (800269c <HAL_ADC_MspInit+0x78>)
 8002664:	f043 0301 	orr.w	r3, r3, #1
 8002668:	64d3      	str	r3, [r2, #76]	; 0x4c
 800266a:	4b0c      	ldr	r3, [pc, #48]	; (800269c <HAL_ADC_MspInit+0x78>)
 800266c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800266e:	f003 0301 	and.w	r3, r3, #1
 8002672:	60fb      	str	r3, [r7, #12]
 8002674:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA5     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002676:	2320      	movs	r3, #32
 8002678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800267a:	230b      	movs	r3, #11
 800267c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800267e:	2300      	movs	r3, #0
 8002680:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002682:	f107 0314 	add.w	r3, r7, #20
 8002686:	4619      	mov	r1, r3
 8002688:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800268c:	f001 fd0a 	bl	80040a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002690:	bf00      	nop
 8002692:	3728      	adds	r7, #40	; 0x28
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	50040000 	.word	0x50040000
 800269c:	40021000 	.word	0x40021000

080026a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b0a0      	sub	sp, #128	; 0x80
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]
 80026b2:	609a      	str	r2, [r3, #8]
 80026b4:	60da      	str	r2, [r3, #12]
 80026b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80026b8:	f107 0318 	add.w	r3, r7, #24
 80026bc:	2254      	movs	r2, #84	; 0x54
 80026be:	2100      	movs	r1, #0
 80026c0:	4618      	mov	r0, r3
 80026c2:	f009 f86c 	bl	800b79e <memset>
  if(hi2c->Instance==I2C3)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	4a2d      	ldr	r2, [pc, #180]	; (8002780 <HAL_I2C_MspInit+0xe0>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d153      	bne.n	8002778 <HAL_I2C_MspInit+0xd8>
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80026d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026d4:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80026d6:	2300      	movs	r3, #0
 80026d8:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026da:	f107 0318 	add.w	r3, r7, #24
 80026de:	4618      	mov	r0, r3
 80026e0:	f003 fae0 	bl	8005ca4 <HAL_RCCEx_PeriphCLKConfig>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80026ea:	f7ff fcfb 	bl	80020e4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ee:	4b25      	ldr	r3, [pc, #148]	; (8002784 <HAL_I2C_MspInit+0xe4>)
 80026f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026f2:	4a24      	ldr	r2, [pc, #144]	; (8002784 <HAL_I2C_MspInit+0xe4>)
 80026f4:	f043 0301 	orr.w	r3, r3, #1
 80026f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80026fa:	4b22      	ldr	r3, [pc, #136]	; (8002784 <HAL_I2C_MspInit+0xe4>)
 80026fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026fe:	f003 0301 	and.w	r3, r3, #1
 8002702:	617b      	str	r3, [r7, #20]
 8002704:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002706:	4b1f      	ldr	r3, [pc, #124]	; (8002784 <HAL_I2C_MspInit+0xe4>)
 8002708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800270a:	4a1e      	ldr	r2, [pc, #120]	; (8002784 <HAL_I2C_MspInit+0xe4>)
 800270c:	f043 0302 	orr.w	r3, r3, #2
 8002710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002712:	4b1c      	ldr	r3, [pc, #112]	; (8002784 <HAL_I2C_MspInit+0xe4>)
 8002714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002716:	f003 0302 	and.w	r3, r3, #2
 800271a:	613b      	str	r3, [r7, #16]
 800271c:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA7     ------> I2C3_SCL
    PB4 (NJTRST)     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800271e:	2380      	movs	r3, #128	; 0x80
 8002720:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002722:	2312      	movs	r3, #18
 8002724:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002726:	2300      	movs	r3, #0
 8002728:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800272a:	2303      	movs	r3, #3
 800272c:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800272e:	2304      	movs	r3, #4
 8002730:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002732:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002736:	4619      	mov	r1, r3
 8002738:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800273c:	f001 fcb2 	bl	80040a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002740:	2310      	movs	r3, #16
 8002742:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002744:	2312      	movs	r3, #18
 8002746:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002748:	2300      	movs	r3, #0
 800274a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800274c:	2303      	movs	r3, #3
 800274e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002750:	2304      	movs	r3, #4
 8002752:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002754:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002758:	4619      	mov	r1, r3
 800275a:	480b      	ldr	r0, [pc, #44]	; (8002788 <HAL_I2C_MspInit+0xe8>)
 800275c:	f001 fca2 	bl	80040a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002760:	4b08      	ldr	r3, [pc, #32]	; (8002784 <HAL_I2C_MspInit+0xe4>)
 8002762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002764:	4a07      	ldr	r2, [pc, #28]	; (8002784 <HAL_I2C_MspInit+0xe4>)
 8002766:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800276a:	6593      	str	r3, [r2, #88]	; 0x58
 800276c:	4b05      	ldr	r3, [pc, #20]	; (8002784 <HAL_I2C_MspInit+0xe4>)
 800276e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002770:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002778:	bf00      	nop
 800277a:	3780      	adds	r7, #128	; 0x80
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40005c00 	.word	0x40005c00
 8002784:	40021000 	.word	0x40021000
 8002788:	48000400 	.word	0x48000400

0800278c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800278c:	b480      	push	{r7}
 800278e:	b085      	sub	sp, #20
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
  if(hrng->Instance==RNG)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a0a      	ldr	r2, [pc, #40]	; (80027c4 <HAL_RNG_MspInit+0x38>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d10b      	bne.n	80027b6 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800279e:	4b0a      	ldr	r3, [pc, #40]	; (80027c8 <HAL_RNG_MspInit+0x3c>)
 80027a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027a2:	4a09      	ldr	r2, [pc, #36]	; (80027c8 <HAL_RNG_MspInit+0x3c>)
 80027a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027aa:	4b07      	ldr	r3, [pc, #28]	; (80027c8 <HAL_RNG_MspInit+0x3c>)
 80027ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 80027b6:	bf00      	nop
 80027b8:	3714      	adds	r7, #20
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr
 80027c2:	bf00      	nop
 80027c4:	50060800 	.word	0x50060800
 80027c8:	40021000 	.word	0x40021000

080027cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08a      	sub	sp, #40	; 0x28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d4:	f107 0314 	add.w	r3, r7, #20
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
 80027dc:	605a      	str	r2, [r3, #4]
 80027de:	609a      	str	r2, [r3, #8]
 80027e0:	60da      	str	r2, [r3, #12]
 80027e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a17      	ldr	r2, [pc, #92]	; (8002848 <HAL_SPI_MspInit+0x7c>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d127      	bne.n	800283e <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80027ee:	4b17      	ldr	r3, [pc, #92]	; (800284c <HAL_SPI_MspInit+0x80>)
 80027f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f2:	4a16      	ldr	r2, [pc, #88]	; (800284c <HAL_SPI_MspInit+0x80>)
 80027f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027f8:	6593      	str	r3, [r2, #88]	; 0x58
 80027fa:	4b14      	ldr	r3, [pc, #80]	; (800284c <HAL_SPI_MspInit+0x80>)
 80027fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002802:	613b      	str	r3, [r7, #16]
 8002804:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002806:	4b11      	ldr	r3, [pc, #68]	; (800284c <HAL_SPI_MspInit+0x80>)
 8002808:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800280a:	4a10      	ldr	r2, [pc, #64]	; (800284c <HAL_SPI_MspInit+0x80>)
 800280c:	f043 0302 	orr.w	r3, r3, #2
 8002810:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002812:	4b0e      	ldr	r3, [pc, #56]	; (800284c <HAL_SPI_MspInit+0x80>)
 8002814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002816:	f003 0302 	and.w	r3, r3, #2
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB3 (JTDO-TRACESWO)     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800281e:	2328      	movs	r3, #40	; 0x28
 8002820:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002822:	2302      	movs	r3, #2
 8002824:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002826:	2300      	movs	r3, #0
 8002828:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800282a:	2303      	movs	r3, #3
 800282c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800282e:	2306      	movs	r3, #6
 8002830:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002832:	f107 0314 	add.w	r3, r7, #20
 8002836:	4619      	mov	r1, r3
 8002838:	4805      	ldr	r0, [pc, #20]	; (8002850 <HAL_SPI_MspInit+0x84>)
 800283a:	f001 fc33 	bl	80040a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800283e:	bf00      	nop
 8002840:	3728      	adds	r7, #40	; 0x28
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}
 8002846:	bf00      	nop
 8002848:	40003c00 	.word	0x40003c00
 800284c:	40021000 	.word	0x40021000
 8002850:	48000400 	.word	0x48000400

08002854 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b09e      	sub	sp, #120	; 0x78
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800285c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002860:	2200      	movs	r2, #0
 8002862:	601a      	str	r2, [r3, #0]
 8002864:	605a      	str	r2, [r3, #4]
 8002866:	609a      	str	r2, [r3, #8]
 8002868:	60da      	str	r2, [r3, #12]
 800286a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800286c:	f107 0310 	add.w	r3, r7, #16
 8002870:	2254      	movs	r2, #84	; 0x54
 8002872:	2100      	movs	r1, #0
 8002874:	4618      	mov	r0, r3
 8002876:	f008 ff92 	bl	800b79e <memset>
  if(huart->Instance==USART2)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a2c      	ldr	r2, [pc, #176]	; (8002930 <HAL_UART_MspInit+0xdc>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d150      	bne.n	8002926 <HAL_UART_MspInit+0xd2>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002884:	2302      	movs	r3, #2
 8002886:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002888:	2300      	movs	r3, #0
 800288a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800288c:	f107 0310 	add.w	r3, r7, #16
 8002890:	4618      	mov	r0, r3
 8002892:	f003 fa07 	bl	8005ca4 <HAL_RCCEx_PeriphCLKConfig>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800289c:	f7ff fc22 	bl	80020e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80028a0:	4b24      	ldr	r3, [pc, #144]	; (8002934 <HAL_UART_MspInit+0xe0>)
 80028a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028a4:	4a23      	ldr	r2, [pc, #140]	; (8002934 <HAL_UART_MspInit+0xe0>)
 80028a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028aa:	6593      	str	r3, [r2, #88]	; 0x58
 80028ac:	4b21      	ldr	r3, [pc, #132]	; (8002934 <HAL_UART_MspInit+0xe0>)
 80028ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80028b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b4:	60fb      	str	r3, [r7, #12]
 80028b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028b8:	4b1e      	ldr	r3, [pc, #120]	; (8002934 <HAL_UART_MspInit+0xe0>)
 80028ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028bc:	4a1d      	ldr	r2, [pc, #116]	; (8002934 <HAL_UART_MspInit+0xe0>)
 80028be:	f043 0301 	orr.w	r3, r3, #1
 80028c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028c4:	4b1b      	ldr	r3, [pc, #108]	; (8002934 <HAL_UART_MspInit+0xe0>)
 80028c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c8:	f003 0301 	and.w	r3, r3, #1
 80028cc:	60bb      	str	r3, [r7, #8]
 80028ce:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80028d0:	2304      	movs	r3, #4
 80028d2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028d4:	2302      	movs	r3, #2
 80028d6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d8:	2300      	movs	r3, #0
 80028da:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028dc:	2303      	movs	r3, #3
 80028de:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80028e0:	2307      	movs	r3, #7
 80028e2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80028e4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80028e8:	4619      	mov	r1, r3
 80028ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028ee:	f001 fbd9 	bl	80040a4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80028f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028f6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f8:	2302      	movs	r3, #2
 80028fa:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fc:	2300      	movs	r3, #0
 80028fe:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002900:	2303      	movs	r3, #3
 8002902:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8002904:	2303      	movs	r3, #3
 8002906:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8002908:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800290c:	4619      	mov	r1, r3
 800290e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002912:	f001 fbc7 	bl	80040a4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002916:	2200      	movs	r2, #0
 8002918:	2105      	movs	r1, #5
 800291a:	2026      	movs	r0, #38	; 0x26
 800291c:	f001 fb18 	bl	8003f50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002920:	2026      	movs	r0, #38	; 0x26
 8002922:	f001 fb31 	bl	8003f88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002926:	bf00      	nop
 8002928:	3778      	adds	r7, #120	; 0x78
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40004400 	.word	0x40004400
 8002934:	40021000 	.word	0x40021000

08002938 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b08c      	sub	sp, #48	; 0x30
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002940:	2300      	movs	r3, #0
 8002942:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8002944:	2300      	movs	r3, #0
 8002946:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8002948:	2200      	movs	r2, #0
 800294a:	6879      	ldr	r1, [r7, #4]
 800294c:	2036      	movs	r0, #54	; 0x36
 800294e:	f001 faff 	bl	8003f50 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002952:	2036      	movs	r0, #54	; 0x36
 8002954:	f001 fb18 	bl	8003f88 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002958:	4b1e      	ldr	r3, [pc, #120]	; (80029d4 <HAL_InitTick+0x9c>)
 800295a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800295c:	4a1d      	ldr	r2, [pc, #116]	; (80029d4 <HAL_InitTick+0x9c>)
 800295e:	f043 0310 	orr.w	r3, r3, #16
 8002962:	6593      	str	r3, [r2, #88]	; 0x58
 8002964:	4b1b      	ldr	r3, [pc, #108]	; (80029d4 <HAL_InitTick+0x9c>)
 8002966:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002968:	f003 0310 	and.w	r3, r3, #16
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002970:	f107 0210 	add.w	r2, r7, #16
 8002974:	f107 0314 	add.w	r3, r7, #20
 8002978:	4611      	mov	r1, r2
 800297a:	4618      	mov	r0, r3
 800297c:	f003 f900 	bl	8005b80 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002980:	f003 f8d2 	bl	8005b28 <HAL_RCC_GetPCLK1Freq>
 8002984:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002988:	4a13      	ldr	r2, [pc, #76]	; (80029d8 <HAL_InitTick+0xa0>)
 800298a:	fba2 2303 	umull	r2, r3, r2, r3
 800298e:	0c9b      	lsrs	r3, r3, #18
 8002990:	3b01      	subs	r3, #1
 8002992:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002994:	4b11      	ldr	r3, [pc, #68]	; (80029dc <HAL_InitTick+0xa4>)
 8002996:	4a12      	ldr	r2, [pc, #72]	; (80029e0 <HAL_InitTick+0xa8>)
 8002998:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800299a:	4b10      	ldr	r3, [pc, #64]	; (80029dc <HAL_InitTick+0xa4>)
 800299c:	f240 32e7 	movw	r2, #999	; 0x3e7
 80029a0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80029a2:	4a0e      	ldr	r2, [pc, #56]	; (80029dc <HAL_InitTick+0xa4>)
 80029a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80029a8:	4b0c      	ldr	r3, [pc, #48]	; (80029dc <HAL_InitTick+0xa4>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80029ae:	4b0b      	ldr	r3, [pc, #44]	; (80029dc <HAL_InitTick+0xa4>)
 80029b0:	2200      	movs	r2, #0
 80029b2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80029b4:	4809      	ldr	r0, [pc, #36]	; (80029dc <HAL_InitTick+0xa4>)
 80029b6:	f004 f837 	bl	8006a28 <HAL_TIM_Base_Init>
 80029ba:	4603      	mov	r3, r0
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d104      	bne.n	80029ca <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80029c0:	4806      	ldr	r0, [pc, #24]	; (80029dc <HAL_InitTick+0xa4>)
 80029c2:	f004 f893 	bl	8006aec <HAL_TIM_Base_Start_IT>
 80029c6:	4603      	mov	r3, r0
 80029c8:	e000      	b.n	80029cc <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3730      	adds	r7, #48	; 0x30
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	40021000 	.word	0x40021000
 80029d8:	431bde83 	.word	0x431bde83
 80029dc:	20002aa8 	.word	0x20002aa8
 80029e0:	40001000 	.word	0x40001000

080029e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029e8:	e7fe      	b.n	80029e8 <NMI_Handler+0x4>

080029ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029ea:	b480      	push	{r7}
 80029ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029ee:	e7fe      	b.n	80029ee <HardFault_Handler+0x4>

080029f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029f4:	e7fe      	b.n	80029f4 <MemManage_Handler+0x4>

080029f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029f6:	b480      	push	{r7}
 80029f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029fa:	e7fe      	b.n	80029fa <BusFault_Handler+0x4>

080029fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a00:	e7fe      	b.n	8002a00 <UsageFault_Handler+0x4>

08002a02 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a02:	b480      	push	{r7}
 8002a04:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a06:	bf00      	nop
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a14:	4802      	ldr	r0, [pc, #8]	; (8002a20 <USART2_IRQHandler+0x10>)
 8002a16:	f004 fb99 	bl	800714c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a1a:	bf00      	nop
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	200029d4 	.word	0x200029d4

08002a24 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002a28:	4802      	ldr	r0, [pc, #8]	; (8002a34 <TIM6_DAC_IRQHandler+0x10>)
 8002a2a:	f004 f8b3 	bl	8006b94 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002a2e:	bf00      	nop
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	20002aa8 	.word	0x20002aa8

08002a38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
	return 1;
 8002a3c:	2301      	movs	r3, #1
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr

08002a48 <_kill>:

int _kill(int pid, int sig)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002a52:	f008 fd73 	bl	800b53c <__errno>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2216      	movs	r2, #22
 8002a5a:	601a      	str	r2, [r3, #0]
	return -1;
 8002a5c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <_exit>:

void _exit (int status)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b082      	sub	sp, #8
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002a70:	f04f 31ff 	mov.w	r1, #4294967295
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f7ff ffe7 	bl	8002a48 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002a7a:	e7fe      	b.n	8002a7a <_exit+0x12>

08002a7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b086      	sub	sp, #24
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	60f8      	str	r0, [r7, #12]
 8002a84:	60b9      	str	r1, [r7, #8]
 8002a86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a88:	2300      	movs	r3, #0
 8002a8a:	617b      	str	r3, [r7, #20]
 8002a8c:	e00a      	b.n	8002aa4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002a8e:	f3af 8000 	nop.w
 8002a92:	4601      	mov	r1, r0
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	1c5a      	adds	r2, r3, #1
 8002a98:	60ba      	str	r2, [r7, #8]
 8002a9a:	b2ca      	uxtb	r2, r1
 8002a9c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	617b      	str	r3, [r7, #20]
 8002aa4:	697a      	ldr	r2, [r7, #20]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	429a      	cmp	r2, r3
 8002aaa:	dbf0      	blt.n	8002a8e <_read+0x12>
	}

return len;
 8002aac:	687b      	ldr	r3, [r7, #4]
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3718      	adds	r7, #24
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b086      	sub	sp, #24
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	60f8      	str	r0, [r7, #12]
 8002abe:	60b9      	str	r1, [r7, #8]
 8002ac0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	617b      	str	r3, [r7, #20]
 8002ac6:	e009      	b.n	8002adc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002ac8:	68bb      	ldr	r3, [r7, #8]
 8002aca:	1c5a      	adds	r2, r3, #1
 8002acc:	60ba      	str	r2, [r7, #8]
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	3301      	adds	r3, #1
 8002ada:	617b      	str	r3, [r7, #20]
 8002adc:	697a      	ldr	r2, [r7, #20]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	dbf1      	blt.n	8002ac8 <_write+0x12>
	}
	return len;
 8002ae4:	687b      	ldr	r3, [r7, #4]
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3718      	adds	r7, #24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}

08002aee <_close>:

int _close(int file)
{
 8002aee:	b480      	push	{r7}
 8002af0:	b083      	sub	sp, #12
 8002af2:	af00      	add	r7, sp, #0
 8002af4:	6078      	str	r0, [r7, #4]
	return -1;
 8002af6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	370c      	adds	r7, #12
 8002afe:	46bd      	mov	sp, r7
 8002b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b04:	4770      	bx	lr

08002b06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b06:	b480      	push	{r7}
 8002b08:	b083      	sub	sp, #12
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	6078      	str	r0, [r7, #4]
 8002b0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002b16:	605a      	str	r2, [r3, #4]
	return 0;
 8002b18:	2300      	movs	r3, #0
}
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <_isatty>:

int _isatty(int file)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
	return 1;
 8002b2e:	2301      	movs	r3, #1
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
	return 0;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3714      	adds	r7, #20
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
	...

08002b58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b086      	sub	sp, #24
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b60:	4a14      	ldr	r2, [pc, #80]	; (8002bb4 <_sbrk+0x5c>)
 8002b62:	4b15      	ldr	r3, [pc, #84]	; (8002bb8 <_sbrk+0x60>)
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b6c:	4b13      	ldr	r3, [pc, #76]	; (8002bbc <_sbrk+0x64>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d102      	bne.n	8002b7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b74:	4b11      	ldr	r3, [pc, #68]	; (8002bbc <_sbrk+0x64>)
 8002b76:	4a12      	ldr	r2, [pc, #72]	; (8002bc0 <_sbrk+0x68>)
 8002b78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b7a:	4b10      	ldr	r3, [pc, #64]	; (8002bbc <_sbrk+0x64>)
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4413      	add	r3, r2
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	429a      	cmp	r2, r3
 8002b86:	d207      	bcs.n	8002b98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b88:	f008 fcd8 	bl	800b53c <__errno>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	220c      	movs	r2, #12
 8002b90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b92:	f04f 33ff 	mov.w	r3, #4294967295
 8002b96:	e009      	b.n	8002bac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b98:	4b08      	ldr	r3, [pc, #32]	; (8002bbc <_sbrk+0x64>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b9e:	4b07      	ldr	r3, [pc, #28]	; (8002bbc <_sbrk+0x64>)
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4413      	add	r3, r2
 8002ba6:	4a05      	ldr	r2, [pc, #20]	; (8002bbc <_sbrk+0x64>)
 8002ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002baa:	68fb      	ldr	r3, [r7, #12]
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	3718      	adds	r7, #24
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}
 8002bb4:	20010000 	.word	0x20010000
 8002bb8:	00000400 	.word	0x00000400
 8002bbc:	20000330 	.word	0x20000330
 8002bc0:	20002b48 	.word	0x20002b48

08002bc4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002bc8:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <SystemInit+0x20>)
 8002bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bce:	4a05      	ldr	r2, [pc, #20]	; (8002be4 <SystemInit+0x20>)
 8002bd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002bd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8002bd8:	bf00      	nop
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be0:	4770      	bx	lr
 8002be2:	bf00      	nop
 8002be4:	e000ed00 	.word	0xe000ed00

08002be8 <Reset_Handler>:
*/

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:  ldr   sp, =_estack    /* Set stack pointer */
 8002be8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c20 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002bec:	f7ff ffea 	bl	8002bc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002bf0:	480c      	ldr	r0, [pc, #48]	; (8002c24 <LoopForever+0x6>)
  ldr r1, =_edata
 8002bf2:	490d      	ldr	r1, [pc, #52]	; (8002c28 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002bf4:	4a0d      	ldr	r2, [pc, #52]	; (8002c2c <LoopForever+0xe>)
  movs r3, #0
 8002bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002bf8:	e002      	b.n	8002c00 <LoopCopyDataInit>

08002bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002bfe:	3304      	adds	r3, #4

08002c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c04:	d3f9      	bcc.n	8002bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c06:	4a0a      	ldr	r2, [pc, #40]	; (8002c30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002c08:	4c0a      	ldr	r4, [pc, #40]	; (8002c34 <LoopForever+0x16>)
  movs r3, #0
 8002c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c0c:	e001      	b.n	8002c12 <LoopFillZerobss>

08002c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c10:	3204      	adds	r2, #4

08002c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c14:	d3fb      	bcc.n	8002c0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c16:	f008 fd8d 	bl	800b734 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002c1a:	f7fe fc29 	bl	8001470 <main>

08002c1e <LoopForever>:

LoopForever:
    b LoopForever
 8002c1e:	e7fe      	b.n	8002c1e <LoopForever>
Reset_Handler:  ldr   sp, =_estack    /* Set stack pointer */
 8002c20:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c28:	20000300 	.word	0x20000300
  ldr r2, =_sidata
 8002c2c:	08010774 	.word	0x08010774
  ldr r2, =_sbss
 8002c30:	20000300 	.word	0x20000300
  ldr r4, =_ebss
 8002c34:	20002b48 	.word	0x20002b48

08002c38 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002c38:	e7fe      	b.n	8002c38 <ADC1_IRQHandler>

08002c3a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c3a:	b580      	push	{r7, lr}
 8002c3c:	b082      	sub	sp, #8
 8002c3e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002c40:	2300      	movs	r3, #0
 8002c42:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c44:	2003      	movs	r0, #3
 8002c46:	f001 f978 	bl	8003f3a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002c4a:	200f      	movs	r0, #15
 8002c4c:	f7ff fe74 	bl	8002938 <HAL_InitTick>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d002      	beq.n	8002c5c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	71fb      	strb	r3, [r7, #7]
 8002c5a:	e001      	b.n	8002c60 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002c5c:	f7ff fcba 	bl	80025d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002c60:	79fb      	ldrb	r3, [r7, #7]
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
	...

08002c6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002c70:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <HAL_IncTick+0x20>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	461a      	mov	r2, r3
 8002c76:	4b06      	ldr	r3, [pc, #24]	; (8002c90 <HAL_IncTick+0x24>)
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4413      	add	r3, r2
 8002c7c:	4a04      	ldr	r2, [pc, #16]	; (8002c90 <HAL_IncTick+0x24>)
 8002c7e:	6013      	str	r3, [r2, #0]
}
 8002c80:	bf00      	nop
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	20000124 	.word	0x20000124
 8002c90:	20002af4 	.word	0x20002af4

08002c94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  return uwTick;
 8002c98:	4b03      	ldr	r3, [pc, #12]	; (8002ca8 <HAL_GetTick+0x14>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
}
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
 8002ca6:	bf00      	nop
 8002ca8:	20002af4 	.word	0x20002af4

08002cac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002cb4:	f7ff ffee 	bl	8002c94 <HAL_GetTick>
 8002cb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc4:	d005      	beq.n	8002cd2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8002cc6:	4b0a      	ldr	r3, [pc, #40]	; (8002cf0 <HAL_Delay+0x44>)
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	461a      	mov	r2, r3
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4413      	add	r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002cd2:	bf00      	nop
 8002cd4:	f7ff ffde 	bl	8002c94 <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d8f7      	bhi.n	8002cd4 <HAL_Delay+0x28>
  {
  }
}
 8002ce4:	bf00      	nop
 8002ce6:	bf00      	nop
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	20000124 	.word	0x20000124

08002cf4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	b083      	sub	sp, #12
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	6078      	str	r0, [r7, #4]
 8002cfc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	689b      	ldr	r3, [r3, #8]
 8002d02:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	431a      	orrs	r2, r3
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	609a      	str	r2, [r3, #8]
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]
 8002d22:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	431a      	orrs	r2, r3
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	609a      	str	r2, [r3, #8]
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b087      	sub	sp, #28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
 8002d68:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	3360      	adds	r3, #96	; 0x60
 8002d6e:	461a      	mov	r2, r3
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	681a      	ldr	r2, [r3, #0]
 8002d7c:	4b08      	ldr	r3, [pc, #32]	; (8002da0 <LL_ADC_SetOffset+0x44>)
 8002d7e:	4013      	ands	r3, r2
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002d86:	683a      	ldr	r2, [r7, #0]
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002d94:	bf00      	nop
 8002d96:	371c      	adds	r7, #28
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	03fff000 	.word	0x03fff000

08002da4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	3360      	adds	r3, #96	; 0x60
 8002db2:	461a      	mov	r2, r3
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3714      	adds	r7, #20
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dce:	4770      	bx	lr

08002dd0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b087      	sub	sp, #28
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	60f8      	str	r0, [r7, #12]
 8002dd8:	60b9      	str	r1, [r7, #8]
 8002dda:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	3360      	adds	r3, #96	; 0x60
 8002de0:	461a      	mov	r2, r3
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	4413      	add	r3, r2
 8002de8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	431a      	orrs	r2, r3
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002dfa:	bf00      	nop
 8002dfc:	371c      	adds	r7, #28
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b083      	sub	sp, #12
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	68db      	ldr	r3, [r3, #12]
 8002e12:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d101      	bne.n	8002e1e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e000      	b.n	8002e20 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	370c      	adds	r7, #12
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr

08002e2c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b087      	sub	sp, #28
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	60f8      	str	r0, [r7, #12]
 8002e34:	60b9      	str	r1, [r7, #8]
 8002e36:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	3330      	adds	r3, #48	; 0x30
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	0a1b      	lsrs	r3, r3, #8
 8002e42:	009b      	lsls	r3, r3, #2
 8002e44:	f003 030c 	and.w	r3, r3, #12
 8002e48:	4413      	add	r3, r2
 8002e4a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68bb      	ldr	r3, [r7, #8]
 8002e52:	f003 031f 	and.w	r3, r3, #31
 8002e56:	211f      	movs	r1, #31
 8002e58:	fa01 f303 	lsl.w	r3, r1, r3
 8002e5c:	43db      	mvns	r3, r3
 8002e5e:	401a      	ands	r2, r3
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	0e9b      	lsrs	r3, r3, #26
 8002e64:	f003 011f 	and.w	r1, r3, #31
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	f003 031f 	and.w	r3, r3, #31
 8002e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002e72:	431a      	orrs	r2, r3
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002e78:	bf00      	nop
 8002e7a:	371c      	adds	r7, #28
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	3314      	adds	r3, #20
 8002e94:	461a      	mov	r2, r3
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	0e5b      	lsrs	r3, r3, #25
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	f003 0304 	and.w	r3, r3, #4
 8002ea0:	4413      	add	r3, r2
 8002ea2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ea4:	697b      	ldr	r3, [r7, #20]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	0d1b      	lsrs	r3, r3, #20
 8002eac:	f003 031f 	and.w	r3, r3, #31
 8002eb0:	2107      	movs	r1, #7
 8002eb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb6:	43db      	mvns	r3, r3
 8002eb8:	401a      	ands	r2, r3
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	0d1b      	lsrs	r3, r3, #20
 8002ebe:	f003 031f 	and.w	r3, r3, #31
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec8:	431a      	orrs	r2, r3
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002ece:	bf00      	nop
 8002ed0:	371c      	adds	r7, #28
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
	...

08002edc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	401a      	ands	r2, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	f003 0318 	and.w	r3, r3, #24
 8002efe:	4908      	ldr	r1, [pc, #32]	; (8002f20 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002f00:	40d9      	lsrs	r1, r3
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	400b      	ands	r3, r1
 8002f06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002f12:	bf00      	nop
 8002f14:	3714      	adds	r7, #20
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr
 8002f1e:	bf00      	nop
 8002f20:	0007ffff 	.word	0x0007ffff

08002f24 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002f34:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f38:	687a      	ldr	r2, [r7, #4]
 8002f3a:	6093      	str	r3, [r2, #8]
}
 8002f3c:	bf00      	nop
 8002f3e:	370c      	adds	r7, #12
 8002f40:	46bd      	mov	sp, r7
 8002f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f46:	4770      	bx	lr

08002f48 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f5c:	d101      	bne.n	8002f62 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e000      	b.n	8002f64 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002f62:	2300      	movs	r3, #0
}
 8002f64:	4618      	mov	r0, r3
 8002f66:	370c      	adds	r7, #12
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002f80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f84:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002f8c:	bf00      	nop
 8002f8e:	370c      	adds	r7, #12
 8002f90:	46bd      	mov	sp, r7
 8002f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f96:	4770      	bx	lr

08002f98 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	689b      	ldr	r3, [r3, #8]
 8002fa4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fac:	d101      	bne.n	8002fb2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e000      	b.n	8002fb4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	370c      	adds	r7, #12
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr

08002fc0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	689b      	ldr	r3, [r3, #8]
 8002fcc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002fd0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002fd4:	f043 0201 	orr.w	r2, r3, #1
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	f003 0301 	and.w	r3, r3, #1
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d101      	bne.n	8003000 <LL_ADC_IsEnabled+0x18>
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e000      	b.n	8003002 <LL_ADC_IsEnabled+0x1a>
 8003000:	2300      	movs	r3, #0
}
 8003002:	4618      	mov	r0, r3
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300c:	4770      	bx	lr

0800300e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800300e:	b480      	push	{r7}
 8003010:	b083      	sub	sp, #12
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800301e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003022:	f043 0204 	orr.w	r2, r3, #4
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800302a:	bf00      	nop
 800302c:	370c      	adds	r7, #12
 800302e:	46bd      	mov	sp, r7
 8003030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003034:	4770      	bx	lr

08003036 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003036:	b480      	push	{r7}
 8003038:	b083      	sub	sp, #12
 800303a:	af00      	add	r7, sp, #0
 800303c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 0304 	and.w	r3, r3, #4
 8003046:	2b04      	cmp	r3, #4
 8003048:	d101      	bne.n	800304e <LL_ADC_REG_IsConversionOngoing+0x18>
 800304a:	2301      	movs	r3, #1
 800304c:	e000      	b.n	8003050 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr

0800305c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800305c:	b480      	push	{r7}
 800305e:	b083      	sub	sp, #12
 8003060:	af00      	add	r7, sp, #0
 8003062:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	689b      	ldr	r3, [r3, #8]
 8003068:	f003 0308 	and.w	r3, r3, #8
 800306c:	2b08      	cmp	r3, #8
 800306e:	d101      	bne.n	8003074 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8003070:	2301      	movs	r3, #1
 8003072:	e000      	b.n	8003076 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003074:	2300      	movs	r3, #0
}
 8003076:	4618      	mov	r0, r3
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
	...

08003084 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b088      	sub	sp, #32
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800308c:	2300      	movs	r3, #0
 800308e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8003090:	2300      	movs	r3, #0
 8003092:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e12c      	b.n	80032f8 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d109      	bne.n	80030c0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f7ff fab9 	bl	8002624 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2200      	movs	r2, #0
 80030b6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff ff3f 	bl	8002f48 <LL_ADC_IsDeepPowerDownEnabled>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d004      	beq.n	80030da <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4618      	mov	r0, r3
 80030d6:	f7ff ff25 	bl	8002f24 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4618      	mov	r0, r3
 80030e0:	f7ff ff5a 	bl	8002f98 <LL_ADC_IsInternalRegulatorEnabled>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d115      	bne.n	8003116 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4618      	mov	r0, r3
 80030f0:	f7ff ff3e 	bl	8002f70 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80030f4:	4b82      	ldr	r3, [pc, #520]	; (8003300 <HAL_ADC_Init+0x27c>)
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	099b      	lsrs	r3, r3, #6
 80030fa:	4a82      	ldr	r2, [pc, #520]	; (8003304 <HAL_ADC_Init+0x280>)
 80030fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003100:	099b      	lsrs	r3, r3, #6
 8003102:	3301      	adds	r3, #1
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003108:	e002      	b.n	8003110 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	3b01      	subs	r3, #1
 800310e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f9      	bne.n	800310a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f7ff ff3c 	bl	8002f98 <LL_ADC_IsInternalRegulatorEnabled>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d10d      	bne.n	8003142 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312a:	f043 0210 	orr.w	r2, r3, #16
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003136:	f043 0201 	orr.w	r2, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff ff75 	bl	8003036 <LL_ADC_REG_IsConversionOngoing>
 800314c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003152:	f003 0310 	and.w	r3, r3, #16
 8003156:	2b00      	cmp	r3, #0
 8003158:	f040 80c5 	bne.w	80032e6 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	2b00      	cmp	r3, #0
 8003160:	f040 80c1 	bne.w	80032e6 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003168:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800316c:	f043 0202 	orr.w	r2, r3, #2
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4618      	mov	r0, r3
 800317a:	f7ff ff35 	bl	8002fe8 <LL_ADC_IsEnabled>
 800317e:	4603      	mov	r3, r0
 8003180:	2b00      	cmp	r3, #0
 8003182:	d10b      	bne.n	800319c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003184:	4860      	ldr	r0, [pc, #384]	; (8003308 <HAL_ADC_Init+0x284>)
 8003186:	f7ff ff2f 	bl	8002fe8 <LL_ADC_IsEnabled>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d105      	bne.n	800319c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	4619      	mov	r1, r3
 8003196:	485d      	ldr	r0, [pc, #372]	; (800330c <HAL_ADC_Init+0x288>)
 8003198:	f7ff fdac 	bl	8002cf4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	7e5b      	ldrb	r3, [r3, #25]
 80031a0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80031a6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80031ac:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80031b2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031ba:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80031bc:	4313      	orrs	r3, r2
 80031be:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d106      	bne.n	80031d8 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ce:	3b01      	subs	r3, #1
 80031d0:	045b      	lsls	r3, r3, #17
 80031d2:	69ba      	ldr	r2, [r7, #24]
 80031d4:	4313      	orrs	r3, r2
 80031d6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d009      	beq.n	80031f4 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ec:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	4313      	orrs	r3, r2
 80031f2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68da      	ldr	r2, [r3, #12]
 80031fa:	4b45      	ldr	r3, [pc, #276]	; (8003310 <HAL_ADC_Init+0x28c>)
 80031fc:	4013      	ands	r3, r2
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	6812      	ldr	r2, [r2, #0]
 8003202:	69b9      	ldr	r1, [r7, #24]
 8003204:	430b      	orrs	r3, r1
 8003206:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4618      	mov	r0, r3
 800320e:	f7ff ff12 	bl	8003036 <LL_ADC_REG_IsConversionOngoing>
 8003212:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff ff1f 	bl	800305c <LL_ADC_INJ_IsConversionOngoing>
 800321e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d13d      	bne.n	80032a2 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d13a      	bne.n	80032a2 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003230:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003238:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800323a:	4313      	orrs	r3, r2
 800323c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	68db      	ldr	r3, [r3, #12]
 8003244:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003248:	f023 0302 	bic.w	r3, r3, #2
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	6812      	ldr	r2, [r2, #0]
 8003250:	69b9      	ldr	r1, [r7, #24]
 8003252:	430b      	orrs	r3, r1
 8003254:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800325c:	2b01      	cmp	r3, #1
 800325e:	d118      	bne.n	8003292 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800326a:	f023 0304 	bic.w	r3, r3, #4
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003276:	4311      	orrs	r1, r2
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800327c:	4311      	orrs	r1, r2
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003282:	430a      	orrs	r2, r1
 8003284:	431a      	orrs	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f042 0201 	orr.w	r2, r2, #1
 800328e:	611a      	str	r2, [r3, #16]
 8003290:	e007      	b.n	80032a2 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	691a      	ldr	r2, [r3, #16]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0201 	bic.w	r2, r2, #1
 80032a0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	691b      	ldr	r3, [r3, #16]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d10c      	bne.n	80032c4 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b0:	f023 010f 	bic.w	r1, r3, #15
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	69db      	ldr	r3, [r3, #28]
 80032b8:	1e5a      	subs	r2, r3, #1
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	631a      	str	r2, [r3, #48]	; 0x30
 80032c2:	e007      	b.n	80032d4 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f022 020f 	bic.w	r2, r2, #15
 80032d2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d8:	f023 0303 	bic.w	r3, r3, #3
 80032dc:	f043 0201 	orr.w	r2, r3, #1
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	655a      	str	r2, [r3, #84]	; 0x54
 80032e4:	e007      	b.n	80032f6 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ea:	f043 0210 	orr.w	r2, r3, #16
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80032f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3720      	adds	r7, #32
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}
 8003300:	2000011c 	.word	0x2000011c
 8003304:	053e2d63 	.word	0x053e2d63
 8003308:	50040000 	.word	0x50040000
 800330c:	50040300 	.word	0x50040300
 8003310:	fff0c007 	.word	0xfff0c007

08003314 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff fe88 	bl	8003036 <LL_ADC_REG_IsConversionOngoing>
 8003326:	4603      	mov	r3, r0
 8003328:	2b00      	cmp	r3, #0
 800332a:	d14f      	bne.n	80033cc <HAL_ADC_Start+0xb8>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003332:	2b01      	cmp	r3, #1
 8003334:	d101      	bne.n	800333a <HAL_ADC_Start+0x26>
 8003336:	2302      	movs	r3, #2
 8003338:	e04b      	b.n	80033d2 <HAL_ADC_Start+0xbe>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2201      	movs	r2, #1
 800333e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f000 fcc6 	bl	8003cd4 <ADC_Enable>
 8003348:	4603      	mov	r3, r0
 800334a:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800334c:	7bfb      	ldrb	r3, [r7, #15]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d137      	bne.n	80033c2 <HAL_ADC_Start+0xae>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003356:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800335a:	f023 0301 	bic.w	r3, r3, #1
 800335e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800336a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800336e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003372:	d106      	bne.n	8003382 <HAL_ADC_Start+0x6e>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003378:	f023 0206 	bic.w	r2, r3, #6
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	659a      	str	r2, [r3, #88]	; 0x58
 8003380:	e002      	b.n	8003388 <HAL_ADC_Start+0x74>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2200      	movs	r2, #0
 8003386:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	221c      	movs	r2, #28
 800338e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
        }

      }
#else
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d007      	beq.n	80033b6 <HAL_ADC_Start+0xa2>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80033ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff fe27 	bl	800300e <LL_ADC_REG_StartConversion>
 80033c0:	e006      	b.n	80033d0 <HAL_ADC_Start+0xbc>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2200      	movs	r2, #0
 80033c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80033ca:	e001      	b.n	80033d0 <HAL_ADC_Start+0xbc>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80033cc:	2302      	movs	r3, #2
 80033ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 80033d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b086      	sub	sp, #24
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
 80033e2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	695b      	ldr	r3, [r3, #20]
 80033e8:	2b08      	cmp	r3, #8
 80033ea:	d102      	bne.n	80033f2 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 80033ec:	2308      	movs	r3, #8
 80033ee:	617b      	str	r3, [r7, #20]
 80033f0:	e010      	b.n	8003414 <HAL_ADC_PollForConversion+0x3a>
        tmp_Flag_End = (ADC_FLAG_EOC);
      }
    }
#else
    /* Check ADC DMA mode */
    if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	f003 0301 	and.w	r3, r3, #1
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d007      	beq.n	8003410 <HAL_ADC_PollForConversion+0x36>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003404:	f043 0220 	orr.w	r2, r3, #32
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e06f      	b.n	80034f0 <HAL_ADC_PollForConversion+0x116>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8003410:	2304      	movs	r3, #4
 8003412:	617b      	str	r3, [r7, #20]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003414:	f7ff fc3e 	bl	8002c94 <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800341a:	e021      	b.n	8003460 <HAL_ADC_PollForConversion+0x86>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003422:	d01d      	beq.n	8003460 <HAL_ADC_PollForConversion+0x86>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003424:	f7ff fc36 	bl	8002c94 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	429a      	cmp	r2, r3
 8003432:	d302      	bcc.n	800343a <HAL_ADC_PollForConversion+0x60>
 8003434:	683b      	ldr	r3, [r7, #0]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d112      	bne.n	8003460 <HAL_ADC_PollForConversion+0x86>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	681a      	ldr	r2, [r3, #0]
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	4013      	ands	r3, r2
 8003444:	2b00      	cmp	r3, #0
 8003446:	d10b      	bne.n	8003460 <HAL_ADC_PollForConversion+0x86>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800344c:	f043 0204 	orr.w	r2, r3, #4
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 800345c:	2303      	movs	r3, #3
 800345e:	e047      	b.n	80034f0 <HAL_ADC_PollForConversion+0x116>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	681a      	ldr	r2, [r3, #0]
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	4013      	ands	r3, r2
 800346a:	2b00      	cmp	r3, #0
 800346c:	d0d6      	beq.n	800341c <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003472:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4618      	mov	r0, r3
 8003480:	f7ff fcc1 	bl	8002e06 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d01c      	beq.n	80034c4 <HAL_ADC_PollForConversion+0xea>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	7e5b      	ldrb	r3, [r3, #25]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d118      	bne.n	80034c4 <HAL_ADC_PollForConversion+0xea>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0308 	and.w	r3, r3, #8
 800349c:	2b08      	cmp	r3, #8
 800349e:	d111      	bne.n	80034c4 <HAL_ADC_PollForConversion+0xea>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034a4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d105      	bne.n	80034c4 <HAL_ADC_PollForConversion+0xea>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034bc:	f043 0201 	orr.w	r2, r3, #1
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	655a      	str	r2, [r3, #84]	; 0x54
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
  }
#else
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	68db      	ldr	r3, [r3, #12]
 80034ca:	60fb      	str	r3, [r7, #12]
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	2b08      	cmp	r3, #8
 80034d0:	d104      	bne.n	80034dc <HAL_ADC_PollForConversion+0x102>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	2208      	movs	r2, #8
 80034d8:	601a      	str	r2, [r3, #0]
 80034da:	e008      	b.n	80034ee <HAL_ADC_PollForConversion+0x114>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d103      	bne.n	80034ee <HAL_ADC_PollForConversion+0x114>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	220c      	movs	r2, #12
 80034ec:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80034ee:	2300      	movs	r3, #0
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3718      	adds	r7, #24
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003506:	4618      	mov	r0, r3
 8003508:	370c      	adds	r7, #12
 800350a:	46bd      	mov	sp, r7
 800350c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003510:	4770      	bx	lr
	...

08003514 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003514:	b580      	push	{r7, lr}
 8003516:	b0b6      	sub	sp, #216	; 0xd8
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
 800351c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800351e:	2300      	movs	r3, #0
 8003520:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003524:	2300      	movs	r3, #0
 8003526:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800352e:	2b01      	cmp	r3, #1
 8003530:	d101      	bne.n	8003536 <HAL_ADC_ConfigChannel+0x22>
 8003532:	2302      	movs	r3, #2
 8003534:	e3b9      	b.n	8003caa <HAL_ADC_ConfigChannel+0x796>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2201      	movs	r2, #1
 800353a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff fd77 	bl	8003036 <LL_ADC_REG_IsConversionOngoing>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	f040 839e 	bne.w	8003c8c <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	2b05      	cmp	r3, #5
 8003556:	d824      	bhi.n	80035a2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	3b02      	subs	r3, #2
 800355e:	2b03      	cmp	r3, #3
 8003560:	d81b      	bhi.n	800359a <HAL_ADC_ConfigChannel+0x86>
 8003562:	a201      	add	r2, pc, #4	; (adr r2, 8003568 <HAL_ADC_ConfigChannel+0x54>)
 8003564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003568:	08003579 	.word	0x08003579
 800356c:	08003581 	.word	0x08003581
 8003570:	08003589 	.word	0x08003589
 8003574:	08003591 	.word	0x08003591
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	220c      	movs	r2, #12
 800357c:	605a      	str	r2, [r3, #4]
          break;
 800357e:	e011      	b.n	80035a4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	2212      	movs	r2, #18
 8003584:	605a      	str	r2, [r3, #4]
          break;
 8003586:	e00d      	b.n	80035a4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	2218      	movs	r2, #24
 800358c:	605a      	str	r2, [r3, #4]
          break;
 800358e:	e009      	b.n	80035a4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003596:	605a      	str	r2, [r3, #4]
          break;
 8003598:	e004      	b.n	80035a4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	2206      	movs	r2, #6
 800359e:	605a      	str	r2, [r3, #4]
          break;
 80035a0:	e000      	b.n	80035a4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80035a2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6818      	ldr	r0, [r3, #0]
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	6859      	ldr	r1, [r3, #4]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	461a      	mov	r2, r3
 80035b2:	f7ff fc3b 	bl	8002e2c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff fd3b 	bl	8003036 <LL_ADC_REG_IsConversionOngoing>
 80035c0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4618      	mov	r0, r3
 80035ca:	f7ff fd47 	bl	800305c <LL_ADC_INJ_IsConversionOngoing>
 80035ce:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	f040 81a6 	bne.w	8003928 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	f040 81a1 	bne.w	8003928 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6818      	ldr	r0, [r3, #0]
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	6819      	ldr	r1, [r3, #0]
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	461a      	mov	r2, r3
 80035f4:	f7ff fc46 	bl	8002e84 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	695a      	ldr	r2, [r3, #20]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	08db      	lsrs	r3, r3, #3
 8003604:	f003 0303 	and.w	r3, r3, #3
 8003608:	005b      	lsls	r3, r3, #1
 800360a:	fa02 f303 	lsl.w	r3, r2, r3
 800360e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	691b      	ldr	r3, [r3, #16]
 8003616:	2b04      	cmp	r3, #4
 8003618:	d00a      	beq.n	8003630 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6818      	ldr	r0, [r3, #0]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	6919      	ldr	r1, [r3, #16]
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800362a:	f7ff fb97 	bl	8002d5c <LL_ADC_SetOffset>
 800362e:	e17b      	b.n	8003928 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2100      	movs	r1, #0
 8003636:	4618      	mov	r0, r3
 8003638:	f7ff fbb4 	bl	8002da4 <LL_ADC_GetOffsetChannel>
 800363c:	4603      	mov	r3, r0
 800363e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10a      	bne.n	800365c <HAL_ADC_ConfigChannel+0x148>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2100      	movs	r1, #0
 800364c:	4618      	mov	r0, r3
 800364e:	f7ff fba9 	bl	8002da4 <LL_ADC_GetOffsetChannel>
 8003652:	4603      	mov	r3, r0
 8003654:	0e9b      	lsrs	r3, r3, #26
 8003656:	f003 021f 	and.w	r2, r3, #31
 800365a:	e01e      	b.n	800369a <HAL_ADC_ConfigChannel+0x186>
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2100      	movs	r1, #0
 8003662:	4618      	mov	r0, r3
 8003664:	f7ff fb9e 	bl	8002da4 <LL_ADC_GetOffsetChannel>
 8003668:	4603      	mov	r3, r0
 800366a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003672:	fa93 f3a3 	rbit	r3, r3
 8003676:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800367a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800367e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003682:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 800368a:	2320      	movs	r3, #32
 800368c:	e004      	b.n	8003698 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 800368e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003692:	fab3 f383 	clz	r3, r3
 8003696:	b2db      	uxtb	r3, r3
 8003698:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d105      	bne.n	80036b2 <HAL_ADC_ConfigChannel+0x19e>
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	0e9b      	lsrs	r3, r3, #26
 80036ac:	f003 031f 	and.w	r3, r3, #31
 80036b0:	e018      	b.n	80036e4 <HAL_ADC_ConfigChannel+0x1d0>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80036be:	fa93 f3a3 	rbit	r3, r3
 80036c2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80036c6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80036ca:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80036ce:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80036d6:	2320      	movs	r3, #32
 80036d8:	e004      	b.n	80036e4 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80036da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80036de:	fab3 f383 	clz	r3, r3
 80036e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d106      	bne.n	80036f6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2200      	movs	r2, #0
 80036ee:	2100      	movs	r1, #0
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7ff fb6d 	bl	8002dd0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2101      	movs	r1, #1
 80036fc:	4618      	mov	r0, r3
 80036fe:	f7ff fb51 	bl	8002da4 <LL_ADC_GetOffsetChannel>
 8003702:	4603      	mov	r3, r0
 8003704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003708:	2b00      	cmp	r3, #0
 800370a:	d10a      	bne.n	8003722 <HAL_ADC_ConfigChannel+0x20e>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2101      	movs	r1, #1
 8003712:	4618      	mov	r0, r3
 8003714:	f7ff fb46 	bl	8002da4 <LL_ADC_GetOffsetChannel>
 8003718:	4603      	mov	r3, r0
 800371a:	0e9b      	lsrs	r3, r3, #26
 800371c:	f003 021f 	and.w	r2, r3, #31
 8003720:	e01e      	b.n	8003760 <HAL_ADC_ConfigChannel+0x24c>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2101      	movs	r1, #1
 8003728:	4618      	mov	r0, r3
 800372a:	f7ff fb3b 	bl	8002da4 <LL_ADC_GetOffsetChannel>
 800372e:	4603      	mov	r3, r0
 8003730:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003734:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003738:	fa93 f3a3 	rbit	r3, r3
 800373c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003740:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003744:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003748:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800374c:	2b00      	cmp	r3, #0
 800374e:	d101      	bne.n	8003754 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8003750:	2320      	movs	r3, #32
 8003752:	e004      	b.n	800375e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8003754:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003758:	fab3 f383 	clz	r3, r3
 800375c:	b2db      	uxtb	r3, r3
 800375e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003768:	2b00      	cmp	r3, #0
 800376a:	d105      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x264>
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	0e9b      	lsrs	r3, r3, #26
 8003772:	f003 031f 	and.w	r3, r3, #31
 8003776:	e018      	b.n	80037aa <HAL_ADC_ConfigChannel+0x296>
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003780:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003784:	fa93 f3a3 	rbit	r3, r3
 8003788:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800378c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003790:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003794:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003798:	2b00      	cmp	r3, #0
 800379a:	d101      	bne.n	80037a0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 800379c:	2320      	movs	r3, #32
 800379e:	e004      	b.n	80037aa <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80037a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80037a4:	fab3 f383 	clz	r3, r3
 80037a8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d106      	bne.n	80037bc <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	2200      	movs	r2, #0
 80037b4:	2101      	movs	r1, #1
 80037b6:	4618      	mov	r0, r3
 80037b8:	f7ff fb0a 	bl	8002dd0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	2102      	movs	r1, #2
 80037c2:	4618      	mov	r0, r3
 80037c4:	f7ff faee 	bl	8002da4 <LL_ADC_GetOffsetChannel>
 80037c8:	4603      	mov	r3, r0
 80037ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d10a      	bne.n	80037e8 <HAL_ADC_ConfigChannel+0x2d4>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	2102      	movs	r1, #2
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff fae3 	bl	8002da4 <LL_ADC_GetOffsetChannel>
 80037de:	4603      	mov	r3, r0
 80037e0:	0e9b      	lsrs	r3, r3, #26
 80037e2:	f003 021f 	and.w	r2, r3, #31
 80037e6:	e01e      	b.n	8003826 <HAL_ADC_ConfigChannel+0x312>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	2102      	movs	r1, #2
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7ff fad8 	bl	8002da4 <LL_ADC_GetOffsetChannel>
 80037f4:	4603      	mov	r3, r0
 80037f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037fe:	fa93 f3a3 	rbit	r3, r3
 8003802:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003806:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800380a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800380e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003812:	2b00      	cmp	r3, #0
 8003814:	d101      	bne.n	800381a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8003816:	2320      	movs	r3, #32
 8003818:	e004      	b.n	8003824 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800381a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800381e:	fab3 f383 	clz	r3, r3
 8003822:	b2db      	uxtb	r3, r3
 8003824:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800382e:	2b00      	cmp	r3, #0
 8003830:	d105      	bne.n	800383e <HAL_ADC_ConfigChannel+0x32a>
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	0e9b      	lsrs	r3, r3, #26
 8003838:	f003 031f 	and.w	r3, r3, #31
 800383c:	e016      	b.n	800386c <HAL_ADC_ConfigChannel+0x358>
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003846:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800384a:	fa93 f3a3 	rbit	r3, r3
 800384e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003850:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003852:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003856:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800385a:	2b00      	cmp	r3, #0
 800385c:	d101      	bne.n	8003862 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800385e:	2320      	movs	r3, #32
 8003860:	e004      	b.n	800386c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8003862:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003866:	fab3 f383 	clz	r3, r3
 800386a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800386c:	429a      	cmp	r2, r3
 800386e:	d106      	bne.n	800387e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	2200      	movs	r2, #0
 8003876:	2102      	movs	r1, #2
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff faa9 	bl	8002dd0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2103      	movs	r1, #3
 8003884:	4618      	mov	r0, r3
 8003886:	f7ff fa8d 	bl	8002da4 <LL_ADC_GetOffsetChannel>
 800388a:	4603      	mov	r3, r0
 800388c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10a      	bne.n	80038aa <HAL_ADC_ConfigChannel+0x396>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	2103      	movs	r1, #3
 800389a:	4618      	mov	r0, r3
 800389c:	f7ff fa82 	bl	8002da4 <LL_ADC_GetOffsetChannel>
 80038a0:	4603      	mov	r3, r0
 80038a2:	0e9b      	lsrs	r3, r3, #26
 80038a4:	f003 021f 	and.w	r2, r3, #31
 80038a8:	e017      	b.n	80038da <HAL_ADC_ConfigChannel+0x3c6>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2103      	movs	r1, #3
 80038b0:	4618      	mov	r0, r3
 80038b2:	f7ff fa77 	bl	8002da4 <LL_ADC_GetOffsetChannel>
 80038b6:	4603      	mov	r3, r0
 80038b8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038ba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80038bc:	fa93 f3a3 	rbit	r3, r3
 80038c0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80038c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80038c4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80038c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80038cc:	2320      	movs	r3, #32
 80038ce:	e003      	b.n	80038d8 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80038d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038d2:	fab3 f383 	clz	r3, r3
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d105      	bne.n	80038f2 <HAL_ADC_ConfigChannel+0x3de>
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	0e9b      	lsrs	r3, r3, #26
 80038ec:	f003 031f 	and.w	r3, r3, #31
 80038f0:	e011      	b.n	8003916 <HAL_ADC_ConfigChannel+0x402>
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80038fa:	fa93 f3a3 	rbit	r3, r3
 80038fe:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003900:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003902:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003904:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800390a:	2320      	movs	r3, #32
 800390c:	e003      	b.n	8003916 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800390e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003910:	fab3 f383 	clz	r3, r3
 8003914:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003916:	429a      	cmp	r2, r3
 8003918:	d106      	bne.n	8003928 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2200      	movs	r2, #0
 8003920:	2103      	movs	r1, #3
 8003922:	4618      	mov	r0, r3
 8003924:	f7ff fa54 	bl	8002dd0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	4618      	mov	r0, r3
 800392e:	f7ff fb5b 	bl	8002fe8 <LL_ADC_IsEnabled>
 8003932:	4603      	mov	r3, r0
 8003934:	2b00      	cmp	r3, #0
 8003936:	f040 813f 	bne.w	8003bb8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6818      	ldr	r0, [r3, #0]
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	6819      	ldr	r1, [r3, #0]
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	461a      	mov	r2, r3
 8003948:	f7ff fac8 	bl	8002edc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	4a8e      	ldr	r2, [pc, #568]	; (8003b8c <HAL_ADC_ConfigChannel+0x678>)
 8003952:	4293      	cmp	r3, r2
 8003954:	f040 8130 	bne.w	8003bb8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003964:	2b00      	cmp	r3, #0
 8003966:	d10b      	bne.n	8003980 <HAL_ADC_ConfigChannel+0x46c>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	0e9b      	lsrs	r3, r3, #26
 800396e:	3301      	adds	r3, #1
 8003970:	f003 031f 	and.w	r3, r3, #31
 8003974:	2b09      	cmp	r3, #9
 8003976:	bf94      	ite	ls
 8003978:	2301      	movls	r3, #1
 800397a:	2300      	movhi	r3, #0
 800397c:	b2db      	uxtb	r3, r3
 800397e:	e019      	b.n	80039b4 <HAL_ADC_ConfigChannel+0x4a0>
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003986:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003988:	fa93 f3a3 	rbit	r3, r3
 800398c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800398e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003990:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003992:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003994:	2b00      	cmp	r3, #0
 8003996:	d101      	bne.n	800399c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003998:	2320      	movs	r3, #32
 800399a:	e003      	b.n	80039a4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 800399c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800399e:	fab3 f383 	clz	r3, r3
 80039a2:	b2db      	uxtb	r3, r3
 80039a4:	3301      	adds	r3, #1
 80039a6:	f003 031f 	and.w	r3, r3, #31
 80039aa:	2b09      	cmp	r3, #9
 80039ac:	bf94      	ite	ls
 80039ae:	2301      	movls	r3, #1
 80039b0:	2300      	movhi	r3, #0
 80039b2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d079      	beq.n	8003aac <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d107      	bne.n	80039d4 <HAL_ADC_ConfigChannel+0x4c0>
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	0e9b      	lsrs	r3, r3, #26
 80039ca:	3301      	adds	r3, #1
 80039cc:	069b      	lsls	r3, r3, #26
 80039ce:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80039d2:	e015      	b.n	8003a00 <HAL_ADC_ConfigChannel+0x4ec>
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80039dc:	fa93 f3a3 	rbit	r3, r3
 80039e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80039e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039e4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80039e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d101      	bne.n	80039f0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 80039ec:	2320      	movs	r3, #32
 80039ee:	e003      	b.n	80039f8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 80039f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80039f2:	fab3 f383 	clz	r3, r3
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	3301      	adds	r3, #1
 80039fa:	069b      	lsls	r3, r3, #26
 80039fc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a00:	683b      	ldr	r3, [r7, #0]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d109      	bne.n	8003a20 <HAL_ADC_ConfigChannel+0x50c>
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	0e9b      	lsrs	r3, r3, #26
 8003a12:	3301      	adds	r3, #1
 8003a14:	f003 031f 	and.w	r3, r3, #31
 8003a18:	2101      	movs	r1, #1
 8003a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a1e:	e017      	b.n	8003a50 <HAL_ADC_ConfigChannel+0x53c>
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a28:	fa93 f3a3 	rbit	r3, r3
 8003a2c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003a2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a30:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003a32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8003a38:	2320      	movs	r3, #32
 8003a3a:	e003      	b.n	8003a44 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8003a3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a3e:	fab3 f383 	clz	r3, r3
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	3301      	adds	r3, #1
 8003a46:	f003 031f 	and.w	r3, r3, #31
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a50:	ea42 0103 	orr.w	r1, r2, r3
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d10a      	bne.n	8003a76 <HAL_ADC_ConfigChannel+0x562>
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	0e9b      	lsrs	r3, r3, #26
 8003a66:	3301      	adds	r3, #1
 8003a68:	f003 021f 	and.w	r2, r3, #31
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	005b      	lsls	r3, r3, #1
 8003a70:	4413      	add	r3, r2
 8003a72:	051b      	lsls	r3, r3, #20
 8003a74:	e018      	b.n	8003aa8 <HAL_ADC_ConfigChannel+0x594>
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a7e:	fa93 f3a3 	rbit	r3, r3
 8003a82:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003a86:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003a88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003a8e:	2320      	movs	r3, #32
 8003a90:	e003      	b.n	8003a9a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8003a92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a94:	fab3 f383 	clz	r3, r3
 8003a98:	b2db      	uxtb	r3, r3
 8003a9a:	3301      	adds	r3, #1
 8003a9c:	f003 021f 	and.w	r2, r3, #31
 8003aa0:	4613      	mov	r3, r2
 8003aa2:	005b      	lsls	r3, r3, #1
 8003aa4:	4413      	add	r3, r2
 8003aa6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003aa8:	430b      	orrs	r3, r1
 8003aaa:	e080      	b.n	8003bae <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d107      	bne.n	8003ac8 <HAL_ADC_ConfigChannel+0x5b4>
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	0e9b      	lsrs	r3, r3, #26
 8003abe:	3301      	adds	r3, #1
 8003ac0:	069b      	lsls	r3, r3, #26
 8003ac2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ac6:	e015      	b.n	8003af4 <HAL_ADC_ConfigChannel+0x5e0>
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ace:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ad0:	fa93 f3a3 	rbit	r3, r3
 8003ad4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003ad6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ad8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003ae0:	2320      	movs	r3, #32
 8003ae2:	e003      	b.n	8003aec <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8003ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae6:	fab3 f383 	clz	r3, r3
 8003aea:	b2db      	uxtb	r3, r3
 8003aec:	3301      	adds	r3, #1
 8003aee:	069b      	lsls	r3, r3, #26
 8003af0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d109      	bne.n	8003b14 <HAL_ADC_ConfigChannel+0x600>
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	0e9b      	lsrs	r3, r3, #26
 8003b06:	3301      	adds	r3, #1
 8003b08:	f003 031f 	and.w	r3, r3, #31
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b12:	e017      	b.n	8003b44 <HAL_ADC_ConfigChannel+0x630>
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b1a:	6a3b      	ldr	r3, [r7, #32]
 8003b1c:	fa93 f3a3 	rbit	r3, r3
 8003b20:	61fb      	str	r3, [r7, #28]
  return result;
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d101      	bne.n	8003b30 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8003b2c:	2320      	movs	r3, #32
 8003b2e:	e003      	b.n	8003b38 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8003b30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b32:	fab3 f383 	clz	r3, r3
 8003b36:	b2db      	uxtb	r3, r3
 8003b38:	3301      	adds	r3, #1
 8003b3a:	f003 031f 	and.w	r3, r3, #31
 8003b3e:	2101      	movs	r1, #1
 8003b40:	fa01 f303 	lsl.w	r3, r1, r3
 8003b44:	ea42 0103 	orr.w	r1, r2, r3
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10d      	bne.n	8003b70 <HAL_ADC_ConfigChannel+0x65c>
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	0e9b      	lsrs	r3, r3, #26
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	f003 021f 	and.w	r2, r3, #31
 8003b60:	4613      	mov	r3, r2
 8003b62:	005b      	lsls	r3, r3, #1
 8003b64:	4413      	add	r3, r2
 8003b66:	3b1e      	subs	r3, #30
 8003b68:	051b      	lsls	r3, r3, #20
 8003b6a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003b6e:	e01d      	b.n	8003bac <HAL_ADC_ConfigChannel+0x698>
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b76:	697b      	ldr	r3, [r7, #20]
 8003b78:	fa93 f3a3 	rbit	r3, r3
 8003b7c:	613b      	str	r3, [r7, #16]
  return result;
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003b82:	69bb      	ldr	r3, [r7, #24]
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d103      	bne.n	8003b90 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003b88:	2320      	movs	r3, #32
 8003b8a:	e005      	b.n	8003b98 <HAL_ADC_ConfigChannel+0x684>
 8003b8c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003b90:	69bb      	ldr	r3, [r7, #24]
 8003b92:	fab3 f383 	clz	r3, r3
 8003b96:	b2db      	uxtb	r3, r3
 8003b98:	3301      	adds	r3, #1
 8003b9a:	f003 021f 	and.w	r2, r3, #31
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	005b      	lsls	r3, r3, #1
 8003ba2:	4413      	add	r3, r2
 8003ba4:	3b1e      	subs	r3, #30
 8003ba6:	051b      	lsls	r3, r3, #20
 8003ba8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003bac:	430b      	orrs	r3, r1
 8003bae:	683a      	ldr	r2, [r7, #0]
 8003bb0:	6892      	ldr	r2, [r2, #8]
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	f7ff f966 	bl	8002e84 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	4b3d      	ldr	r3, [pc, #244]	; (8003cb4 <HAL_ADC_ConfigChannel+0x7a0>)
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d06c      	beq.n	8003c9e <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bc4:	483c      	ldr	r0, [pc, #240]	; (8003cb8 <HAL_ADC_ConfigChannel+0x7a4>)
 8003bc6:	f7ff f8bb 	bl	8002d40 <LL_ADC_GetCommonPathInternalCh>
 8003bca:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a3a      	ldr	r2, [pc, #232]	; (8003cbc <HAL_ADC_ConfigChannel+0x7a8>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d127      	bne.n	8003c28 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003bd8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003bdc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d121      	bne.n	8003c28 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	4a35      	ldr	r2, [pc, #212]	; (8003cc0 <HAL_ADC_ConfigChannel+0x7ac>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d157      	bne.n	8003c9e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003bee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003bf2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	482f      	ldr	r0, [pc, #188]	; (8003cb8 <HAL_ADC_ConfigChannel+0x7a4>)
 8003bfa:	f7ff f88e 	bl	8002d1a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003bfe:	4b31      	ldr	r3, [pc, #196]	; (8003cc4 <HAL_ADC_ConfigChannel+0x7b0>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	099b      	lsrs	r3, r3, #6
 8003c04:	4a30      	ldr	r2, [pc, #192]	; (8003cc8 <HAL_ADC_ConfigChannel+0x7b4>)
 8003c06:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0a:	099b      	lsrs	r3, r3, #6
 8003c0c:	1c5a      	adds	r2, r3, #1
 8003c0e:	4613      	mov	r3, r2
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	4413      	add	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003c18:	e002      	b.n	8003c20 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1f9      	bne.n	8003c1a <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c26:	e03a      	b.n	8003c9e <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a27      	ldr	r2, [pc, #156]	; (8003ccc <HAL_ADC_ConfigChannel+0x7b8>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d113      	bne.n	8003c5a <HAL_ADC_ConfigChannel+0x746>
 8003c32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10d      	bne.n	8003c5a <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a1f      	ldr	r2, [pc, #124]	; (8003cc0 <HAL_ADC_ConfigChannel+0x7ac>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d12a      	bne.n	8003c9e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c48:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c4c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003c50:	4619      	mov	r1, r3
 8003c52:	4819      	ldr	r0, [pc, #100]	; (8003cb8 <HAL_ADC_ConfigChannel+0x7a4>)
 8003c54:	f7ff f861 	bl	8002d1a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003c58:	e021      	b.n	8003c9e <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	4a1c      	ldr	r2, [pc, #112]	; (8003cd0 <HAL_ADC_ConfigChannel+0x7bc>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d11c      	bne.n	8003c9e <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003c64:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d116      	bne.n	8003c9e <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a12      	ldr	r2, [pc, #72]	; (8003cc0 <HAL_ADC_ConfigChannel+0x7ac>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d111      	bne.n	8003c9e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c7e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c82:	4619      	mov	r1, r3
 8003c84:	480c      	ldr	r0, [pc, #48]	; (8003cb8 <HAL_ADC_ConfigChannel+0x7a4>)
 8003c86:	f7ff f848 	bl	8002d1a <LL_ADC_SetCommonPathInternalCh>
 8003c8a:	e008      	b.n	8003c9e <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c90:	f043 0220 	orr.w	r2, r3, #32
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003ca6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	37d8      	adds	r7, #216	; 0xd8
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	80080000 	.word	0x80080000
 8003cb8:	50040300 	.word	0x50040300
 8003cbc:	c7520000 	.word	0xc7520000
 8003cc0:	50040000 	.word	0x50040000
 8003cc4:	2000011c 	.word	0x2000011c
 8003cc8:	053e2d63 	.word	0x053e2d63
 8003ccc:	cb840000 	.word	0xcb840000
 8003cd0:	80000001 	.word	0x80000001

08003cd4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b084      	sub	sp, #16
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7ff f97f 	bl	8002fe8 <LL_ADC_IsEnabled>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d169      	bne.n	8003dc4 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	689a      	ldr	r2, [r3, #8]
 8003cf6:	4b36      	ldr	r3, [pc, #216]	; (8003dd0 <ADC_Enable+0xfc>)
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00d      	beq.n	8003d1a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d02:	f043 0210 	orr.w	r2, r3, #16
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d0e:	f043 0201 	orr.w	r2, r3, #1
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e055      	b.n	8003dc6 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f7ff f94e 	bl	8002fc0 <LL_ADC_Enable>

    if((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8003d24:	482b      	ldr	r0, [pc, #172]	; (8003dd4 <ADC_Enable+0x100>)
 8003d26:	f7ff f80b 	bl	8002d40 <LL_ADC_GetCommonPathInternalCh>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d013      	beq.n	8003d5c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003d34:	4b28      	ldr	r3, [pc, #160]	; (8003dd8 <ADC_Enable+0x104>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	099b      	lsrs	r3, r3, #6
 8003d3a:	4a28      	ldr	r2, [pc, #160]	; (8003ddc <ADC_Enable+0x108>)
 8003d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d40:	099b      	lsrs	r3, r3, #6
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	4613      	mov	r3, r2
 8003d46:	005b      	lsls	r3, r3, #1
 8003d48:	4413      	add	r3, r2
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003d4e:	e002      	b.n	8003d56 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	3b01      	subs	r3, #1
 8003d54:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0UL)
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1f9      	bne.n	8003d50 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003d5c:	f7fe ff9a 	bl	8002c94 <HAL_GetTick>
 8003d60:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d62:	e028      	b.n	8003db6 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4618      	mov	r0, r3
 8003d6a:	f7ff f93d 	bl	8002fe8 <LL_ADC_IsEnabled>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d104      	bne.n	8003d7e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4618      	mov	r0, r3
 8003d7a:	f7ff f921 	bl	8002fc0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003d7e:	f7fe ff89 	bl	8002c94 <HAL_GetTick>
 8003d82:	4602      	mov	r2, r0
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d914      	bls.n	8003db6 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d00d      	beq.n	8003db6 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d9e:	f043 0210 	orr.w	r2, r3, #16
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003daa:	f043 0201 	orr.w	r2, r3, #1
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e007      	b.n	8003dc6 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0301 	and.w	r3, r3, #1
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d1cf      	bne.n	8003d64 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	8000003f 	.word	0x8000003f
 8003dd4:	50040300 	.word	0x50040300
 8003dd8:	2000011c 	.word	0x2000011c
 8003ddc:	053e2d63 	.word	0x053e2d63

08003de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b085      	sub	sp, #20
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003df0:	4b0c      	ldr	r3, [pc, #48]	; (8003e24 <__NVIC_SetPriorityGrouping+0x44>)
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003df6:	68ba      	ldr	r2, [r7, #8]
 8003df8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e12:	4a04      	ldr	r2, [pc, #16]	; (8003e24 <__NVIC_SetPriorityGrouping+0x44>)
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	60d3      	str	r3, [r2, #12]
}
 8003e18:	bf00      	nop
 8003e1a:	3714      	adds	r7, #20
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	e000ed00 	.word	0xe000ed00

08003e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e28:	b480      	push	{r7}
 8003e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e2c:	4b04      	ldr	r3, [pc, #16]	; (8003e40 <__NVIC_GetPriorityGrouping+0x18>)
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	0a1b      	lsrs	r3, r3, #8
 8003e32:	f003 0307 	and.w	r3, r3, #7
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr
 8003e40:	e000ed00 	.word	0xe000ed00

08003e44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	db0b      	blt.n	8003e6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e56:	79fb      	ldrb	r3, [r7, #7]
 8003e58:	f003 021f 	and.w	r2, r3, #31
 8003e5c:	4907      	ldr	r1, [pc, #28]	; (8003e7c <__NVIC_EnableIRQ+0x38>)
 8003e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e62:	095b      	lsrs	r3, r3, #5
 8003e64:	2001      	movs	r0, #1
 8003e66:	fa00 f202 	lsl.w	r2, r0, r2
 8003e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003e6e:	bf00      	nop
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	e000e100 	.word	0xe000e100

08003e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	4603      	mov	r3, r0
 8003e88:	6039      	str	r1, [r7, #0]
 8003e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	db0a      	blt.n	8003eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	b2da      	uxtb	r2, r3
 8003e98:	490c      	ldr	r1, [pc, #48]	; (8003ecc <__NVIC_SetPriority+0x4c>)
 8003e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e9e:	0112      	lsls	r2, r2, #4
 8003ea0:	b2d2      	uxtb	r2, r2
 8003ea2:	440b      	add	r3, r1
 8003ea4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ea8:	e00a      	b.n	8003ec0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	b2da      	uxtb	r2, r3
 8003eae:	4908      	ldr	r1, [pc, #32]	; (8003ed0 <__NVIC_SetPriority+0x50>)
 8003eb0:	79fb      	ldrb	r3, [r7, #7]
 8003eb2:	f003 030f 	and.w	r3, r3, #15
 8003eb6:	3b04      	subs	r3, #4
 8003eb8:	0112      	lsls	r2, r2, #4
 8003eba:	b2d2      	uxtb	r2, r2
 8003ebc:	440b      	add	r3, r1
 8003ebe:	761a      	strb	r2, [r3, #24]
}
 8003ec0:	bf00      	nop
 8003ec2:	370c      	adds	r7, #12
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eca:	4770      	bx	lr
 8003ecc:	e000e100 	.word	0xe000e100
 8003ed0:	e000ed00 	.word	0xe000ed00

08003ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b089      	sub	sp, #36	; 0x24
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f003 0307 	and.w	r3, r3, #7
 8003ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ee8:	69fb      	ldr	r3, [r7, #28]
 8003eea:	f1c3 0307 	rsb	r3, r3, #7
 8003eee:	2b04      	cmp	r3, #4
 8003ef0:	bf28      	it	cs
 8003ef2:	2304      	movcs	r3, #4
 8003ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	3304      	adds	r3, #4
 8003efa:	2b06      	cmp	r3, #6
 8003efc:	d902      	bls.n	8003f04 <NVIC_EncodePriority+0x30>
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	3b03      	subs	r3, #3
 8003f02:	e000      	b.n	8003f06 <NVIC_EncodePriority+0x32>
 8003f04:	2300      	movs	r3, #0
 8003f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f08:	f04f 32ff 	mov.w	r2, #4294967295
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f12:	43da      	mvns	r2, r3
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	401a      	ands	r2, r3
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	fa01 f303 	lsl.w	r3, r1, r3
 8003f26:	43d9      	mvns	r1, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f2c:	4313      	orrs	r3, r2
         );
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3724      	adds	r7, #36	; 0x24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f38:	4770      	bx	lr

08003f3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f3a:	b580      	push	{r7, lr}
 8003f3c:	b082      	sub	sp, #8
 8003f3e:	af00      	add	r7, sp, #0
 8003f40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f7ff ff4c 	bl	8003de0 <__NVIC_SetPriorityGrouping>
}
 8003f48:	bf00      	nop
 8003f4a:	3708      	adds	r7, #8
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	4603      	mov	r3, r0
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	607a      	str	r2, [r7, #4]
 8003f5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003f62:	f7ff ff61 	bl	8003e28 <__NVIC_GetPriorityGrouping>
 8003f66:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	68b9      	ldr	r1, [r7, #8]
 8003f6c:	6978      	ldr	r0, [r7, #20]
 8003f6e:	f7ff ffb1 	bl	8003ed4 <NVIC_EncodePriority>
 8003f72:	4602      	mov	r2, r0
 8003f74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f78:	4611      	mov	r1, r2
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7ff ff80 	bl	8003e80 <__NVIC_SetPriority>
}
 8003f80:	bf00      	nop
 8003f82:	3718      	adds	r7, #24
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b082      	sub	sp, #8
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	4603      	mov	r3, r0
 8003f90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f96:	4618      	mov	r0, r3
 8003f98:	f7ff ff54 	bl	8003e44 <__NVIC_EnableIRQ>
}
 8003f9c:	bf00      	nop
 8003f9e:	3708      	adds	r7, #8
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bd80      	pop	{r7, pc}

08003fa4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b085      	sub	sp, #20
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fac:	2300      	movs	r3, #0
 8003fae:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003fb6:	b2db      	uxtb	r3, r3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d008      	beq.n	8003fce <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2204      	movs	r2, #4
 8003fc0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	e022      	b.n	8004014 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f022 020e 	bic.w	r2, r2, #14
 8003fdc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	681a      	ldr	r2, [r3, #0]
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f022 0201 	bic.w	r2, r2, #1
 8003fec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff2:	f003 021c 	and.w	r2, r3, #28
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	fa01 f202 	lsl.w	r2, r1, r2
 8004000:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2201      	movs	r2, #1
 8004006:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8004012:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8004014:	4618      	mov	r0, r3
 8004016:	3714      	adds	r7, #20
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004028:	2300      	movs	r3, #0
 800402a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b02      	cmp	r3, #2
 8004036:	d005      	beq.n	8004044 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2204      	movs	r2, #4
 800403c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800403e:	2301      	movs	r3, #1
 8004040:	73fb      	strb	r3, [r7, #15]
 8004042:	e029      	b.n	8004098 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f022 020e 	bic.w	r2, r2, #14
 8004052:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f022 0201 	bic.w	r2, r2, #1
 8004062:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004068:	f003 021c 	and.w	r2, r3, #28
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004070:	2101      	movs	r1, #1
 8004072:	fa01 f202 	lsl.w	r2, r1, r2
 8004076:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2201      	movs	r2, #1
 800407c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408c:	2b00      	cmp	r3, #0
 800408e:	d003      	beq.n	8004098 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004094:	6878      	ldr	r0, [r7, #4]
 8004096:	4798      	blx	r3
    }
  }
  return status;
 8004098:	7bfb      	ldrb	r3, [r7, #15]
}
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
	...

080040a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80040ae:	2300      	movs	r3, #0
 80040b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040b2:	e148      	b.n	8004346 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	2101      	movs	r1, #1
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	fa01 f303 	lsl.w	r3, r1, r3
 80040c0:	4013      	ands	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 813a 	beq.w	8004340 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f003 0303 	and.w	r3, r3, #3
 80040d4:	2b01      	cmp	r3, #1
 80040d6:	d005      	beq.n	80040e4 <HAL_GPIO_Init+0x40>
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	685b      	ldr	r3, [r3, #4]
 80040dc:	f003 0303 	and.w	r3, r3, #3
 80040e0:	2b02      	cmp	r3, #2
 80040e2:	d130      	bne.n	8004146 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	005b      	lsls	r3, r3, #1
 80040ee:	2203      	movs	r2, #3
 80040f0:	fa02 f303 	lsl.w	r3, r2, r3
 80040f4:	43db      	mvns	r3, r3
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	4013      	ands	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	68da      	ldr	r2, [r3, #12]
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	005b      	lsls	r3, r3, #1
 8004104:	fa02 f303 	lsl.w	r3, r2, r3
 8004108:	693a      	ldr	r2, [r7, #16]
 800410a:	4313      	orrs	r3, r2
 800410c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800411a:	2201      	movs	r2, #1
 800411c:	697b      	ldr	r3, [r7, #20]
 800411e:	fa02 f303 	lsl.w	r3, r2, r3
 8004122:	43db      	mvns	r3, r3
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	4013      	ands	r3, r2
 8004128:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	685b      	ldr	r3, [r3, #4]
 800412e:	091b      	lsrs	r3, r3, #4
 8004130:	f003 0201 	and.w	r2, r3, #1
 8004134:	697b      	ldr	r3, [r7, #20]
 8004136:	fa02 f303 	lsl.w	r3, r2, r3
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	4313      	orrs	r3, r2
 800413e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	f003 0303 	and.w	r3, r3, #3
 800414e:	2b03      	cmp	r3, #3
 8004150:	d017      	beq.n	8004182 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004158:	697b      	ldr	r3, [r7, #20]
 800415a:	005b      	lsls	r3, r3, #1
 800415c:	2203      	movs	r2, #3
 800415e:	fa02 f303 	lsl.w	r3, r2, r3
 8004162:	43db      	mvns	r3, r3
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	4013      	ands	r3, r2
 8004168:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800416a:	683b      	ldr	r3, [r7, #0]
 800416c:	689a      	ldr	r2, [r3, #8]
 800416e:	697b      	ldr	r3, [r7, #20]
 8004170:	005b      	lsls	r3, r3, #1
 8004172:	fa02 f303 	lsl.w	r3, r2, r3
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	4313      	orrs	r3, r2
 800417a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	693a      	ldr	r2, [r7, #16]
 8004180:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004182:	683b      	ldr	r3, [r7, #0]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	f003 0303 	and.w	r3, r3, #3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d123      	bne.n	80041d6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800418e:	697b      	ldr	r3, [r7, #20]
 8004190:	08da      	lsrs	r2, r3, #3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	3208      	adds	r2, #8
 8004196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800419a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	f003 0307 	and.w	r3, r3, #7
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	220f      	movs	r2, #15
 80041a6:	fa02 f303 	lsl.w	r3, r2, r3
 80041aa:	43db      	mvns	r3, r3
 80041ac:	693a      	ldr	r2, [r7, #16]
 80041ae:	4013      	ands	r3, r2
 80041b0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	691a      	ldr	r2, [r3, #16]
 80041b6:	697b      	ldr	r3, [r7, #20]
 80041b8:	f003 0307 	and.w	r3, r3, #7
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	fa02 f303 	lsl.w	r3, r2, r3
 80041c2:	693a      	ldr	r2, [r7, #16]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	08da      	lsrs	r2, r3, #3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	3208      	adds	r2, #8
 80041d0:	6939      	ldr	r1, [r7, #16]
 80041d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	005b      	lsls	r3, r3, #1
 80041e0:	2203      	movs	r2, #3
 80041e2:	fa02 f303 	lsl.w	r3, r2, r3
 80041e6:	43db      	mvns	r3, r3
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	4013      	ands	r3, r2
 80041ec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	f003 0203 	and.w	r2, r3, #3
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	fa02 f303 	lsl.w	r3, r2, r3
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	4313      	orrs	r3, r2
 8004202:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	693a      	ldr	r2, [r7, #16]
 8004208:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800420a:	683b      	ldr	r3, [r7, #0]
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004212:	2b00      	cmp	r3, #0
 8004214:	f000 8094 	beq.w	8004340 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004218:	4b52      	ldr	r3, [pc, #328]	; (8004364 <HAL_GPIO_Init+0x2c0>)
 800421a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800421c:	4a51      	ldr	r2, [pc, #324]	; (8004364 <HAL_GPIO_Init+0x2c0>)
 800421e:	f043 0301 	orr.w	r3, r3, #1
 8004222:	6613      	str	r3, [r2, #96]	; 0x60
 8004224:	4b4f      	ldr	r3, [pc, #316]	; (8004364 <HAL_GPIO_Init+0x2c0>)
 8004226:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004228:	f003 0301 	and.w	r3, r3, #1
 800422c:	60bb      	str	r3, [r7, #8]
 800422e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004230:	4a4d      	ldr	r2, [pc, #308]	; (8004368 <HAL_GPIO_Init+0x2c4>)
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	089b      	lsrs	r3, r3, #2
 8004236:	3302      	adds	r3, #2
 8004238:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800423c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	f003 0303 	and.w	r3, r3, #3
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	220f      	movs	r2, #15
 8004248:	fa02 f303 	lsl.w	r3, r2, r3
 800424c:	43db      	mvns	r3, r3
 800424e:	693a      	ldr	r2, [r7, #16]
 8004250:	4013      	ands	r3, r2
 8004252:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800425a:	d00d      	beq.n	8004278 <HAL_GPIO_Init+0x1d4>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	4a43      	ldr	r2, [pc, #268]	; (800436c <HAL_GPIO_Init+0x2c8>)
 8004260:	4293      	cmp	r3, r2
 8004262:	d007      	beq.n	8004274 <HAL_GPIO_Init+0x1d0>
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a42      	ldr	r2, [pc, #264]	; (8004370 <HAL_GPIO_Init+0x2cc>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d101      	bne.n	8004270 <HAL_GPIO_Init+0x1cc>
 800426c:	2302      	movs	r3, #2
 800426e:	e004      	b.n	800427a <HAL_GPIO_Init+0x1d6>
 8004270:	2307      	movs	r3, #7
 8004272:	e002      	b.n	800427a <HAL_GPIO_Init+0x1d6>
 8004274:	2301      	movs	r3, #1
 8004276:	e000      	b.n	800427a <HAL_GPIO_Init+0x1d6>
 8004278:	2300      	movs	r3, #0
 800427a:	697a      	ldr	r2, [r7, #20]
 800427c:	f002 0203 	and.w	r2, r2, #3
 8004280:	0092      	lsls	r2, r2, #2
 8004282:	4093      	lsls	r3, r2
 8004284:	693a      	ldr	r2, [r7, #16]
 8004286:	4313      	orrs	r3, r2
 8004288:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800428a:	4937      	ldr	r1, [pc, #220]	; (8004368 <HAL_GPIO_Init+0x2c4>)
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	089b      	lsrs	r3, r3, #2
 8004290:	3302      	adds	r3, #2
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004298:	4b36      	ldr	r3, [pc, #216]	; (8004374 <HAL_GPIO_Init+0x2d0>)
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	43db      	mvns	r3, r3
 80042a2:	693a      	ldr	r2, [r7, #16]
 80042a4:	4013      	ands	r3, r2
 80042a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d003      	beq.n	80042bc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80042b4:	693a      	ldr	r2, [r7, #16]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	4313      	orrs	r3, r2
 80042ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80042bc:	4a2d      	ldr	r2, [pc, #180]	; (8004374 <HAL_GPIO_Init+0x2d0>)
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80042c2:	4b2c      	ldr	r3, [pc, #176]	; (8004374 <HAL_GPIO_Init+0x2d0>)
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	43db      	mvns	r3, r3
 80042cc:	693a      	ldr	r2, [r7, #16]
 80042ce:	4013      	ands	r3, r2
 80042d0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d003      	beq.n	80042e6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80042e6:	4a23      	ldr	r2, [pc, #140]	; (8004374 <HAL_GPIO_Init+0x2d0>)
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80042ec:	4b21      	ldr	r3, [pc, #132]	; (8004374 <HAL_GPIO_Init+0x2d0>)
 80042ee:	685b      	ldr	r3, [r3, #4]
 80042f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	43db      	mvns	r3, r3
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	4013      	ands	r3, r2
 80042fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004304:	2b00      	cmp	r3, #0
 8004306:	d003      	beq.n	8004310 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	4313      	orrs	r3, r2
 800430e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004310:	4a18      	ldr	r2, [pc, #96]	; (8004374 <HAL_GPIO_Init+0x2d0>)
 8004312:	693b      	ldr	r3, [r7, #16]
 8004314:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8004316:	4b17      	ldr	r3, [pc, #92]	; (8004374 <HAL_GPIO_Init+0x2d0>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	43db      	mvns	r3, r3
 8004320:	693a      	ldr	r2, [r7, #16]
 8004322:	4013      	ands	r3, r2
 8004324:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8004332:	693a      	ldr	r2, [r7, #16]
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	4313      	orrs	r3, r2
 8004338:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800433a:	4a0e      	ldr	r2, [pc, #56]	; (8004374 <HAL_GPIO_Init+0x2d0>)
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	3301      	adds	r3, #1
 8004344:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	fa22 f303 	lsr.w	r3, r2, r3
 8004350:	2b00      	cmp	r3, #0
 8004352:	f47f aeaf 	bne.w	80040b4 <HAL_GPIO_Init+0x10>
  }
}
 8004356:	bf00      	nop
 8004358:	bf00      	nop
 800435a:	371c      	adds	r7, #28
 800435c:	46bd      	mov	sp, r7
 800435e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004362:	4770      	bx	lr
 8004364:	40021000 	.word	0x40021000
 8004368:	40010000 	.word	0x40010000
 800436c:	48000400 	.word	0x48000400
 8004370:	48000800 	.word	0x48000800
 8004374:	40010400 	.word	0x40010400

08004378 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004378:	b480      	push	{r7}
 800437a:	b085      	sub	sp, #20
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	460b      	mov	r3, r1
 8004382:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	691a      	ldr	r2, [r3, #16]
 8004388:	887b      	ldrh	r3, [r7, #2]
 800438a:	4013      	ands	r3, r2
 800438c:	2b00      	cmp	r3, #0
 800438e:	d002      	beq.n	8004396 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004390:	2301      	movs	r3, #1
 8004392:	73fb      	strb	r3, [r7, #15]
 8004394:	e001      	b.n	800439a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004396:	2300      	movs	r3, #0
 8004398:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800439a:	7bfb      	ldrb	r3, [r7, #15]
}
 800439c:	4618      	mov	r0, r3
 800439e:	3714      	adds	r7, #20
 80043a0:	46bd      	mov	sp, r7
 80043a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a6:	4770      	bx	lr

080043a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
 80043b0:	460b      	mov	r3, r1
 80043b2:	807b      	strh	r3, [r7, #2]
 80043b4:	4613      	mov	r3, r2
 80043b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80043b8:	787b      	ldrb	r3, [r7, #1]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d003      	beq.n	80043c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80043be:	887a      	ldrh	r2, [r7, #2]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80043c4:	e002      	b.n	80043cc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80043c6:	887a      	ldrh	r2, [r7, #2]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	629a      	str	r2, [r3, #40]	; 0x28
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e081      	b.n	80044ee <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d106      	bne.n	8004404 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	2200      	movs	r2, #0
 80043fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80043fe:	6878      	ldr	r0, [r7, #4]
 8004400:	f7fe f94e 	bl	80026a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2224      	movs	r2, #36	; 0x24
 8004408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681a      	ldr	r2, [r3, #0]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f022 0201 	bic.w	r2, r2, #1
 800441a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	685a      	ldr	r2, [r3, #4]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004428:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	689a      	ldr	r2, [r3, #8]
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004438:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d107      	bne.n	8004452 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	689a      	ldr	r2, [r3, #8]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800444e:	609a      	str	r2, [r3, #8]
 8004450:	e006      	b.n	8004460 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	689a      	ldr	r2, [r3, #8]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800445e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	2b02      	cmp	r3, #2
 8004466:	d104      	bne.n	8004472 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004470:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	6812      	ldr	r2, [r2, #0]
 800447c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004480:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004484:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68da      	ldr	r2, [r3, #12]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004494:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	691a      	ldr	r2, [r3, #16]
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	695b      	ldr	r3, [r3, #20]
 800449e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	430a      	orrs	r2, r1
 80044ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	69d9      	ldr	r1, [r3, #28]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6a1a      	ldr	r2, [r3, #32]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	430a      	orrs	r2, r1
 80044be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681a      	ldr	r2, [r3, #0]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f042 0201 	orr.w	r2, r2, #1
 80044ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2220      	movs	r2, #32
 80044da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2200      	movs	r2, #0
 80044e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2200      	movs	r2, #0
 80044e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3708      	adds	r7, #8
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
	...

080044f8 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b088      	sub	sp, #32
 80044fc:	af02      	add	r7, sp, #8
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	607a      	str	r2, [r7, #4]
 8004502:	461a      	mov	r2, r3
 8004504:	460b      	mov	r3, r1
 8004506:	817b      	strh	r3, [r7, #10]
 8004508:	4613      	mov	r3, r2
 800450a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b20      	cmp	r3, #32
 8004516:	f040 80da 	bne.w	80046ce <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004520:	2b01      	cmp	r3, #1
 8004522:	d101      	bne.n	8004528 <HAL_I2C_Master_Transmit+0x30>
 8004524:	2302      	movs	r3, #2
 8004526:	e0d3      	b.n	80046d0 <HAL_I2C_Master_Transmit+0x1d8>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004530:	f7fe fbb0 	bl	8002c94 <HAL_GetTick>
 8004534:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004536:	697b      	ldr	r3, [r7, #20]
 8004538:	9300      	str	r3, [sp, #0]
 800453a:	2319      	movs	r3, #25
 800453c:	2201      	movs	r2, #1
 800453e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004542:	68f8      	ldr	r0, [r7, #12]
 8004544:	f000 f9e6 	bl	8004914 <I2C_WaitOnFlagUntilTimeout>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d001      	beq.n	8004552 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e0be      	b.n	80046d0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	2221      	movs	r2, #33	; 0x21
 8004556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2210      	movs	r2, #16
 800455e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2200      	movs	r2, #0
 8004566:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	893a      	ldrh	r2, [r7, #8]
 8004572:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	2200      	movs	r2, #0
 8004578:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800457e:	b29b      	uxth	r3, r3
 8004580:	2bff      	cmp	r3, #255	; 0xff
 8004582:	d90e      	bls.n	80045a2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	22ff      	movs	r2, #255	; 0xff
 8004588:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800458e:	b2da      	uxtb	r2, r3
 8004590:	8979      	ldrh	r1, [r7, #10]
 8004592:	4b51      	ldr	r3, [pc, #324]	; (80046d8 <HAL_I2C_Master_Transmit+0x1e0>)
 8004594:	9300      	str	r3, [sp, #0]
 8004596:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800459a:	68f8      	ldr	r0, [r7, #12]
 800459c:	f000 fbdc 	bl	8004d58 <I2C_TransferConfig>
 80045a0:	e06c      	b.n	800467c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045a6:	b29a      	uxth	r2, r3
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045b0:	b2da      	uxtb	r2, r3
 80045b2:	8979      	ldrh	r1, [r7, #10]
 80045b4:	4b48      	ldr	r3, [pc, #288]	; (80046d8 <HAL_I2C_Master_Transmit+0x1e0>)
 80045b6:	9300      	str	r3, [sp, #0]
 80045b8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80045bc:	68f8      	ldr	r0, [r7, #12]
 80045be:	f000 fbcb 	bl	8004d58 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80045c2:	e05b      	b.n	800467c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	6a39      	ldr	r1, [r7, #32]
 80045c8:	68f8      	ldr	r0, [r7, #12]
 80045ca:	f000 f9e3 	bl	8004994 <I2C_WaitOnTXISFlagUntilTimeout>
 80045ce:	4603      	mov	r3, r0
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d001      	beq.n	80045d8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e07b      	b.n	80046d0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045dc:	781a      	ldrb	r2, [r3, #0]
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e8:	1c5a      	adds	r2, r3, #1
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	3b01      	subs	r3, #1
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004600:	3b01      	subs	r3, #1
 8004602:	b29a      	uxth	r2, r3
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800460c:	b29b      	uxth	r3, r3
 800460e:	2b00      	cmp	r3, #0
 8004610:	d034      	beq.n	800467c <HAL_I2C_Master_Transmit+0x184>
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004616:	2b00      	cmp	r3, #0
 8004618:	d130      	bne.n	800467c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	6a3b      	ldr	r3, [r7, #32]
 8004620:	2200      	movs	r2, #0
 8004622:	2180      	movs	r1, #128	; 0x80
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f000 f975 	bl	8004914 <I2C_WaitOnFlagUntilTimeout>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d001      	beq.n	8004634 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e04d      	b.n	80046d0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004638:	b29b      	uxth	r3, r3
 800463a:	2bff      	cmp	r3, #255	; 0xff
 800463c:	d90e      	bls.n	800465c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	22ff      	movs	r2, #255	; 0xff
 8004642:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004648:	b2da      	uxtb	r2, r3
 800464a:	8979      	ldrh	r1, [r7, #10]
 800464c:	2300      	movs	r3, #0
 800464e:	9300      	str	r3, [sp, #0]
 8004650:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004654:	68f8      	ldr	r0, [r7, #12]
 8004656:	f000 fb7f 	bl	8004d58 <I2C_TransferConfig>
 800465a:	e00f      	b.n	800467c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004660:	b29a      	uxth	r2, r3
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800466a:	b2da      	uxtb	r2, r3
 800466c:	8979      	ldrh	r1, [r7, #10]
 800466e:	2300      	movs	r3, #0
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f000 fb6e 	bl	8004d58 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004680:	b29b      	uxth	r3, r3
 8004682:	2b00      	cmp	r3, #0
 8004684:	d19e      	bne.n	80045c4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004686:	697a      	ldr	r2, [r7, #20]
 8004688:	6a39      	ldr	r1, [r7, #32]
 800468a:	68f8      	ldr	r0, [r7, #12]
 800468c:	f000 f9c2 	bl	8004a14 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d001      	beq.n	800469a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e01a      	b.n	80046d0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	2220      	movs	r2, #32
 80046a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	6859      	ldr	r1, [r3, #4]
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	4b0b      	ldr	r3, [pc, #44]	; (80046dc <HAL_I2C_Master_Transmit+0x1e4>)
 80046ae:	400b      	ands	r3, r1
 80046b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2220      	movs	r2, #32
 80046b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2200      	movs	r2, #0
 80046c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80046ca:	2300      	movs	r3, #0
 80046cc:	e000      	b.n	80046d0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80046ce:	2302      	movs	r3, #2
  }
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3718      	adds	r7, #24
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	80002000 	.word	0x80002000
 80046dc:	fe00e800 	.word	0xfe00e800

080046e0 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80046e0:	b580      	push	{r7, lr}
 80046e2:	b088      	sub	sp, #32
 80046e4:	af02      	add	r7, sp, #8
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	607a      	str	r2, [r7, #4]
 80046ea:	461a      	mov	r2, r3
 80046ec:	460b      	mov	r3, r1
 80046ee:	817b      	strh	r3, [r7, #10]
 80046f0:	4613      	mov	r3, r2
 80046f2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046fa:	b2db      	uxtb	r3, r3
 80046fc:	2b20      	cmp	r3, #32
 80046fe:	f040 80db 	bne.w	80048b8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004708:	2b01      	cmp	r3, #1
 800470a:	d101      	bne.n	8004710 <HAL_I2C_Master_Receive+0x30>
 800470c:	2302      	movs	r3, #2
 800470e:	e0d4      	b.n	80048ba <HAL_I2C_Master_Receive+0x1da>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2201      	movs	r2, #1
 8004714:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004718:	f7fe fabc 	bl	8002c94 <HAL_GetTick>
 800471c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	2319      	movs	r3, #25
 8004724:	2201      	movs	r2, #1
 8004726:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800472a:	68f8      	ldr	r0, [r7, #12]
 800472c:	f000 f8f2 	bl	8004914 <I2C_WaitOnFlagUntilTimeout>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8004736:	2301      	movs	r3, #1
 8004738:	e0bf      	b.n	80048ba <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2222      	movs	r2, #34	; 0x22
 800473e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2210      	movs	r2, #16
 8004746:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	893a      	ldrh	r2, [r7, #8]
 800475a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	2200      	movs	r2, #0
 8004760:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004766:	b29b      	uxth	r3, r3
 8004768:	2bff      	cmp	r3, #255	; 0xff
 800476a:	d90e      	bls.n	800478a <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	22ff      	movs	r2, #255	; 0xff
 8004770:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004776:	b2da      	uxtb	r2, r3
 8004778:	8979      	ldrh	r1, [r7, #10]
 800477a:	4b52      	ldr	r3, [pc, #328]	; (80048c4 <HAL_I2C_Master_Receive+0x1e4>)
 800477c:	9300      	str	r3, [sp, #0]
 800477e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 fae8 	bl	8004d58 <I2C_TransferConfig>
 8004788:	e06d      	b.n	8004866 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800478e:	b29a      	uxth	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004798:	b2da      	uxtb	r2, r3
 800479a:	8979      	ldrh	r1, [r7, #10]
 800479c:	4b49      	ldr	r3, [pc, #292]	; (80048c4 <HAL_I2C_Master_Receive+0x1e4>)
 800479e:	9300      	str	r3, [sp, #0]
 80047a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80047a4:	68f8      	ldr	r0, [r7, #12]
 80047a6:	f000 fad7 	bl	8004d58 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 80047aa:	e05c      	b.n	8004866 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	6a39      	ldr	r1, [r7, #32]
 80047b0:	68f8      	ldr	r0, [r7, #12]
 80047b2:	f000 f96b 	bl	8004a8c <I2C_WaitOnRXNEFlagUntilTimeout>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e07c      	b.n	80048ba <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ca:	b2d2      	uxtb	r2, r2
 80047cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047d2:	1c5a      	adds	r2, r3, #1
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80047dc:	3b01      	subs	r3, #1
 80047de:	b29a      	uxth	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047e8:	b29b      	uxth	r3, r3
 80047ea:	3b01      	subs	r3, #1
 80047ec:	b29a      	uxth	r2, r3
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047f6:	b29b      	uxth	r3, r3
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d034      	beq.n	8004866 <HAL_I2C_Master_Receive+0x186>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004800:	2b00      	cmp	r3, #0
 8004802:	d130      	bne.n	8004866 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	9300      	str	r3, [sp, #0]
 8004808:	6a3b      	ldr	r3, [r7, #32]
 800480a:	2200      	movs	r2, #0
 800480c:	2180      	movs	r1, #128	; 0x80
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f000 f880 	bl	8004914 <I2C_WaitOnFlagUntilTimeout>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e04d      	b.n	80048ba <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004822:	b29b      	uxth	r3, r3
 8004824:	2bff      	cmp	r3, #255	; 0xff
 8004826:	d90e      	bls.n	8004846 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	22ff      	movs	r2, #255	; 0xff
 800482c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004832:	b2da      	uxtb	r2, r3
 8004834:	8979      	ldrh	r1, [r7, #10]
 8004836:	2300      	movs	r3, #0
 8004838:	9300      	str	r3, [sp, #0]
 800483a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f000 fa8a 	bl	8004d58 <I2C_TransferConfig>
 8004844:	e00f      	b.n	8004866 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484a:	b29a      	uxth	r2, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004854:	b2da      	uxtb	r2, r3
 8004856:	8979      	ldrh	r1, [r7, #10]
 8004858:	2300      	movs	r3, #0
 800485a:	9300      	str	r3, [sp, #0]
 800485c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004860:	68f8      	ldr	r0, [r7, #12]
 8004862:	f000 fa79 	bl	8004d58 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800486a:	b29b      	uxth	r3, r3
 800486c:	2b00      	cmp	r3, #0
 800486e:	d19d      	bne.n	80047ac <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	6a39      	ldr	r1, [r7, #32]
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 f8cd 	bl	8004a14 <I2C_WaitOnSTOPFlagUntilTimeout>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e01a      	b.n	80048ba <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	2220      	movs	r2, #32
 800488a:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	6859      	ldr	r1, [r3, #4]
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	681a      	ldr	r2, [r3, #0]
 8004896:	4b0c      	ldr	r3, [pc, #48]	; (80048c8 <HAL_I2C_Master_Receive+0x1e8>)
 8004898:	400b      	ands	r3, r1
 800489a:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	2220      	movs	r2, #32
 80048a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80048b4:	2300      	movs	r3, #0
 80048b6:	e000      	b.n	80048ba <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 80048b8:	2302      	movs	r3, #2
  }
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3718      	adds	r7, #24
 80048be:	46bd      	mov	sp, r7
 80048c0:	bd80      	pop	{r7, pc}
 80048c2:	bf00      	nop
 80048c4:	80002400 	.word	0x80002400
 80048c8:	fe00e800 	.word	0xfe00e800

080048cc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b02      	cmp	r3, #2
 80048e0:	d103      	bne.n	80048ea <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	2200      	movs	r2, #0
 80048e8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	699b      	ldr	r3, [r3, #24]
 80048f0:	f003 0301 	and.w	r3, r3, #1
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d007      	beq.n	8004908 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	699a      	ldr	r2, [r3, #24]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f042 0201 	orr.w	r2, r2, #1
 8004906:	619a      	str	r2, [r3, #24]
  }
}
 8004908:	bf00      	nop
 800490a:	370c      	adds	r7, #12
 800490c:	46bd      	mov	sp, r7
 800490e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004912:	4770      	bx	lr

08004914 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	603b      	str	r3, [r7, #0]
 8004920:	4613      	mov	r3, r2
 8004922:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004924:	e022      	b.n	800496c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800492c:	d01e      	beq.n	800496c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800492e:	f7fe f9b1 	bl	8002c94 <HAL_GetTick>
 8004932:	4602      	mov	r2, r0
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	1ad3      	subs	r3, r2, r3
 8004938:	683a      	ldr	r2, [r7, #0]
 800493a:	429a      	cmp	r2, r3
 800493c:	d302      	bcc.n	8004944 <I2C_WaitOnFlagUntilTimeout+0x30>
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d113      	bne.n	800496c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004948:	f043 0220 	orr.w	r2, r3, #32
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2220      	movs	r2, #32
 8004954:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e00f      	b.n	800498c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	699a      	ldr	r2, [r3, #24]
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	4013      	ands	r3, r2
 8004976:	68ba      	ldr	r2, [r7, #8]
 8004978:	429a      	cmp	r2, r3
 800497a:	bf0c      	ite	eq
 800497c:	2301      	moveq	r3, #1
 800497e:	2300      	movne	r3, #0
 8004980:	b2db      	uxtb	r3, r3
 8004982:	461a      	mov	r2, r3
 8004984:	79fb      	ldrb	r3, [r7, #7]
 8004986:	429a      	cmp	r2, r3
 8004988:	d0cd      	beq.n	8004926 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800498a:	2300      	movs	r3, #0
}
 800498c:	4618      	mov	r0, r3
 800498e:	3710      	adds	r7, #16
 8004990:	46bd      	mov	sp, r7
 8004992:	bd80      	pop	{r7, pc}

08004994 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80049a0:	e02c      	b.n	80049fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	68b9      	ldr	r1, [r7, #8]
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f000 f8ea 	bl	8004b80 <I2C_IsErrorOccurred>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d001      	beq.n	80049b6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80049b2:	2301      	movs	r3, #1
 80049b4:	e02a      	b.n	8004a0c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049bc:	d01e      	beq.n	80049fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049be:	f7fe f969 	bl	8002c94 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d302      	bcc.n	80049d4 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d113      	bne.n	80049fc <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d8:	f043 0220 	orr.w	r2, r3, #32
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2220      	movs	r2, #32
 80049e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e007      	b.n	8004a0c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	699b      	ldr	r3, [r3, #24]
 8004a02:	f003 0302 	and.w	r3, r3, #2
 8004a06:	2b02      	cmp	r3, #2
 8004a08:	d1cb      	bne.n	80049a2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a0a:	2300      	movs	r3, #0
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3710      	adds	r7, #16
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}

08004a14 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	60f8      	str	r0, [r7, #12]
 8004a1c:	60b9      	str	r1, [r7, #8]
 8004a1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a20:	e028      	b.n	8004a74 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	68b9      	ldr	r1, [r7, #8]
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f000 f8aa 	bl	8004b80 <I2C_IsErrorOccurred>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d001      	beq.n	8004a36 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e026      	b.n	8004a84 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a36:	f7fe f92d 	bl	8002c94 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d302      	bcc.n	8004a4c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d113      	bne.n	8004a74 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a50:	f043 0220 	orr.w	r2, r3, #32
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2220      	movs	r2, #32
 8004a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004a70:	2301      	movs	r3, #1
 8004a72:	e007      	b.n	8004a84 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	699b      	ldr	r3, [r3, #24]
 8004a7a:	f003 0320 	and.w	r3, r3, #32
 8004a7e:	2b20      	cmp	r3, #32
 8004a80:	d1cf      	bne.n	8004a22 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004a82:	2300      	movs	r3, #0
}
 8004a84:	4618      	mov	r0, r3
 8004a86:	3710      	adds	r7, #16
 8004a88:	46bd      	mov	sp, r7
 8004a8a:	bd80      	pop	{r7, pc}

08004a8c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	60f8      	str	r0, [r7, #12]
 8004a94:	60b9      	str	r1, [r7, #8]
 8004a96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a98:	e064      	b.n	8004b64 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a9a:	687a      	ldr	r2, [r7, #4]
 8004a9c:	68b9      	ldr	r1, [r7, #8]
 8004a9e:	68f8      	ldr	r0, [r7, #12]
 8004aa0:	f000 f86e 	bl	8004b80 <I2C_IsErrorOccurred>
 8004aa4:	4603      	mov	r3, r0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d001      	beq.n	8004aae <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e062      	b.n	8004b74 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	f003 0320 	and.w	r3, r3, #32
 8004ab8:	2b20      	cmp	r3, #32
 8004aba:	d138      	bne.n	8004b2e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	699b      	ldr	r3, [r3, #24]
 8004ac2:	f003 0304 	and.w	r3, r3, #4
 8004ac6:	2b04      	cmp	r3, #4
 8004ac8:	d105      	bne.n	8004ad6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d001      	beq.n	8004ad6 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	e04e      	b.n	8004b74 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	699b      	ldr	r3, [r3, #24]
 8004adc:	f003 0310 	and.w	r3, r3, #16
 8004ae0:	2b10      	cmp	r3, #16
 8004ae2:	d107      	bne.n	8004af4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2210      	movs	r2, #16
 8004aea:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	2204      	movs	r2, #4
 8004af0:	645a      	str	r2, [r3, #68]	; 0x44
 8004af2:	e002      	b.n	8004afa <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2220      	movs	r2, #32
 8004b00:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	6859      	ldr	r1, [r3, #4]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	4b1b      	ldr	r3, [pc, #108]	; (8004b7c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8004b0e:	400b      	ands	r3, r1
 8004b10:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2220      	movs	r2, #32
 8004b16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e022      	b.n	8004b74 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b2e:	f7fe f8b1 	bl	8002c94 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	68ba      	ldr	r2, [r7, #8]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d302      	bcc.n	8004b44 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8004b3e:	68bb      	ldr	r3, [r7, #8]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10f      	bne.n	8004b64 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b48:	f043 0220 	orr.w	r2, r3, #32
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2220      	movs	r2, #32
 8004b54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e007      	b.n	8004b74 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	699b      	ldr	r3, [r3, #24]
 8004b6a:	f003 0304 	and.w	r3, r3, #4
 8004b6e:	2b04      	cmp	r3, #4
 8004b70:	d193      	bne.n	8004a9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004b72:	2300      	movs	r3, #0
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	3710      	adds	r7, #16
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	fe00e800 	.word	0xfe00e800

08004b80 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b08a      	sub	sp, #40	; 0x28
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	60f8      	str	r0, [r7, #12]
 8004b88:	60b9      	str	r1, [r7, #8]
 8004b8a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004ba2:	69bb      	ldr	r3, [r7, #24]
 8004ba4:	f003 0310 	and.w	r3, r3, #16
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d075      	beq.n	8004c98 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2210      	movs	r2, #16
 8004bb2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004bb4:	e056      	b.n	8004c64 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bbc:	d052      	beq.n	8004c64 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004bbe:	f7fe f869 	bl	8002c94 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	68ba      	ldr	r2, [r7, #8]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d302      	bcc.n	8004bd4 <I2C_IsErrorOccurred+0x54>
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d147      	bne.n	8004c64 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004bde:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004be6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	699b      	ldr	r3, [r3, #24]
 8004bee:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004bf2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bf6:	d12e      	bne.n	8004c56 <I2C_IsErrorOccurred+0xd6>
 8004bf8:	697b      	ldr	r3, [r7, #20]
 8004bfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bfe:	d02a      	beq.n	8004c56 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8004c00:	7cfb      	ldrb	r3, [r7, #19]
 8004c02:	2b20      	cmp	r3, #32
 8004c04:	d027      	beq.n	8004c56 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	685a      	ldr	r2, [r3, #4]
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004c14:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8004c16:	f7fe f83d 	bl	8002c94 <HAL_GetTick>
 8004c1a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c1c:	e01b      	b.n	8004c56 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004c1e:	f7fe f839 	bl	8002c94 <HAL_GetTick>
 8004c22:	4602      	mov	r2, r0
 8004c24:	69fb      	ldr	r3, [r7, #28]
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	2b19      	cmp	r3, #25
 8004c2a:	d914      	bls.n	8004c56 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c30:	f043 0220 	orr.w	r2, r3, #32
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2220      	movs	r2, #32
 8004c3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2200      	movs	r2, #0
 8004c44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	699b      	ldr	r3, [r3, #24]
 8004c5c:	f003 0320 	and.w	r3, r3, #32
 8004c60:	2b20      	cmp	r3, #32
 8004c62:	d1dc      	bne.n	8004c1e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	699b      	ldr	r3, [r3, #24]
 8004c6a:	f003 0320 	and.w	r3, r3, #32
 8004c6e:	2b20      	cmp	r3, #32
 8004c70:	d003      	beq.n	8004c7a <I2C_IsErrorOccurred+0xfa>
 8004c72:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d09d      	beq.n	8004bb6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004c7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d103      	bne.n	8004c8a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2220      	movs	r2, #32
 8004c88:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004c8a:	6a3b      	ldr	r3, [r7, #32]
 8004c8c:	f043 0304 	orr.w	r3, r3, #4
 8004c90:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004c92:	2301      	movs	r3, #1
 8004c94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	699b      	ldr	r3, [r3, #24]
 8004c9e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00b      	beq.n	8004cc2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004caa:	6a3b      	ldr	r3, [r7, #32]
 8004cac:	f043 0301 	orr.w	r3, r3, #1
 8004cb0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004cba:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004cbc:	2301      	movs	r3, #1
 8004cbe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004cc2:	69bb      	ldr	r3, [r7, #24]
 8004cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00b      	beq.n	8004ce4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004ccc:	6a3b      	ldr	r3, [r7, #32]
 8004cce:	f043 0308 	orr.w	r3, r3, #8
 8004cd2:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cdc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d00b      	beq.n	8004d06 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004cee:	6a3b      	ldr	r3, [r7, #32]
 8004cf0:	f043 0302 	orr.w	r3, r3, #2
 8004cf4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004cfe:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004d06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d01c      	beq.n	8004d48 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f7ff fddc 	bl	80048cc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	6859      	ldr	r1, [r3, #4]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	4b0d      	ldr	r3, [pc, #52]	; (8004d54 <I2C_IsErrorOccurred+0x1d4>)
 8004d20:	400b      	ands	r3, r1
 8004d22:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d28:	6a3b      	ldr	r3, [r7, #32]
 8004d2a:	431a      	orrs	r2, r3
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2220      	movs	r2, #32
 8004d34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004d48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004d4c:	4618      	mov	r0, r3
 8004d4e:	3728      	adds	r7, #40	; 0x28
 8004d50:	46bd      	mov	sp, r7
 8004d52:	bd80      	pop	{r7, pc}
 8004d54:	fe00e800 	.word	0xfe00e800

08004d58 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b087      	sub	sp, #28
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	60f8      	str	r0, [r7, #12]
 8004d60:	607b      	str	r3, [r7, #4]
 8004d62:	460b      	mov	r3, r1
 8004d64:	817b      	strh	r3, [r7, #10]
 8004d66:	4613      	mov	r3, r2
 8004d68:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d6a:	897b      	ldrh	r3, [r7, #10]
 8004d6c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004d70:	7a7b      	ldrb	r3, [r7, #9]
 8004d72:	041b      	lsls	r3, r3, #16
 8004d74:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d78:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004d7e:	6a3b      	ldr	r3, [r7, #32]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004d86:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	0d5b      	lsrs	r3, r3, #21
 8004d92:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004d96:	4b08      	ldr	r3, [pc, #32]	; (8004db8 <I2C_TransferConfig+0x60>)
 8004d98:	430b      	orrs	r3, r1
 8004d9a:	43db      	mvns	r3, r3
 8004d9c:	ea02 0103 	and.w	r1, r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	697a      	ldr	r2, [r7, #20]
 8004da6:	430a      	orrs	r2, r1
 8004da8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004daa:	bf00      	nop
 8004dac:	371c      	adds	r7, #28
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	03ff63ff 	.word	0x03ff63ff

08004dbc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b083      	sub	sp, #12
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	2b20      	cmp	r3, #32
 8004dd0:	d138      	bne.n	8004e44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004dd8:	2b01      	cmp	r3, #1
 8004dda:	d101      	bne.n	8004de0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004ddc:	2302      	movs	r3, #2
 8004dde:	e032      	b.n	8004e46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2224      	movs	r2, #36	; 0x24
 8004dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f022 0201 	bic.w	r2, r2, #1
 8004dfe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004e0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	6819      	ldr	r1, [r3, #0]
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	683a      	ldr	r2, [r7, #0]
 8004e1c:	430a      	orrs	r2, r1
 8004e1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f042 0201 	orr.w	r2, r2, #1
 8004e2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2220      	movs	r2, #32
 8004e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004e40:	2300      	movs	r3, #0
 8004e42:	e000      	b.n	8004e46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004e44:	2302      	movs	r3, #2
  }
}
 8004e46:	4618      	mov	r0, r3
 8004e48:	370c      	adds	r7, #12
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e50:	4770      	bx	lr

08004e52 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b085      	sub	sp, #20
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
 8004e5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e62:	b2db      	uxtb	r3, r3
 8004e64:	2b20      	cmp	r3, #32
 8004e66:	d139      	bne.n	8004edc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d101      	bne.n	8004e76 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004e72:	2302      	movs	r3, #2
 8004e74:	e033      	b.n	8004ede <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2224      	movs	r2, #36	; 0x24
 8004e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	681a      	ldr	r2, [r3, #0]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f022 0201 	bic.w	r2, r2, #1
 8004e94:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004ea4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	021b      	lsls	r3, r3, #8
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	4313      	orrs	r3, r2
 8004eae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	68fa      	ldr	r2, [r7, #12]
 8004eb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f042 0201 	orr.w	r2, r2, #1
 8004ec6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2220      	movs	r2, #32
 8004ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	e000      	b.n	8004ede <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004edc:	2302      	movs	r3, #2
  }
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3714      	adds	r7, #20
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee8:	4770      	bx	lr
	...

08004eec <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004ef0:	4b05      	ldr	r3, [pc, #20]	; (8004f08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a04      	ldr	r2, [pc, #16]	; (8004f08 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004ef6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004efa:	6013      	str	r3, [r2, #0]
}
 8004efc:	bf00      	nop
 8004efe:	46bd      	mov	sp, r7
 8004f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f04:	4770      	bx	lr
 8004f06:	bf00      	nop
 8004f08:	40007000 	.word	0x40007000

08004f0c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8004f10:	4b04      	ldr	r3, [pc, #16]	; (8004f24 <HAL_PWREx_GetVoltageRange+0x18>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
 8004f22:	bf00      	nop
 8004f24:	40007000 	.word	0x40007000

08004f28 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f36:	d130      	bne.n	8004f9a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8004f38:	4b23      	ldr	r3, [pc, #140]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f44:	d038      	beq.n	8004fb8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004f46:	4b20      	ldr	r3, [pc, #128]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004f4e:	4a1e      	ldr	r2, [pc, #120]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004f54:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004f56:	4b1d      	ldr	r3, [pc, #116]	; (8004fcc <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2232      	movs	r2, #50	; 0x32
 8004f5c:	fb02 f303 	mul.w	r3, r2, r3
 8004f60:	4a1b      	ldr	r2, [pc, #108]	; (8004fd0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004f62:	fba2 2303 	umull	r2, r3, r2, r3
 8004f66:	0c9b      	lsrs	r3, r3, #18
 8004f68:	3301      	adds	r3, #1
 8004f6a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f6c:	e002      	b.n	8004f74 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	3b01      	subs	r3, #1
 8004f72:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004f74:	4b14      	ldr	r3, [pc, #80]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f76:	695b      	ldr	r3, [r3, #20]
 8004f78:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f80:	d102      	bne.n	8004f88 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d1f2      	bne.n	8004f6e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004f88:	4b0f      	ldr	r3, [pc, #60]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f8a:	695b      	ldr	r3, [r3, #20]
 8004f8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f94:	d110      	bne.n	8004fb8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e00f      	b.n	8004fba <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8004f9a:	4b0b      	ldr	r3, [pc, #44]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004fa2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fa6:	d007      	beq.n	8004fb8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004fa8:	4b07      	ldr	r3, [pc, #28]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004fb0:	4a05      	ldr	r2, [pc, #20]	; (8004fc8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004fb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004fb6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3714      	adds	r7, #20
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
 8004fc6:	bf00      	nop
 8004fc8:	40007000 	.word	0x40007000
 8004fcc:	2000011c 	.word	0x2000011c
 8004fd0:	431bde83 	.word	0x431bde83

08004fd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b088      	sub	sp, #32
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e3fe      	b.n	80057e4 <HAL_RCC_OscConfig+0x810>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fe6:	4ba1      	ldr	r3, [pc, #644]	; (800526c <HAL_RCC_OscConfig+0x298>)
 8004fe8:	689b      	ldr	r3, [r3, #8]
 8004fea:	f003 030c 	and.w	r3, r3, #12
 8004fee:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ff0:	4b9e      	ldr	r3, [pc, #632]	; (800526c <HAL_RCC_OscConfig+0x298>)
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	f003 0303 	and.w	r3, r3, #3
 8004ff8:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0310 	and.w	r3, r3, #16
 8005002:	2b00      	cmp	r3, #0
 8005004:	f000 80e4 	beq.w	80051d0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d007      	beq.n	800501e <HAL_RCC_OscConfig+0x4a>
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	2b0c      	cmp	r3, #12
 8005012:	f040 808b 	bne.w	800512c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	2b01      	cmp	r3, #1
 800501a:	f040 8087 	bne.w	800512c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800501e:	4b93      	ldr	r3, [pc, #588]	; (800526c <HAL_RCC_OscConfig+0x298>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 0302 	and.w	r3, r3, #2
 8005026:	2b00      	cmp	r3, #0
 8005028:	d005      	beq.n	8005036 <HAL_RCC_OscConfig+0x62>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	699b      	ldr	r3, [r3, #24]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d101      	bne.n	8005036 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8005032:	2301      	movs	r3, #1
 8005034:	e3d6      	b.n	80057e4 <HAL_RCC_OscConfig+0x810>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6a1a      	ldr	r2, [r3, #32]
 800503a:	4b8c      	ldr	r3, [pc, #560]	; (800526c <HAL_RCC_OscConfig+0x298>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0308 	and.w	r3, r3, #8
 8005042:	2b00      	cmp	r3, #0
 8005044:	d004      	beq.n	8005050 <HAL_RCC_OscConfig+0x7c>
 8005046:	4b89      	ldr	r3, [pc, #548]	; (800526c <HAL_RCC_OscConfig+0x298>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800504e:	e005      	b.n	800505c <HAL_RCC_OscConfig+0x88>
 8005050:	4b86      	ldr	r3, [pc, #536]	; (800526c <HAL_RCC_OscConfig+0x298>)
 8005052:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005056:	091b      	lsrs	r3, r3, #4
 8005058:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800505c:	4293      	cmp	r3, r2
 800505e:	d223      	bcs.n	80050a8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a1b      	ldr	r3, [r3, #32]
 8005064:	4618      	mov	r0, r3
 8005066:	f000 fdbd 	bl	8005be4 <RCC_SetFlashLatencyFromMSIRange>
 800506a:	4603      	mov	r3, r0
 800506c:	2b00      	cmp	r3, #0
 800506e:	d001      	beq.n	8005074 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8005070:	2301      	movs	r3, #1
 8005072:	e3b7      	b.n	80057e4 <HAL_RCC_OscConfig+0x810>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005074:	4b7d      	ldr	r3, [pc, #500]	; (800526c <HAL_RCC_OscConfig+0x298>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a7c      	ldr	r2, [pc, #496]	; (800526c <HAL_RCC_OscConfig+0x298>)
 800507a:	f043 0308 	orr.w	r3, r3, #8
 800507e:	6013      	str	r3, [r2, #0]
 8005080:	4b7a      	ldr	r3, [pc, #488]	; (800526c <HAL_RCC_OscConfig+0x298>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	4977      	ldr	r1, [pc, #476]	; (800526c <HAL_RCC_OscConfig+0x298>)
 800508e:	4313      	orrs	r3, r2
 8005090:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005092:	4b76      	ldr	r3, [pc, #472]	; (800526c <HAL_RCC_OscConfig+0x298>)
 8005094:	685b      	ldr	r3, [r3, #4]
 8005096:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	69db      	ldr	r3, [r3, #28]
 800509e:	021b      	lsls	r3, r3, #8
 80050a0:	4972      	ldr	r1, [pc, #456]	; (800526c <HAL_RCC_OscConfig+0x298>)
 80050a2:	4313      	orrs	r3, r2
 80050a4:	604b      	str	r3, [r1, #4]
 80050a6:	e025      	b.n	80050f4 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80050a8:	4b70      	ldr	r3, [pc, #448]	; (800526c <HAL_RCC_OscConfig+0x298>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a6f      	ldr	r2, [pc, #444]	; (800526c <HAL_RCC_OscConfig+0x298>)
 80050ae:	f043 0308 	orr.w	r3, r3, #8
 80050b2:	6013      	str	r3, [r2, #0]
 80050b4:	4b6d      	ldr	r3, [pc, #436]	; (800526c <HAL_RCC_OscConfig+0x298>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a1b      	ldr	r3, [r3, #32]
 80050c0:	496a      	ldr	r1, [pc, #424]	; (800526c <HAL_RCC_OscConfig+0x298>)
 80050c2:	4313      	orrs	r3, r2
 80050c4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80050c6:	4b69      	ldr	r3, [pc, #420]	; (800526c <HAL_RCC_OscConfig+0x298>)
 80050c8:	685b      	ldr	r3, [r3, #4]
 80050ca:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	69db      	ldr	r3, [r3, #28]
 80050d2:	021b      	lsls	r3, r3, #8
 80050d4:	4965      	ldr	r1, [pc, #404]	; (800526c <HAL_RCC_OscConfig+0x298>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80050da:	69bb      	ldr	r3, [r7, #24]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d109      	bne.n	80050f4 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6a1b      	ldr	r3, [r3, #32]
 80050e4:	4618      	mov	r0, r3
 80050e6:	f000 fd7d 	bl	8005be4 <RCC_SetFlashLatencyFromMSIRange>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d001      	beq.n	80050f4 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80050f0:	2301      	movs	r3, #1
 80050f2:	e377      	b.n	80057e4 <HAL_RCC_OscConfig+0x810>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80050f4:	f000 fc80 	bl	80059f8 <HAL_RCC_GetSysClockFreq>
 80050f8:	4602      	mov	r2, r0
 80050fa:	4b5c      	ldr	r3, [pc, #368]	; (800526c <HAL_RCC_OscConfig+0x298>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	091b      	lsrs	r3, r3, #4
 8005100:	f003 030f 	and.w	r3, r3, #15
 8005104:	495a      	ldr	r1, [pc, #360]	; (8005270 <HAL_RCC_OscConfig+0x29c>)
 8005106:	5ccb      	ldrb	r3, [r1, r3]
 8005108:	f003 031f 	and.w	r3, r3, #31
 800510c:	fa22 f303 	lsr.w	r3, r2, r3
 8005110:	4a58      	ldr	r2, [pc, #352]	; (8005274 <HAL_RCC_OscConfig+0x2a0>)
 8005112:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8005114:	4b58      	ldr	r3, [pc, #352]	; (8005278 <HAL_RCC_OscConfig+0x2a4>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4618      	mov	r0, r3
 800511a:	f7fd fc0d 	bl	8002938 <HAL_InitTick>
 800511e:	4603      	mov	r3, r0
 8005120:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8005122:	7bfb      	ldrb	r3, [r7, #15]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d052      	beq.n	80051ce <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8005128:	7bfb      	ldrb	r3, [r7, #15]
 800512a:	e35b      	b.n	80057e4 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d032      	beq.n	800519a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8005134:	4b4d      	ldr	r3, [pc, #308]	; (800526c <HAL_RCC_OscConfig+0x298>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a4c      	ldr	r2, [pc, #304]	; (800526c <HAL_RCC_OscConfig+0x298>)
 800513a:	f043 0301 	orr.w	r3, r3, #1
 800513e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8005140:	f7fd fda8 	bl	8002c94 <HAL_GetTick>
 8005144:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005146:	e008      	b.n	800515a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005148:	f7fd fda4 	bl	8002c94 <HAL_GetTick>
 800514c:	4602      	mov	r2, r0
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	1ad3      	subs	r3, r2, r3
 8005152:	2b02      	cmp	r3, #2
 8005154:	d901      	bls.n	800515a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8005156:	2303      	movs	r3, #3
 8005158:	e344      	b.n	80057e4 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800515a:	4b44      	ldr	r3, [pc, #272]	; (800526c <HAL_RCC_OscConfig+0x298>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d0f0      	beq.n	8005148 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005166:	4b41      	ldr	r3, [pc, #260]	; (800526c <HAL_RCC_OscConfig+0x298>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4a40      	ldr	r2, [pc, #256]	; (800526c <HAL_RCC_OscConfig+0x298>)
 800516c:	f043 0308 	orr.w	r3, r3, #8
 8005170:	6013      	str	r3, [r2, #0]
 8005172:	4b3e      	ldr	r3, [pc, #248]	; (800526c <HAL_RCC_OscConfig+0x298>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6a1b      	ldr	r3, [r3, #32]
 800517e:	493b      	ldr	r1, [pc, #236]	; (800526c <HAL_RCC_OscConfig+0x298>)
 8005180:	4313      	orrs	r3, r2
 8005182:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005184:	4b39      	ldr	r3, [pc, #228]	; (800526c <HAL_RCC_OscConfig+0x298>)
 8005186:	685b      	ldr	r3, [r3, #4]
 8005188:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	69db      	ldr	r3, [r3, #28]
 8005190:	021b      	lsls	r3, r3, #8
 8005192:	4936      	ldr	r1, [pc, #216]	; (800526c <HAL_RCC_OscConfig+0x298>)
 8005194:	4313      	orrs	r3, r2
 8005196:	604b      	str	r3, [r1, #4]
 8005198:	e01a      	b.n	80051d0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800519a:	4b34      	ldr	r3, [pc, #208]	; (800526c <HAL_RCC_OscConfig+0x298>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	4a33      	ldr	r2, [pc, #204]	; (800526c <HAL_RCC_OscConfig+0x298>)
 80051a0:	f023 0301 	bic.w	r3, r3, #1
 80051a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80051a6:	f7fd fd75 	bl	8002c94 <HAL_GetTick>
 80051aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80051ac:	e008      	b.n	80051c0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80051ae:	f7fd fd71 	bl	8002c94 <HAL_GetTick>
 80051b2:	4602      	mov	r2, r0
 80051b4:	693b      	ldr	r3, [r7, #16]
 80051b6:	1ad3      	subs	r3, r2, r3
 80051b8:	2b02      	cmp	r3, #2
 80051ba:	d901      	bls.n	80051c0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80051bc:	2303      	movs	r3, #3
 80051be:	e311      	b.n	80057e4 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80051c0:	4b2a      	ldr	r3, [pc, #168]	; (800526c <HAL_RCC_OscConfig+0x298>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d1f0      	bne.n	80051ae <HAL_RCC_OscConfig+0x1da>
 80051cc:	e000      	b.n	80051d0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80051ce:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0301 	and.w	r3, r3, #1
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d074      	beq.n	80052c6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80051dc:	69bb      	ldr	r3, [r7, #24]
 80051de:	2b08      	cmp	r3, #8
 80051e0:	d005      	beq.n	80051ee <HAL_RCC_OscConfig+0x21a>
 80051e2:	69bb      	ldr	r3, [r7, #24]
 80051e4:	2b0c      	cmp	r3, #12
 80051e6:	d10e      	bne.n	8005206 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	2b03      	cmp	r3, #3
 80051ec:	d10b      	bne.n	8005206 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051ee:	4b1f      	ldr	r3, [pc, #124]	; (800526c <HAL_RCC_OscConfig+0x298>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d064      	beq.n	80052c4 <HAL_RCC_OscConfig+0x2f0>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d160      	bne.n	80052c4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e2ee      	b.n	80057e4 <HAL_RCC_OscConfig+0x810>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800520e:	d106      	bne.n	800521e <HAL_RCC_OscConfig+0x24a>
 8005210:	4b16      	ldr	r3, [pc, #88]	; (800526c <HAL_RCC_OscConfig+0x298>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4a15      	ldr	r2, [pc, #84]	; (800526c <HAL_RCC_OscConfig+0x298>)
 8005216:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800521a:	6013      	str	r3, [r2, #0]
 800521c:	e01d      	b.n	800525a <HAL_RCC_OscConfig+0x286>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005226:	d10c      	bne.n	8005242 <HAL_RCC_OscConfig+0x26e>
 8005228:	4b10      	ldr	r3, [pc, #64]	; (800526c <HAL_RCC_OscConfig+0x298>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a0f      	ldr	r2, [pc, #60]	; (800526c <HAL_RCC_OscConfig+0x298>)
 800522e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005232:	6013      	str	r3, [r2, #0]
 8005234:	4b0d      	ldr	r3, [pc, #52]	; (800526c <HAL_RCC_OscConfig+0x298>)
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a0c      	ldr	r2, [pc, #48]	; (800526c <HAL_RCC_OscConfig+0x298>)
 800523a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800523e:	6013      	str	r3, [r2, #0]
 8005240:	e00b      	b.n	800525a <HAL_RCC_OscConfig+0x286>
 8005242:	4b0a      	ldr	r3, [pc, #40]	; (800526c <HAL_RCC_OscConfig+0x298>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	4a09      	ldr	r2, [pc, #36]	; (800526c <HAL_RCC_OscConfig+0x298>)
 8005248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800524c:	6013      	str	r3, [r2, #0]
 800524e:	4b07      	ldr	r3, [pc, #28]	; (800526c <HAL_RCC_OscConfig+0x298>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4a06      	ldr	r2, [pc, #24]	; (800526c <HAL_RCC_OscConfig+0x298>)
 8005254:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005258:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	2b00      	cmp	r3, #0
 8005260:	d01c      	beq.n	800529c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005262:	f7fd fd17 	bl	8002c94 <HAL_GetTick>
 8005266:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005268:	e011      	b.n	800528e <HAL_RCC_OscConfig+0x2ba>
 800526a:	bf00      	nop
 800526c:	40021000 	.word	0x40021000
 8005270:	08010268 	.word	0x08010268
 8005274:	2000011c 	.word	0x2000011c
 8005278:	20000120 	.word	0x20000120
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800527c:	f7fd fd0a 	bl	8002c94 <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	2b64      	cmp	r3, #100	; 0x64
 8005288:	d901      	bls.n	800528e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e2aa      	b.n	80057e4 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800528e:	4baf      	ldr	r3, [pc, #700]	; (800554c <HAL_RCC_OscConfig+0x578>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d0f0      	beq.n	800527c <HAL_RCC_OscConfig+0x2a8>
 800529a:	e014      	b.n	80052c6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800529c:	f7fd fcfa 	bl	8002c94 <HAL_GetTick>
 80052a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052a2:	e008      	b.n	80052b6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052a4:	f7fd fcf6 	bl	8002c94 <HAL_GetTick>
 80052a8:	4602      	mov	r2, r0
 80052aa:	693b      	ldr	r3, [r7, #16]
 80052ac:	1ad3      	subs	r3, r2, r3
 80052ae:	2b64      	cmp	r3, #100	; 0x64
 80052b0:	d901      	bls.n	80052b6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80052b2:	2303      	movs	r3, #3
 80052b4:	e296      	b.n	80057e4 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80052b6:	4ba5      	ldr	r3, [pc, #660]	; (800554c <HAL_RCC_OscConfig+0x578>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d1f0      	bne.n	80052a4 <HAL_RCC_OscConfig+0x2d0>
 80052c2:	e000      	b.n	80052c6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d060      	beq.n	8005394 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	2b04      	cmp	r3, #4
 80052d6:	d005      	beq.n	80052e4 <HAL_RCC_OscConfig+0x310>
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	2b0c      	cmp	r3, #12
 80052dc:	d119      	bne.n	8005312 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	2b02      	cmp	r3, #2
 80052e2:	d116      	bne.n	8005312 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80052e4:	4b99      	ldr	r3, [pc, #612]	; (800554c <HAL_RCC_OscConfig+0x578>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d005      	beq.n	80052fc <HAL_RCC_OscConfig+0x328>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	68db      	ldr	r3, [r3, #12]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d101      	bne.n	80052fc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e273      	b.n	80057e4 <HAL_RCC_OscConfig+0x810>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052fc:	4b93      	ldr	r3, [pc, #588]	; (800554c <HAL_RCC_OscConfig+0x578>)
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	691b      	ldr	r3, [r3, #16]
 8005308:	061b      	lsls	r3, r3, #24
 800530a:	4990      	ldr	r1, [pc, #576]	; (800554c <HAL_RCC_OscConfig+0x578>)
 800530c:	4313      	orrs	r3, r2
 800530e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005310:	e040      	b.n	8005394 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	68db      	ldr	r3, [r3, #12]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d023      	beq.n	8005362 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800531a:	4b8c      	ldr	r3, [pc, #560]	; (800554c <HAL_RCC_OscConfig+0x578>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	4a8b      	ldr	r2, [pc, #556]	; (800554c <HAL_RCC_OscConfig+0x578>)
 8005320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005324:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005326:	f7fd fcb5 	bl	8002c94 <HAL_GetTick>
 800532a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800532c:	e008      	b.n	8005340 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800532e:	f7fd fcb1 	bl	8002c94 <HAL_GetTick>
 8005332:	4602      	mov	r2, r0
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	1ad3      	subs	r3, r2, r3
 8005338:	2b02      	cmp	r3, #2
 800533a:	d901      	bls.n	8005340 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800533c:	2303      	movs	r3, #3
 800533e:	e251      	b.n	80057e4 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005340:	4b82      	ldr	r3, [pc, #520]	; (800554c <HAL_RCC_OscConfig+0x578>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005348:	2b00      	cmp	r3, #0
 800534a:	d0f0      	beq.n	800532e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800534c:	4b7f      	ldr	r3, [pc, #508]	; (800554c <HAL_RCC_OscConfig+0x578>)
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	691b      	ldr	r3, [r3, #16]
 8005358:	061b      	lsls	r3, r3, #24
 800535a:	497c      	ldr	r1, [pc, #496]	; (800554c <HAL_RCC_OscConfig+0x578>)
 800535c:	4313      	orrs	r3, r2
 800535e:	604b      	str	r3, [r1, #4]
 8005360:	e018      	b.n	8005394 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005362:	4b7a      	ldr	r3, [pc, #488]	; (800554c <HAL_RCC_OscConfig+0x578>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a79      	ldr	r2, [pc, #484]	; (800554c <HAL_RCC_OscConfig+0x578>)
 8005368:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800536c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800536e:	f7fd fc91 	bl	8002c94 <HAL_GetTick>
 8005372:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005374:	e008      	b.n	8005388 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005376:	f7fd fc8d 	bl	8002c94 <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	2b02      	cmp	r3, #2
 8005382:	d901      	bls.n	8005388 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e22d      	b.n	80057e4 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005388:	4b70      	ldr	r3, [pc, #448]	; (800554c <HAL_RCC_OscConfig+0x578>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1f0      	bne.n	8005376 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f003 0308 	and.w	r3, r3, #8
 800539c:	2b00      	cmp	r3, #0
 800539e:	d03c      	beq.n	800541a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	695b      	ldr	r3, [r3, #20]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d01c      	beq.n	80053e2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053a8:	4b68      	ldr	r3, [pc, #416]	; (800554c <HAL_RCC_OscConfig+0x578>)
 80053aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053ae:	4a67      	ldr	r2, [pc, #412]	; (800554c <HAL_RCC_OscConfig+0x578>)
 80053b0:	f043 0301 	orr.w	r3, r3, #1
 80053b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053b8:	f7fd fc6c 	bl	8002c94 <HAL_GetTick>
 80053bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053be:	e008      	b.n	80053d2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053c0:	f7fd fc68 	bl	8002c94 <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e208      	b.n	80057e4 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80053d2:	4b5e      	ldr	r3, [pc, #376]	; (800554c <HAL_RCC_OscConfig+0x578>)
 80053d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053d8:	f003 0302 	and.w	r3, r3, #2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d0ef      	beq.n	80053c0 <HAL_RCC_OscConfig+0x3ec>
 80053e0:	e01b      	b.n	800541a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80053e2:	4b5a      	ldr	r3, [pc, #360]	; (800554c <HAL_RCC_OscConfig+0x578>)
 80053e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80053e8:	4a58      	ldr	r2, [pc, #352]	; (800554c <HAL_RCC_OscConfig+0x578>)
 80053ea:	f023 0301 	bic.w	r3, r3, #1
 80053ee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f2:	f7fd fc4f 	bl	8002c94 <HAL_GetTick>
 80053f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80053f8:	e008      	b.n	800540c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80053fa:	f7fd fc4b 	bl	8002c94 <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	2b02      	cmp	r3, #2
 8005406:	d901      	bls.n	800540c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e1eb      	b.n	80057e4 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800540c:	4b4f      	ldr	r3, [pc, #316]	; (800554c <HAL_RCC_OscConfig+0x578>)
 800540e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005412:	f003 0302 	and.w	r3, r3, #2
 8005416:	2b00      	cmp	r3, #0
 8005418:	d1ef      	bne.n	80053fa <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f003 0304 	and.w	r3, r3, #4
 8005422:	2b00      	cmp	r3, #0
 8005424:	f000 80a6 	beq.w	8005574 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005428:	2300      	movs	r3, #0
 800542a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800542c:	4b47      	ldr	r3, [pc, #284]	; (800554c <HAL_RCC_OscConfig+0x578>)
 800542e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005434:	2b00      	cmp	r3, #0
 8005436:	d10d      	bne.n	8005454 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005438:	4b44      	ldr	r3, [pc, #272]	; (800554c <HAL_RCC_OscConfig+0x578>)
 800543a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800543c:	4a43      	ldr	r2, [pc, #268]	; (800554c <HAL_RCC_OscConfig+0x578>)
 800543e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005442:	6593      	str	r3, [r2, #88]	; 0x58
 8005444:	4b41      	ldr	r3, [pc, #260]	; (800554c <HAL_RCC_OscConfig+0x578>)
 8005446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005448:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800544c:	60bb      	str	r3, [r7, #8]
 800544e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005450:	2301      	movs	r3, #1
 8005452:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005454:	4b3e      	ldr	r3, [pc, #248]	; (8005550 <HAL_RCC_OscConfig+0x57c>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800545c:	2b00      	cmp	r3, #0
 800545e:	d118      	bne.n	8005492 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005460:	4b3b      	ldr	r3, [pc, #236]	; (8005550 <HAL_RCC_OscConfig+0x57c>)
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4a3a      	ldr	r2, [pc, #232]	; (8005550 <HAL_RCC_OscConfig+0x57c>)
 8005466:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800546a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800546c:	f7fd fc12 	bl	8002c94 <HAL_GetTick>
 8005470:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005472:	e008      	b.n	8005486 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005474:	f7fd fc0e 	bl	8002c94 <HAL_GetTick>
 8005478:	4602      	mov	r2, r0
 800547a:	693b      	ldr	r3, [r7, #16]
 800547c:	1ad3      	subs	r3, r2, r3
 800547e:	2b02      	cmp	r3, #2
 8005480:	d901      	bls.n	8005486 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e1ae      	b.n	80057e4 <HAL_RCC_OscConfig+0x810>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005486:	4b32      	ldr	r3, [pc, #200]	; (8005550 <HAL_RCC_OscConfig+0x57c>)
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800548e:	2b00      	cmp	r3, #0
 8005490:	d0f0      	beq.n	8005474 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	2b01      	cmp	r3, #1
 8005498:	d108      	bne.n	80054ac <HAL_RCC_OscConfig+0x4d8>
 800549a:	4b2c      	ldr	r3, [pc, #176]	; (800554c <HAL_RCC_OscConfig+0x578>)
 800549c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a0:	4a2a      	ldr	r2, [pc, #168]	; (800554c <HAL_RCC_OscConfig+0x578>)
 80054a2:	f043 0301 	orr.w	r3, r3, #1
 80054a6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054aa:	e024      	b.n	80054f6 <HAL_RCC_OscConfig+0x522>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	2b05      	cmp	r3, #5
 80054b2:	d110      	bne.n	80054d6 <HAL_RCC_OscConfig+0x502>
 80054b4:	4b25      	ldr	r3, [pc, #148]	; (800554c <HAL_RCC_OscConfig+0x578>)
 80054b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ba:	4a24      	ldr	r2, [pc, #144]	; (800554c <HAL_RCC_OscConfig+0x578>)
 80054bc:	f043 0304 	orr.w	r3, r3, #4
 80054c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054c4:	4b21      	ldr	r3, [pc, #132]	; (800554c <HAL_RCC_OscConfig+0x578>)
 80054c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ca:	4a20      	ldr	r2, [pc, #128]	; (800554c <HAL_RCC_OscConfig+0x578>)
 80054cc:	f043 0301 	orr.w	r3, r3, #1
 80054d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054d4:	e00f      	b.n	80054f6 <HAL_RCC_OscConfig+0x522>
 80054d6:	4b1d      	ldr	r3, [pc, #116]	; (800554c <HAL_RCC_OscConfig+0x578>)
 80054d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054dc:	4a1b      	ldr	r2, [pc, #108]	; (800554c <HAL_RCC_OscConfig+0x578>)
 80054de:	f023 0301 	bic.w	r3, r3, #1
 80054e2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80054e6:	4b19      	ldr	r3, [pc, #100]	; (800554c <HAL_RCC_OscConfig+0x578>)
 80054e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054ec:	4a17      	ldr	r2, [pc, #92]	; (800554c <HAL_RCC_OscConfig+0x578>)
 80054ee:	f023 0304 	bic.w	r3, r3, #4
 80054f2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d016      	beq.n	800552c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054fe:	f7fd fbc9 	bl	8002c94 <HAL_GetTick>
 8005502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005504:	e00a      	b.n	800551c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005506:	f7fd fbc5 	bl	8002c94 <HAL_GetTick>
 800550a:	4602      	mov	r2, r0
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	1ad3      	subs	r3, r2, r3
 8005510:	f241 3288 	movw	r2, #5000	; 0x1388
 8005514:	4293      	cmp	r3, r2
 8005516:	d901      	bls.n	800551c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e163      	b.n	80057e4 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800551c:	4b0b      	ldr	r3, [pc, #44]	; (800554c <HAL_RCC_OscConfig+0x578>)
 800551e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	2b00      	cmp	r3, #0
 8005528:	d0ed      	beq.n	8005506 <HAL_RCC_OscConfig+0x532>
 800552a:	e01a      	b.n	8005562 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800552c:	f7fd fbb2 	bl	8002c94 <HAL_GetTick>
 8005530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005532:	e00f      	b.n	8005554 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005534:	f7fd fbae 	bl	8002c94 <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005542:	4293      	cmp	r3, r2
 8005544:	d906      	bls.n	8005554 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e14c      	b.n	80057e4 <HAL_RCC_OscConfig+0x810>
 800554a:	bf00      	nop
 800554c:	40021000 	.word	0x40021000
 8005550:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005554:	4ba5      	ldr	r3, [pc, #660]	; (80057ec <HAL_RCC_OscConfig+0x818>)
 8005556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1e8      	bne.n	8005534 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005562:	7ffb      	ldrb	r3, [r7, #31]
 8005564:	2b01      	cmp	r3, #1
 8005566:	d105      	bne.n	8005574 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005568:	4ba0      	ldr	r3, [pc, #640]	; (80057ec <HAL_RCC_OscConfig+0x818>)
 800556a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800556c:	4a9f      	ldr	r2, [pc, #636]	; (80057ec <HAL_RCC_OscConfig+0x818>)
 800556e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005572:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f003 0320 	and.w	r3, r3, #32
 800557c:	2b00      	cmp	r3, #0
 800557e:	d03c      	beq.n	80055fa <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005584:	2b00      	cmp	r3, #0
 8005586:	d01c      	beq.n	80055c2 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005588:	4b98      	ldr	r3, [pc, #608]	; (80057ec <HAL_RCC_OscConfig+0x818>)
 800558a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800558e:	4a97      	ldr	r2, [pc, #604]	; (80057ec <HAL_RCC_OscConfig+0x818>)
 8005590:	f043 0301 	orr.w	r3, r3, #1
 8005594:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005598:	f7fd fb7c 	bl	8002c94 <HAL_GetTick>
 800559c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800559e:	e008      	b.n	80055b2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055a0:	f7fd fb78 	bl	8002c94 <HAL_GetTick>
 80055a4:	4602      	mov	r2, r0
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	1ad3      	subs	r3, r2, r3
 80055aa:	2b02      	cmp	r3, #2
 80055ac:	d901      	bls.n	80055b2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80055ae:	2303      	movs	r3, #3
 80055b0:	e118      	b.n	80057e4 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80055b2:	4b8e      	ldr	r3, [pc, #568]	; (80057ec <HAL_RCC_OscConfig+0x818>)
 80055b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055b8:	f003 0302 	and.w	r3, r3, #2
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d0ef      	beq.n	80055a0 <HAL_RCC_OscConfig+0x5cc>
 80055c0:	e01b      	b.n	80055fa <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80055c2:	4b8a      	ldr	r3, [pc, #552]	; (80057ec <HAL_RCC_OscConfig+0x818>)
 80055c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055c8:	4a88      	ldr	r2, [pc, #544]	; (80057ec <HAL_RCC_OscConfig+0x818>)
 80055ca:	f023 0301 	bic.w	r3, r3, #1
 80055ce:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055d2:	f7fd fb5f 	bl	8002c94 <HAL_GetTick>
 80055d6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055d8:	e008      	b.n	80055ec <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80055da:	f7fd fb5b 	bl	8002c94 <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	693b      	ldr	r3, [r7, #16]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d901      	bls.n	80055ec <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e0fb      	b.n	80057e4 <HAL_RCC_OscConfig+0x810>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80055ec:	4b7f      	ldr	r3, [pc, #508]	; (80057ec <HAL_RCC_OscConfig+0x818>)
 80055ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d1ef      	bne.n	80055da <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055fe:	2b00      	cmp	r3, #0
 8005600:	f000 80ef 	beq.w	80057e2 <HAL_RCC_OscConfig+0x80e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005608:	2b02      	cmp	r3, #2
 800560a:	f040 80c5 	bne.w	8005798 <HAL_RCC_OscConfig+0x7c4>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800560e:	4b77      	ldr	r3, [pc, #476]	; (80057ec <HAL_RCC_OscConfig+0x818>)
 8005610:	68db      	ldr	r3, [r3, #12]
 8005612:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	f003 0203 	and.w	r2, r3, #3
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561e:	429a      	cmp	r2, r3
 8005620:	d12c      	bne.n	800567c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800562c:	3b01      	subs	r3, #1
 800562e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005630:	429a      	cmp	r2, r3
 8005632:	d123      	bne.n	800567c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800563e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005640:	429a      	cmp	r2, r3
 8005642:	d11b      	bne.n	800567c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005650:	429a      	cmp	r2, r3
 8005652:	d113      	bne.n	800567c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800565e:	085b      	lsrs	r3, r3, #1
 8005660:	3b01      	subs	r3, #1
 8005662:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005664:	429a      	cmp	r2, r3
 8005666:	d109      	bne.n	800567c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005672:	085b      	lsrs	r3, r3, #1
 8005674:	3b01      	subs	r3, #1
 8005676:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005678:	429a      	cmp	r2, r3
 800567a:	d067      	beq.n	800574c <HAL_RCC_OscConfig+0x778>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800567c:	69bb      	ldr	r3, [r7, #24]
 800567e:	2b0c      	cmp	r3, #12
 8005680:	d062      	beq.n	8005748 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8005682:	4b5a      	ldr	r3, [pc, #360]	; (80057ec <HAL_RCC_OscConfig+0x818>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800568a:	2b00      	cmp	r3, #0
 800568c:	d001      	beq.n	8005692 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800568e:	2301      	movs	r3, #1
 8005690:	e0a8      	b.n	80057e4 <HAL_RCC_OscConfig+0x810>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005692:	4b56      	ldr	r3, [pc, #344]	; (80057ec <HAL_RCC_OscConfig+0x818>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a55      	ldr	r2, [pc, #340]	; (80057ec <HAL_RCC_OscConfig+0x818>)
 8005698:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800569c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800569e:	f7fd faf9 	bl	8002c94 <HAL_GetTick>
 80056a2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056a4:	e008      	b.n	80056b8 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80056a6:	f7fd faf5 	bl	8002c94 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d901      	bls.n	80056b8 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e095      	b.n	80057e4 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80056b8:	4b4c      	ldr	r3, [pc, #304]	; (80057ec <HAL_RCC_OscConfig+0x818>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d1f0      	bne.n	80056a6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80056c4:	4b49      	ldr	r3, [pc, #292]	; (80057ec <HAL_RCC_OscConfig+0x818>)
 80056c6:	68da      	ldr	r2, [r3, #12]
 80056c8:	4b49      	ldr	r3, [pc, #292]	; (80057f0 <HAL_RCC_OscConfig+0x81c>)
 80056ca:	4013      	ands	r3, r2
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80056d0:	687a      	ldr	r2, [r7, #4]
 80056d2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80056d4:	3a01      	subs	r2, #1
 80056d6:	0112      	lsls	r2, r2, #4
 80056d8:	4311      	orrs	r1, r2
 80056da:	687a      	ldr	r2, [r7, #4]
 80056dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80056de:	0212      	lsls	r2, r2, #8
 80056e0:	4311      	orrs	r1, r2
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80056e6:	0852      	lsrs	r2, r2, #1
 80056e8:	3a01      	subs	r2, #1
 80056ea:	0552      	lsls	r2, r2, #21
 80056ec:	4311      	orrs	r1, r2
 80056ee:	687a      	ldr	r2, [r7, #4]
 80056f0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80056f2:	0852      	lsrs	r2, r2, #1
 80056f4:	3a01      	subs	r2, #1
 80056f6:	0652      	lsls	r2, r2, #25
 80056f8:	4311      	orrs	r1, r2
 80056fa:	687a      	ldr	r2, [r7, #4]
 80056fc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80056fe:	06d2      	lsls	r2, r2, #27
 8005700:	430a      	orrs	r2, r1
 8005702:	493a      	ldr	r1, [pc, #232]	; (80057ec <HAL_RCC_OscConfig+0x818>)
 8005704:	4313      	orrs	r3, r2
 8005706:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005708:	4b38      	ldr	r3, [pc, #224]	; (80057ec <HAL_RCC_OscConfig+0x818>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	4a37      	ldr	r2, [pc, #220]	; (80057ec <HAL_RCC_OscConfig+0x818>)
 800570e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005712:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005714:	4b35      	ldr	r3, [pc, #212]	; (80057ec <HAL_RCC_OscConfig+0x818>)
 8005716:	68db      	ldr	r3, [r3, #12]
 8005718:	4a34      	ldr	r2, [pc, #208]	; (80057ec <HAL_RCC_OscConfig+0x818>)
 800571a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800571e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005720:	f7fd fab8 	bl	8002c94 <HAL_GetTick>
 8005724:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005726:	e008      	b.n	800573a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005728:	f7fd fab4 	bl	8002c94 <HAL_GetTick>
 800572c:	4602      	mov	r2, r0
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	1ad3      	subs	r3, r2, r3
 8005732:	2b02      	cmp	r3, #2
 8005734:	d901      	bls.n	800573a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e054      	b.n	80057e4 <HAL_RCC_OscConfig+0x810>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800573a:	4b2c      	ldr	r3, [pc, #176]	; (80057ec <HAL_RCC_OscConfig+0x818>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005742:	2b00      	cmp	r3, #0
 8005744:	d0f0      	beq.n	8005728 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005746:	e04c      	b.n	80057e2 <HAL_RCC_OscConfig+0x80e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e04b      	b.n	80057e4 <HAL_RCC_OscConfig+0x810>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800574c:	4b27      	ldr	r3, [pc, #156]	; (80057ec <HAL_RCC_OscConfig+0x818>)
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005754:	2b00      	cmp	r3, #0
 8005756:	d144      	bne.n	80057e2 <HAL_RCC_OscConfig+0x80e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005758:	4b24      	ldr	r3, [pc, #144]	; (80057ec <HAL_RCC_OscConfig+0x818>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	4a23      	ldr	r2, [pc, #140]	; (80057ec <HAL_RCC_OscConfig+0x818>)
 800575e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005762:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005764:	4b21      	ldr	r3, [pc, #132]	; (80057ec <HAL_RCC_OscConfig+0x818>)
 8005766:	68db      	ldr	r3, [r3, #12]
 8005768:	4a20      	ldr	r2, [pc, #128]	; (80057ec <HAL_RCC_OscConfig+0x818>)
 800576a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800576e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8005770:	f7fd fa90 	bl	8002c94 <HAL_GetTick>
 8005774:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005776:	e008      	b.n	800578a <HAL_RCC_OscConfig+0x7b6>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005778:	f7fd fa8c 	bl	8002c94 <HAL_GetTick>
 800577c:	4602      	mov	r2, r0
 800577e:	693b      	ldr	r3, [r7, #16]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	2b02      	cmp	r3, #2
 8005784:	d901      	bls.n	800578a <HAL_RCC_OscConfig+0x7b6>
            {
              return HAL_TIMEOUT;
 8005786:	2303      	movs	r3, #3
 8005788:	e02c      	b.n	80057e4 <HAL_RCC_OscConfig+0x810>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800578a:	4b18      	ldr	r3, [pc, #96]	; (80057ec <HAL_RCC_OscConfig+0x818>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005792:	2b00      	cmp	r3, #0
 8005794:	d0f0      	beq.n	8005778 <HAL_RCC_OscConfig+0x7a4>
 8005796:	e024      	b.n	80057e2 <HAL_RCC_OscConfig+0x80e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	2b0c      	cmp	r3, #12
 800579c:	d01f      	beq.n	80057de <HAL_RCC_OscConfig+0x80a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800579e:	4b13      	ldr	r3, [pc, #76]	; (80057ec <HAL_RCC_OscConfig+0x818>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a12      	ldr	r2, [pc, #72]	; (80057ec <HAL_RCC_OscConfig+0x818>)
 80057a4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80057a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057aa:	f7fd fa73 	bl	8002c94 <HAL_GetTick>
 80057ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057b0:	e008      	b.n	80057c4 <HAL_RCC_OscConfig+0x7f0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057b2:	f7fd fa6f 	bl	8002c94 <HAL_GetTick>
 80057b6:	4602      	mov	r2, r0
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b02      	cmp	r3, #2
 80057be:	d901      	bls.n	80057c4 <HAL_RCC_OscConfig+0x7f0>
          {
            return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e00f      	b.n	80057e4 <HAL_RCC_OscConfig+0x810>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80057c4:	4b09      	ldr	r3, [pc, #36]	; (80057ec <HAL_RCC_OscConfig+0x818>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d1f0      	bne.n	80057b2 <HAL_RCC_OscConfig+0x7de>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80057d0:	4b06      	ldr	r3, [pc, #24]	; (80057ec <HAL_RCC_OscConfig+0x818>)
 80057d2:	68da      	ldr	r2, [r3, #12]
 80057d4:	4905      	ldr	r1, [pc, #20]	; (80057ec <HAL_RCC_OscConfig+0x818>)
 80057d6:	4b07      	ldr	r3, [pc, #28]	; (80057f4 <HAL_RCC_OscConfig+0x820>)
 80057d8:	4013      	ands	r3, r2
 80057da:	60cb      	str	r3, [r1, #12]
 80057dc:	e001      	b.n	80057e2 <HAL_RCC_OscConfig+0x80e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80057de:	2301      	movs	r3, #1
 80057e0:	e000      	b.n	80057e4 <HAL_RCC_OscConfig+0x810>
      }
    }
  }
  return HAL_OK;
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	3720      	adds	r7, #32
 80057e8:	46bd      	mov	sp, r7
 80057ea:	bd80      	pop	{r7, pc}
 80057ec:	40021000 	.word	0x40021000
 80057f0:	019d808c 	.word	0x019d808c
 80057f4:	feeefffc 	.word	0xfeeefffc

080057f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d101      	bne.n	800580c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005808:	2301      	movs	r3, #1
 800580a:	e0e7      	b.n	80059dc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800580c:	4b75      	ldr	r3, [pc, #468]	; (80059e4 <HAL_RCC_ClockConfig+0x1ec>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0307 	and.w	r3, r3, #7
 8005814:	683a      	ldr	r2, [r7, #0]
 8005816:	429a      	cmp	r2, r3
 8005818:	d910      	bls.n	800583c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800581a:	4b72      	ldr	r3, [pc, #456]	; (80059e4 <HAL_RCC_ClockConfig+0x1ec>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	f023 0207 	bic.w	r2, r3, #7
 8005822:	4970      	ldr	r1, [pc, #448]	; (80059e4 <HAL_RCC_ClockConfig+0x1ec>)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	4313      	orrs	r3, r2
 8005828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800582a:	4b6e      	ldr	r3, [pc, #440]	; (80059e4 <HAL_RCC_ClockConfig+0x1ec>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	f003 0307 	and.w	r3, r3, #7
 8005832:	683a      	ldr	r2, [r7, #0]
 8005834:	429a      	cmp	r2, r3
 8005836:	d001      	beq.n	800583c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005838:	2301      	movs	r3, #1
 800583a:	e0cf      	b.n	80059dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0302 	and.w	r3, r3, #2
 8005844:	2b00      	cmp	r3, #0
 8005846:	d010      	beq.n	800586a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	689a      	ldr	r2, [r3, #8]
 800584c:	4b66      	ldr	r3, [pc, #408]	; (80059e8 <HAL_RCC_ClockConfig+0x1f0>)
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005854:	429a      	cmp	r2, r3
 8005856:	d908      	bls.n	800586a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005858:	4b63      	ldr	r3, [pc, #396]	; (80059e8 <HAL_RCC_ClockConfig+0x1f0>)
 800585a:	689b      	ldr	r3, [r3, #8]
 800585c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	689b      	ldr	r3, [r3, #8]
 8005864:	4960      	ldr	r1, [pc, #384]	; (80059e8 <HAL_RCC_ClockConfig+0x1f0>)
 8005866:	4313      	orrs	r3, r2
 8005868:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b00      	cmp	r3, #0
 8005874:	d04c      	beq.n	8005910 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	2b03      	cmp	r3, #3
 800587c:	d107      	bne.n	800588e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800587e:	4b5a      	ldr	r3, [pc, #360]	; (80059e8 <HAL_RCC_ClockConfig+0x1f0>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005886:	2b00      	cmp	r3, #0
 8005888:	d121      	bne.n	80058ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e0a6      	b.n	80059dc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	2b02      	cmp	r3, #2
 8005894:	d107      	bne.n	80058a6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005896:	4b54      	ldr	r3, [pc, #336]	; (80059e8 <HAL_RCC_ClockConfig+0x1f0>)
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d115      	bne.n	80058ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e09a      	b.n	80059dc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d107      	bne.n	80058be <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80058ae:	4b4e      	ldr	r3, [pc, #312]	; (80059e8 <HAL_RCC_ClockConfig+0x1f0>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	f003 0302 	and.w	r3, r3, #2
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d109      	bne.n	80058ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e08e      	b.n	80059dc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058be:	4b4a      	ldr	r3, [pc, #296]	; (80059e8 <HAL_RCC_ClockConfig+0x1f0>)
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d101      	bne.n	80058ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80058ca:	2301      	movs	r3, #1
 80058cc:	e086      	b.n	80059dc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80058ce:	4b46      	ldr	r3, [pc, #280]	; (80059e8 <HAL_RCC_ClockConfig+0x1f0>)
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	f023 0203 	bic.w	r2, r3, #3
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	685b      	ldr	r3, [r3, #4]
 80058da:	4943      	ldr	r1, [pc, #268]	; (80059e8 <HAL_RCC_ClockConfig+0x1f0>)
 80058dc:	4313      	orrs	r3, r2
 80058de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058e0:	f7fd f9d8 	bl	8002c94 <HAL_GetTick>
 80058e4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058e6:	e00a      	b.n	80058fe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80058e8:	f7fd f9d4 	bl	8002c94 <HAL_GetTick>
 80058ec:	4602      	mov	r2, r0
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	1ad3      	subs	r3, r2, r3
 80058f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d901      	bls.n	80058fe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80058fa:	2303      	movs	r3, #3
 80058fc:	e06e      	b.n	80059dc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80058fe:	4b3a      	ldr	r3, [pc, #232]	; (80059e8 <HAL_RCC_ClockConfig+0x1f0>)
 8005900:	689b      	ldr	r3, [r3, #8]
 8005902:	f003 020c 	and.w	r2, r3, #12
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	009b      	lsls	r3, r3, #2
 800590c:	429a      	cmp	r2, r3
 800590e:	d1eb      	bne.n	80058e8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0302 	and.w	r3, r3, #2
 8005918:	2b00      	cmp	r3, #0
 800591a:	d010      	beq.n	800593e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	689a      	ldr	r2, [r3, #8]
 8005920:	4b31      	ldr	r3, [pc, #196]	; (80059e8 <HAL_RCC_ClockConfig+0x1f0>)
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005928:	429a      	cmp	r2, r3
 800592a:	d208      	bcs.n	800593e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800592c:	4b2e      	ldr	r3, [pc, #184]	; (80059e8 <HAL_RCC_ClockConfig+0x1f0>)
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	492b      	ldr	r1, [pc, #172]	; (80059e8 <HAL_RCC_ClockConfig+0x1f0>)
 800593a:	4313      	orrs	r3, r2
 800593c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800593e:	4b29      	ldr	r3, [pc, #164]	; (80059e4 <HAL_RCC_ClockConfig+0x1ec>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0307 	and.w	r3, r3, #7
 8005946:	683a      	ldr	r2, [r7, #0]
 8005948:	429a      	cmp	r2, r3
 800594a:	d210      	bcs.n	800596e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800594c:	4b25      	ldr	r3, [pc, #148]	; (80059e4 <HAL_RCC_ClockConfig+0x1ec>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f023 0207 	bic.w	r2, r3, #7
 8005954:	4923      	ldr	r1, [pc, #140]	; (80059e4 <HAL_RCC_ClockConfig+0x1ec>)
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	4313      	orrs	r3, r2
 800595a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800595c:	4b21      	ldr	r3, [pc, #132]	; (80059e4 <HAL_RCC_ClockConfig+0x1ec>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f003 0307 	and.w	r3, r3, #7
 8005964:	683a      	ldr	r2, [r7, #0]
 8005966:	429a      	cmp	r2, r3
 8005968:	d001      	beq.n	800596e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800596a:	2301      	movs	r3, #1
 800596c:	e036      	b.n	80059dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0304 	and.w	r3, r3, #4
 8005976:	2b00      	cmp	r3, #0
 8005978:	d008      	beq.n	800598c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800597a:	4b1b      	ldr	r3, [pc, #108]	; (80059e8 <HAL_RCC_ClockConfig+0x1f0>)
 800597c:	689b      	ldr	r3, [r3, #8]
 800597e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	4918      	ldr	r1, [pc, #96]	; (80059e8 <HAL_RCC_ClockConfig+0x1f0>)
 8005988:	4313      	orrs	r3, r2
 800598a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0308 	and.w	r3, r3, #8
 8005994:	2b00      	cmp	r3, #0
 8005996:	d009      	beq.n	80059ac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005998:	4b13      	ldr	r3, [pc, #76]	; (80059e8 <HAL_RCC_ClockConfig+0x1f0>)
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	00db      	lsls	r3, r3, #3
 80059a6:	4910      	ldr	r1, [pc, #64]	; (80059e8 <HAL_RCC_ClockConfig+0x1f0>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80059ac:	f000 f824 	bl	80059f8 <HAL_RCC_GetSysClockFreq>
 80059b0:	4602      	mov	r2, r0
 80059b2:	4b0d      	ldr	r3, [pc, #52]	; (80059e8 <HAL_RCC_ClockConfig+0x1f0>)
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	091b      	lsrs	r3, r3, #4
 80059b8:	f003 030f 	and.w	r3, r3, #15
 80059bc:	490b      	ldr	r1, [pc, #44]	; (80059ec <HAL_RCC_ClockConfig+0x1f4>)
 80059be:	5ccb      	ldrb	r3, [r1, r3]
 80059c0:	f003 031f 	and.w	r3, r3, #31
 80059c4:	fa22 f303 	lsr.w	r3, r2, r3
 80059c8:	4a09      	ldr	r2, [pc, #36]	; (80059f0 <HAL_RCC_ClockConfig+0x1f8>)
 80059ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80059cc:	4b09      	ldr	r3, [pc, #36]	; (80059f4 <HAL_RCC_ClockConfig+0x1fc>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4618      	mov	r0, r3
 80059d2:	f7fc ffb1 	bl	8002938 <HAL_InitTick>
 80059d6:	4603      	mov	r3, r0
 80059d8:	72fb      	strb	r3, [r7, #11]

  return status;
 80059da:	7afb      	ldrb	r3, [r7, #11]
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	40022000 	.word	0x40022000
 80059e8:	40021000 	.word	0x40021000
 80059ec:	08010268 	.word	0x08010268
 80059f0:	2000011c 	.word	0x2000011c
 80059f4:	20000120 	.word	0x20000120

080059f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80059f8:	b480      	push	{r7}
 80059fa:	b089      	sub	sp, #36	; 0x24
 80059fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80059fe:	2300      	movs	r3, #0
 8005a00:	61fb      	str	r3, [r7, #28]
 8005a02:	2300      	movs	r3, #0
 8005a04:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a06:	4b3e      	ldr	r3, [pc, #248]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a08:	689b      	ldr	r3, [r3, #8]
 8005a0a:	f003 030c 	and.w	r3, r3, #12
 8005a0e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a10:	4b3b      	ldr	r3, [pc, #236]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	f003 0303 	and.w	r3, r3, #3
 8005a18:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d005      	beq.n	8005a2c <HAL_RCC_GetSysClockFreq+0x34>
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	2b0c      	cmp	r3, #12
 8005a24:	d121      	bne.n	8005a6a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d11e      	bne.n	8005a6a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005a2c:	4b34      	ldr	r3, [pc, #208]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f003 0308 	and.w	r3, r3, #8
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d107      	bne.n	8005a48 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005a38:	4b31      	ldr	r3, [pc, #196]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005a3e:	0a1b      	lsrs	r3, r3, #8
 8005a40:	f003 030f 	and.w	r3, r3, #15
 8005a44:	61fb      	str	r3, [r7, #28]
 8005a46:	e005      	b.n	8005a54 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005a48:	4b2d      	ldr	r3, [pc, #180]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	091b      	lsrs	r3, r3, #4
 8005a4e:	f003 030f 	and.w	r3, r3, #15
 8005a52:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005a54:	4a2b      	ldr	r2, [pc, #172]	; (8005b04 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a5c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a5e:	693b      	ldr	r3, [r7, #16]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d10d      	bne.n	8005a80 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005a68:	e00a      	b.n	8005a80 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	2b04      	cmp	r3, #4
 8005a6e:	d102      	bne.n	8005a76 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005a70:	4b25      	ldr	r3, [pc, #148]	; (8005b08 <HAL_RCC_GetSysClockFreq+0x110>)
 8005a72:	61bb      	str	r3, [r7, #24]
 8005a74:	e004      	b.n	8005a80 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	2b08      	cmp	r3, #8
 8005a7a:	d101      	bne.n	8005a80 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005a7c:	4b23      	ldr	r3, [pc, #140]	; (8005b0c <HAL_RCC_GetSysClockFreq+0x114>)
 8005a7e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005a80:	693b      	ldr	r3, [r7, #16]
 8005a82:	2b0c      	cmp	r3, #12
 8005a84:	d134      	bne.n	8005af0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005a86:	4b1e      	ldr	r3, [pc, #120]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	f003 0303 	and.w	r3, r3, #3
 8005a8e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	d003      	beq.n	8005a9e <HAL_RCC_GetSysClockFreq+0xa6>
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	2b03      	cmp	r3, #3
 8005a9a:	d003      	beq.n	8005aa4 <HAL_RCC_GetSysClockFreq+0xac>
 8005a9c:	e005      	b.n	8005aaa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005a9e:	4b1a      	ldr	r3, [pc, #104]	; (8005b08 <HAL_RCC_GetSysClockFreq+0x110>)
 8005aa0:	617b      	str	r3, [r7, #20]
      break;
 8005aa2:	e005      	b.n	8005ab0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005aa4:	4b19      	ldr	r3, [pc, #100]	; (8005b0c <HAL_RCC_GetSysClockFreq+0x114>)
 8005aa6:	617b      	str	r3, [r7, #20]
      break;
 8005aa8:	e002      	b.n	8005ab0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	617b      	str	r3, [r7, #20]
      break;
 8005aae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ab0:	4b13      	ldr	r3, [pc, #76]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	091b      	lsrs	r3, r3, #4
 8005ab6:	f003 0307 	and.w	r3, r3, #7
 8005aba:	3301      	adds	r3, #1
 8005abc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005abe:	4b10      	ldr	r3, [pc, #64]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	0a1b      	lsrs	r3, r3, #8
 8005ac4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ac8:	697a      	ldr	r2, [r7, #20]
 8005aca:	fb02 f203 	mul.w	r2, r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ad4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ad6:	4b0a      	ldr	r3, [pc, #40]	; (8005b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	0e5b      	lsrs	r3, r3, #25
 8005adc:	f003 0303 	and.w	r3, r3, #3
 8005ae0:	3301      	adds	r3, #1
 8005ae2:	005b      	lsls	r3, r3, #1
 8005ae4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	683b      	ldr	r3, [r7, #0]
 8005aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005af0:	69bb      	ldr	r3, [r7, #24]
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	3724      	adds	r7, #36	; 0x24
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	40021000 	.word	0x40021000
 8005b04:	08010280 	.word	0x08010280
 8005b08:	00f42400 	.word	0x00f42400
 8005b0c:	007a1200 	.word	0x007a1200

08005b10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005b10:	b480      	push	{r7}
 8005b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005b14:	4b03      	ldr	r3, [pc, #12]	; (8005b24 <HAL_RCC_GetHCLKFreq+0x14>)
 8005b16:	681b      	ldr	r3, [r3, #0]
}
 8005b18:	4618      	mov	r0, r3
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	2000011c 	.word	0x2000011c

08005b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005b2c:	f7ff fff0 	bl	8005b10 <HAL_RCC_GetHCLKFreq>
 8005b30:	4602      	mov	r2, r0
 8005b32:	4b06      	ldr	r3, [pc, #24]	; (8005b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005b34:	689b      	ldr	r3, [r3, #8]
 8005b36:	0a1b      	lsrs	r3, r3, #8
 8005b38:	f003 0307 	and.w	r3, r3, #7
 8005b3c:	4904      	ldr	r1, [pc, #16]	; (8005b50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005b3e:	5ccb      	ldrb	r3, [r1, r3]
 8005b40:	f003 031f 	and.w	r3, r3, #31
 8005b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	bd80      	pop	{r7, pc}
 8005b4c:	40021000 	.word	0x40021000
 8005b50:	08010278 	.word	0x08010278

08005b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005b58:	f7ff ffda 	bl	8005b10 <HAL_RCC_GetHCLKFreq>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	4b06      	ldr	r3, [pc, #24]	; (8005b78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	0adb      	lsrs	r3, r3, #11
 8005b64:	f003 0307 	and.w	r3, r3, #7
 8005b68:	4904      	ldr	r1, [pc, #16]	; (8005b7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8005b6a:	5ccb      	ldrb	r3, [r1, r3]
 8005b6c:	f003 031f 	and.w	r3, r3, #31
 8005b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005b74:	4618      	mov	r0, r3
 8005b76:	bd80      	pop	{r7, pc}
 8005b78:	40021000 	.word	0x40021000
 8005b7c:	08010278 	.word	0x08010278

08005b80 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
 8005b88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	220f      	movs	r2, #15
 8005b8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005b90:	4b12      	ldr	r3, [pc, #72]	; (8005bdc <HAL_RCC_GetClockConfig+0x5c>)
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f003 0203 	and.w	r2, r3, #3
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005b9c:	4b0f      	ldr	r3, [pc, #60]	; (8005bdc <HAL_RCC_GetClockConfig+0x5c>)
 8005b9e:	689b      	ldr	r3, [r3, #8]
 8005ba0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005ba8:	4b0c      	ldr	r3, [pc, #48]	; (8005bdc <HAL_RCC_GetClockConfig+0x5c>)
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005bb4:	4b09      	ldr	r3, [pc, #36]	; (8005bdc <HAL_RCC_GetClockConfig+0x5c>)
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	08db      	lsrs	r3, r3, #3
 8005bba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005bc2:	4b07      	ldr	r3, [pc, #28]	; (8005be0 <HAL_RCC_GetClockConfig+0x60>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0207 	and.w	r2, r3, #7
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	601a      	str	r2, [r3, #0]
}
 8005bce:	bf00      	nop
 8005bd0:	370c      	adds	r7, #12
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	40021000 	.word	0x40021000
 8005be0:	40022000 	.word	0x40022000

08005be4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b086      	sub	sp, #24
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005bec:	2300      	movs	r3, #0
 8005bee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005bf0:	4b2a      	ldr	r3, [pc, #168]	; (8005c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005bf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d003      	beq.n	8005c04 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005bfc:	f7ff f986 	bl	8004f0c <HAL_PWREx_GetVoltageRange>
 8005c00:	6178      	str	r0, [r7, #20]
 8005c02:	e014      	b.n	8005c2e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005c04:	4b25      	ldr	r3, [pc, #148]	; (8005c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c08:	4a24      	ldr	r2, [pc, #144]	; (8005c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c0e:	6593      	str	r3, [r2, #88]	; 0x58
 8005c10:	4b22      	ldr	r3, [pc, #136]	; (8005c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c18:	60fb      	str	r3, [r7, #12]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005c1c:	f7ff f976 	bl	8004f0c <HAL_PWREx_GetVoltageRange>
 8005c20:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005c22:	4b1e      	ldr	r3, [pc, #120]	; (8005c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c26:	4a1d      	ldr	r2, [pc, #116]	; (8005c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005c28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005c2c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c34:	d10b      	bne.n	8005c4e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2b80      	cmp	r3, #128	; 0x80
 8005c3a:	d919      	bls.n	8005c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2ba0      	cmp	r3, #160	; 0xa0
 8005c40:	d902      	bls.n	8005c48 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c42:	2302      	movs	r3, #2
 8005c44:	613b      	str	r3, [r7, #16]
 8005c46:	e013      	b.n	8005c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c48:	2301      	movs	r3, #1
 8005c4a:	613b      	str	r3, [r7, #16]
 8005c4c:	e010      	b.n	8005c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2b80      	cmp	r3, #128	; 0x80
 8005c52:	d902      	bls.n	8005c5a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005c54:	2303      	movs	r3, #3
 8005c56:	613b      	str	r3, [r7, #16]
 8005c58:	e00a      	b.n	8005c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b80      	cmp	r3, #128	; 0x80
 8005c5e:	d102      	bne.n	8005c66 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005c60:	2302      	movs	r3, #2
 8005c62:	613b      	str	r3, [r7, #16]
 8005c64:	e004      	b.n	8005c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	2b70      	cmp	r3, #112	; 0x70
 8005c6a:	d101      	bne.n	8005c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005c6c:	2301      	movs	r3, #1
 8005c6e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005c70:	4b0b      	ldr	r3, [pc, #44]	; (8005ca0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f023 0207 	bic.w	r2, r3, #7
 8005c78:	4909      	ldr	r1, [pc, #36]	; (8005ca0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	4313      	orrs	r3, r2
 8005c7e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005c80:	4b07      	ldr	r3, [pc, #28]	; (8005ca0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f003 0307 	and.w	r3, r3, #7
 8005c88:	693a      	ldr	r2, [r7, #16]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d001      	beq.n	8005c92 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e000      	b.n	8005c94 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8005c92:	2300      	movs	r3, #0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3718      	adds	r7, #24
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	40021000 	.word	0x40021000
 8005ca0:	40022000 	.word	0x40022000

08005ca4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b086      	sub	sp, #24
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005cac:	2300      	movs	r3, #0
 8005cae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d031      	beq.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cc4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005cc8:	d01a      	beq.n	8005d00 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8005cca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005cce:	d814      	bhi.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x56>
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d009      	beq.n	8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8005cd4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005cd8:	d10f      	bne.n	8005cfa <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8005cda:	4bac      	ldr	r3, [pc, #688]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005cdc:	68db      	ldr	r3, [r3, #12]
 8005cde:	4aab      	ldr	r2, [pc, #684]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005ce0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005ce4:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005ce6:	e00c      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	3304      	adds	r3, #4
 8005cec:	2100      	movs	r1, #0
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f000 f9dc 	bl	80060ac <RCCEx_PLLSAI1_Config>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005cf8:	e003      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	74fb      	strb	r3, [r7, #19]
      break;
 8005cfe:	e000      	b.n	8005d02 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8005d00:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005d02:	7cfb      	ldrb	r3, [r7, #19]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d10b      	bne.n	8005d20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005d08:	4ba0      	ldr	r3, [pc, #640]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d0e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d16:	499d      	ldr	r1, [pc, #628]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005d1e:	e001      	b.n	8005d24 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005d20:	7cfb      	ldrb	r3, [r7, #19]
 8005d22:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	f000 8099 	beq.w	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d32:	2300      	movs	r3, #0
 8005d34:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005d36:	4b95      	ldr	r3, [pc, #596]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d101      	bne.n	8005d46 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8005d42:	2301      	movs	r3, #1
 8005d44:	e000      	b.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8005d46:	2300      	movs	r3, #0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00d      	beq.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d4c:	4b8f      	ldr	r3, [pc, #572]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005d4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d50:	4a8e      	ldr	r2, [pc, #568]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005d52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d56:	6593      	str	r3, [r2, #88]	; 0x58
 8005d58:	4b8c      	ldr	r3, [pc, #560]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d60:	60bb      	str	r3, [r7, #8]
 8005d62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d64:	2301      	movs	r3, #1
 8005d66:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d68:	4b89      	ldr	r3, [pc, #548]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	4a88      	ldr	r2, [pc, #544]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005d6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d72:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d74:	f7fc ff8e 	bl	8002c94 <HAL_GetTick>
 8005d78:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005d7a:	e009      	b.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d7c:	f7fc ff8a 	bl	8002c94 <HAL_GetTick>
 8005d80:	4602      	mov	r2, r0
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	1ad3      	subs	r3, r2, r3
 8005d86:	2b02      	cmp	r3, #2
 8005d88:	d902      	bls.n	8005d90 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	74fb      	strb	r3, [r7, #19]
        break;
 8005d8e:	e005      	b.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005d90:	4b7f      	ldr	r3, [pc, #508]	; (8005f90 <HAL_RCCEx_PeriphCLKConfig+0x2ec>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d0ef      	beq.n	8005d7c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8005d9c:	7cfb      	ldrb	r3, [r7, #19]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d155      	bne.n	8005e4e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005da2:	4b7a      	ldr	r3, [pc, #488]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005da8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dac:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005dae:	697b      	ldr	r3, [r7, #20]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d01e      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	429a      	cmp	r2, r3
 8005dbc:	d019      	beq.n	8005df2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005dbe:	4b73      	ldr	r3, [pc, #460]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dc8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005dca:	4b70      	ldr	r3, [pc, #448]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dd0:	4a6e      	ldr	r2, [pc, #440]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005dd2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005dda:	4b6c      	ldr	r3, [pc, #432]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005de0:	4a6a      	ldr	r2, [pc, #424]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005de2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005de6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005dea:	4a68      	ldr	r2, [pc, #416]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005dec:	697b      	ldr	r3, [r7, #20]
 8005dee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d016      	beq.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dfc:	f7fc ff4a 	bl	8002c94 <HAL_GetTick>
 8005e00:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e02:	e00b      	b.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e04:	f7fc ff46 	bl	8002c94 <HAL_GetTick>
 8005e08:	4602      	mov	r2, r0
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	1ad3      	subs	r3, r2, r3
 8005e0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e12:	4293      	cmp	r3, r2
 8005e14:	d902      	bls.n	8005e1c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8005e16:	2303      	movs	r3, #3
 8005e18:	74fb      	strb	r3, [r7, #19]
            break;
 8005e1a:	e006      	b.n	8005e2a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e1c:	4b5b      	ldr	r3, [pc, #364]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e22:	f003 0302 	and.w	r3, r3, #2
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d0ec      	beq.n	8005e04 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8005e2a:	7cfb      	ldrb	r3, [r7, #19]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d10b      	bne.n	8005e48 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e30:	4b56      	ldr	r3, [pc, #344]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e36:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e3e:	4953      	ldr	r1, [pc, #332]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005e40:	4313      	orrs	r3, r2
 8005e42:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005e46:	e004      	b.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e48:	7cfb      	ldrb	r3, [r7, #19]
 8005e4a:	74bb      	strb	r3, [r7, #18]
 8005e4c:	e001      	b.n	8005e52 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e4e:	7cfb      	ldrb	r3, [r7, #19]
 8005e50:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e52:	7c7b      	ldrb	r3, [r7, #17]
 8005e54:	2b01      	cmp	r3, #1
 8005e56:	d105      	bne.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e58:	4b4c      	ldr	r3, [pc, #304]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e5c:	4a4b      	ldr	r2, [pc, #300]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005e5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e62:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f003 0301 	and.w	r3, r3, #1
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d00a      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e70:	4b46      	ldr	r3, [pc, #280]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e76:	f023 0203 	bic.w	r2, r3, #3
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6a1b      	ldr	r3, [r3, #32]
 8005e7e:	4943      	ldr	r1, [pc, #268]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005e80:	4313      	orrs	r3, r2
 8005e82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f003 0302 	and.w	r3, r3, #2
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00a      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x204>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e92:	4b3e      	ldr	r3, [pc, #248]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005e94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005e98:	f023 020c 	bic.w	r2, r3, #12
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea0:	493a      	ldr	r1, [pc, #232]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f003 0320 	and.w	r3, r3, #32
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d00a      	beq.n	8005eca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005eb4:	4b35      	ldr	r3, [pc, #212]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005eb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005eba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec2:	4932      	ldr	r1, [pc, #200]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005ec4:	4313      	orrs	r3, r2
 8005ec6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00a      	beq.n	8005eec <HAL_RCCEx_PeriphCLKConfig+0x248>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005ed6:	4b2d      	ldr	r3, [pc, #180]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005ed8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005edc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ee4:	4929      	ldr	r1, [pc, #164]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d00a      	beq.n	8005f0e <HAL_RCCEx_PeriphCLKConfig+0x26a>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005ef8:	4b24      	ldr	r3, [pc, #144]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005efe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f06:	4921      	ldr	r1, [pc, #132]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d00a      	beq.n	8005f30 <HAL_RCCEx_PeriphCLKConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f1a:	4b1c      	ldr	r3, [pc, #112]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005f1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f20:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f28:	4918      	ldr	r1, [pc, #96]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005f2a:	4313      	orrs	r3, r2
 8005f2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00a      	beq.n	8005f52 <HAL_RCCEx_PeriphCLKConfig+0x2ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f3c:	4b13      	ldr	r3, [pc, #76]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005f3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f4a:	4910      	ldr	r1, [pc, #64]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005f4c:	4313      	orrs	r3, r2
 8005f4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d02c      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x314>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005f5e:	4b0b      	ldr	r3, [pc, #44]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f64:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f6c:	4907      	ldr	r1, [pc, #28]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f7c:	d10a      	bne.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f7e:	4b03      	ldr	r3, [pc, #12]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	4a02      	ldr	r2, [pc, #8]	; (8005f8c <HAL_RCCEx_PeriphCLKConfig+0x2e8>)
 8005f84:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005f88:	60d3      	str	r3, [r2, #12]
 8005f8a:	e015      	b.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x314>
 8005f8c:	40021000 	.word	0x40021000
 8005f90:	40007000 	.word	0x40007000
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005f9c:	d10c      	bne.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x314>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	3304      	adds	r3, #4
 8005fa2:	2101      	movs	r1, #1
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f000 f881 	bl	80060ac <RCCEx_PLLSAI1_Config>
 8005faa:	4603      	mov	r3, r0
 8005fac:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005fae:	7cfb      	ldrb	r3, [r7, #19]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d001      	beq.n	8005fb8 <HAL_RCCEx_PeriphCLKConfig+0x314>
        {
          /* set overall return value */
          status = ret;
 8005fb4:	7cfb      	ldrb	r3, [r7, #19]
 8005fb6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d028      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005fc4:	4b30      	ldr	r3, [pc, #192]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd2:	492d      	ldr	r1, [pc, #180]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fde:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005fe2:	d106      	bne.n	8005ff2 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005fe4:	4b28      	ldr	r3, [pc, #160]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	4a27      	ldr	r2, [pc, #156]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8005fea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005fee:	60d3      	str	r3, [r2, #12]
 8005ff0:	e011      	b.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x372>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ff6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ffa:	d10c      	bne.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	3304      	adds	r3, #4
 8006000:	2101      	movs	r1, #1
 8006002:	4618      	mov	r0, r3
 8006004:	f000 f852 	bl	80060ac <RCCEx_PLLSAI1_Config>
 8006008:	4603      	mov	r3, r0
 800600a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800600c:	7cfb      	ldrb	r3, [r7, #19]
 800600e:	2b00      	cmp	r3, #0
 8006010:	d001      	beq.n	8006016 <HAL_RCCEx_PeriphCLKConfig+0x372>
      {
        /* set overall return value */
        status = ret;
 8006012:	7cfb      	ldrb	r3, [r7, #19]
 8006014:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800601e:	2b00      	cmp	r3, #0
 8006020:	d01c      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006022:	4b19      	ldr	r3, [pc, #100]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006024:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006028:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006030:	4915      	ldr	r1, [pc, #84]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006032:	4313      	orrs	r3, r2
 8006034:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800603c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006040:	d10c      	bne.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	3304      	adds	r3, #4
 8006046:	2102      	movs	r1, #2
 8006048:	4618      	mov	r0, r3
 800604a:	f000 f82f 	bl	80060ac <RCCEx_PLLSAI1_Config>
 800604e:	4603      	mov	r3, r0
 8006050:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8006052:	7cfb      	ldrb	r3, [r7, #19]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d001      	beq.n	800605c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
      {
        /* set overall return value */
        status = ret;
 8006058:	7cfb      	ldrb	r3, [r7, #19]
 800605a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006064:	2b00      	cmp	r3, #0
 8006066:	d00a      	beq.n	800607e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8006068:	4b07      	ldr	r3, [pc, #28]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800606a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800606e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006076:	4904      	ldr	r1, [pc, #16]	; (8006088 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8006078:	4313      	orrs	r3, r2
 800607a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800607e:	7cbb      	ldrb	r3, [r7, #18]
}
 8006080:	4618      	mov	r0, r3
 8006082:	3718      	adds	r7, #24
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}
 8006088:	40021000 	.word	0x40021000

0800608c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800608c:	b480      	push	{r7}
 800608e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8006090:	4b05      	ldr	r3, [pc, #20]	; (80060a8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	4a04      	ldr	r2, [pc, #16]	; (80060a8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8006096:	f043 0304 	orr.w	r3, r3, #4
 800609a:	6013      	str	r3, [r2, #0]
}
 800609c:	bf00      	nop
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr
 80060a6:	bf00      	nop
 80060a8:	40021000 	.word	0x40021000

080060ac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80060b6:	2300      	movs	r3, #0
 80060b8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80060ba:	4b74      	ldr	r3, [pc, #464]	; (800628c <RCCEx_PLLSAI1_Config+0x1e0>)
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	f003 0303 	and.w	r3, r3, #3
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d018      	beq.n	80060f8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80060c6:	4b71      	ldr	r3, [pc, #452]	; (800628c <RCCEx_PLLSAI1_Config+0x1e0>)
 80060c8:	68db      	ldr	r3, [r3, #12]
 80060ca:	f003 0203 	and.w	r2, r3, #3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	429a      	cmp	r2, r3
 80060d4:	d10d      	bne.n	80060f2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
       ||
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d009      	beq.n	80060f2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80060de:	4b6b      	ldr	r3, [pc, #428]	; (800628c <RCCEx_PLLSAI1_Config+0x1e0>)
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	091b      	lsrs	r3, r3, #4
 80060e4:	f003 0307 	and.w	r3, r3, #7
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	685b      	ldr	r3, [r3, #4]
       ||
 80060ee:	429a      	cmp	r2, r3
 80060f0:	d047      	beq.n	8006182 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80060f2:	2301      	movs	r3, #1
 80060f4:	73fb      	strb	r3, [r7, #15]
 80060f6:	e044      	b.n	8006182 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	2b03      	cmp	r3, #3
 80060fe:	d018      	beq.n	8006132 <RCCEx_PLLSAI1_Config+0x86>
 8006100:	2b03      	cmp	r3, #3
 8006102:	d825      	bhi.n	8006150 <RCCEx_PLLSAI1_Config+0xa4>
 8006104:	2b01      	cmp	r3, #1
 8006106:	d002      	beq.n	800610e <RCCEx_PLLSAI1_Config+0x62>
 8006108:	2b02      	cmp	r3, #2
 800610a:	d009      	beq.n	8006120 <RCCEx_PLLSAI1_Config+0x74>
 800610c:	e020      	b.n	8006150 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800610e:	4b5f      	ldr	r3, [pc, #380]	; (800628c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0302 	and.w	r3, r3, #2
 8006116:	2b00      	cmp	r3, #0
 8006118:	d11d      	bne.n	8006156 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800611e:	e01a      	b.n	8006156 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8006120:	4b5a      	ldr	r3, [pc, #360]	; (800628c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006128:	2b00      	cmp	r3, #0
 800612a:	d116      	bne.n	800615a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800612c:	2301      	movs	r3, #1
 800612e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006130:	e013      	b.n	800615a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006132:	4b56      	ldr	r3, [pc, #344]	; (800628c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10f      	bne.n	800615e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800613e:	4b53      	ldr	r3, [pc, #332]	; (800628c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d109      	bne.n	800615e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800614e:	e006      	b.n	800615e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	73fb      	strb	r3, [r7, #15]
      break;
 8006154:	e004      	b.n	8006160 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8006156:	bf00      	nop
 8006158:	e002      	b.n	8006160 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800615a:	bf00      	nop
 800615c:	e000      	b.n	8006160 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800615e:	bf00      	nop
    }

    if(status == HAL_OK)
 8006160:	7bfb      	ldrb	r3, [r7, #15]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d10d      	bne.n	8006182 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8006166:	4b49      	ldr	r3, [pc, #292]	; (800628c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006168:	68db      	ldr	r3, [r3, #12]
 800616a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	6819      	ldr	r1, [r3, #0]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	3b01      	subs	r3, #1
 8006178:	011b      	lsls	r3, r3, #4
 800617a:	430b      	orrs	r3, r1
 800617c:	4943      	ldr	r1, [pc, #268]	; (800628c <RCCEx_PLLSAI1_Config+0x1e0>)
 800617e:	4313      	orrs	r3, r2
 8006180:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8006182:	7bfb      	ldrb	r3, [r7, #15]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d17c      	bne.n	8006282 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006188:	4b40      	ldr	r3, [pc, #256]	; (800628c <RCCEx_PLLSAI1_Config+0x1e0>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4a3f      	ldr	r2, [pc, #252]	; (800628c <RCCEx_PLLSAI1_Config+0x1e0>)
 800618e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006192:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006194:	f7fc fd7e 	bl	8002c94 <HAL_GetTick>
 8006198:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800619a:	e009      	b.n	80061b0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800619c:	f7fc fd7a 	bl	8002c94 <HAL_GetTick>
 80061a0:	4602      	mov	r2, r0
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	1ad3      	subs	r3, r2, r3
 80061a6:	2b02      	cmp	r3, #2
 80061a8:	d902      	bls.n	80061b0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80061aa:	2303      	movs	r3, #3
 80061ac:	73fb      	strb	r3, [r7, #15]
        break;
 80061ae:	e005      	b.n	80061bc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80061b0:	4b36      	ldr	r3, [pc, #216]	; (800628c <RCCEx_PLLSAI1_Config+0x1e0>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d1ef      	bne.n	800619c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80061bc:	7bfb      	ldrb	r3, [r7, #15]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d15f      	bne.n	8006282 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d110      	bne.n	80061ea <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80061c8:	4b30      	ldr	r3, [pc, #192]	; (800628c <RCCEx_PLLSAI1_Config+0x1e0>)
 80061ca:	691b      	ldr	r3, [r3, #16]
 80061cc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80061d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	6892      	ldr	r2, [r2, #8]
 80061d8:	0211      	lsls	r1, r2, #8
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	68d2      	ldr	r2, [r2, #12]
 80061de:	06d2      	lsls	r2, r2, #27
 80061e0:	430a      	orrs	r2, r1
 80061e2:	492a      	ldr	r1, [pc, #168]	; (800628c <RCCEx_PLLSAI1_Config+0x1e0>)
 80061e4:	4313      	orrs	r3, r2
 80061e6:	610b      	str	r3, [r1, #16]
 80061e8:	e027      	b.n	800623a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80061ea:	683b      	ldr	r3, [r7, #0]
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d112      	bne.n	8006216 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80061f0:	4b26      	ldr	r3, [pc, #152]	; (800628c <RCCEx_PLLSAI1_Config+0x1e0>)
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80061f8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	6892      	ldr	r2, [r2, #8]
 8006200:	0211      	lsls	r1, r2, #8
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	6912      	ldr	r2, [r2, #16]
 8006206:	0852      	lsrs	r2, r2, #1
 8006208:	3a01      	subs	r2, #1
 800620a:	0552      	lsls	r2, r2, #21
 800620c:	430a      	orrs	r2, r1
 800620e:	491f      	ldr	r1, [pc, #124]	; (800628c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006210:	4313      	orrs	r3, r2
 8006212:	610b      	str	r3, [r1, #16]
 8006214:	e011      	b.n	800623a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006216:	4b1d      	ldr	r3, [pc, #116]	; (800628c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006218:	691b      	ldr	r3, [r3, #16]
 800621a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800621e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8006222:	687a      	ldr	r2, [r7, #4]
 8006224:	6892      	ldr	r2, [r2, #8]
 8006226:	0211      	lsls	r1, r2, #8
 8006228:	687a      	ldr	r2, [r7, #4]
 800622a:	6952      	ldr	r2, [r2, #20]
 800622c:	0852      	lsrs	r2, r2, #1
 800622e:	3a01      	subs	r2, #1
 8006230:	0652      	lsls	r2, r2, #25
 8006232:	430a      	orrs	r2, r1
 8006234:	4915      	ldr	r1, [pc, #84]	; (800628c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006236:	4313      	orrs	r3, r2
 8006238:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800623a:	4b14      	ldr	r3, [pc, #80]	; (800628c <RCCEx_PLLSAI1_Config+0x1e0>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a13      	ldr	r2, [pc, #76]	; (800628c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006240:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006244:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006246:	f7fc fd25 	bl	8002c94 <HAL_GetTick>
 800624a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800624c:	e009      	b.n	8006262 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800624e:	f7fc fd21 	bl	8002c94 <HAL_GetTick>
 8006252:	4602      	mov	r2, r0
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	1ad3      	subs	r3, r2, r3
 8006258:	2b02      	cmp	r3, #2
 800625a:	d902      	bls.n	8006262 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800625c:	2303      	movs	r3, #3
 800625e:	73fb      	strb	r3, [r7, #15]
          break;
 8006260:	e005      	b.n	800626e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006262:	4b0a      	ldr	r3, [pc, #40]	; (800628c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d0ef      	beq.n	800624e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800626e:	7bfb      	ldrb	r3, [r7, #15]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d106      	bne.n	8006282 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006274:	4b05      	ldr	r3, [pc, #20]	; (800628c <RCCEx_PLLSAI1_Config+0x1e0>)
 8006276:	691a      	ldr	r2, [r3, #16]
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	699b      	ldr	r3, [r3, #24]
 800627c:	4903      	ldr	r1, [pc, #12]	; (800628c <RCCEx_PLLSAI1_Config+0x1e0>)
 800627e:	4313      	orrs	r3, r2
 8006280:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006282:	7bfb      	ldrb	r3, [r7, #15]
}
 8006284:	4618      	mov	r0, r3
 8006286:	3710      	adds	r7, #16
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	40021000 	.word	0x40021000

08006290 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
#if defined(RNG_CR_CONDRST)
  uint32_t cr_value;
#endif  /* RNG_CR_CONDRST */
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d101      	bne.n	80062a2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800629e:	2301      	movs	r3, #1
 80062a0:	e049      	b.n	8006336 <HAL_RNG_Init+0xa6>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	795b      	ldrb	r3, [r3, #5]
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d105      	bne.n	80062b8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f7fc fa6a 	bl	800278c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	2202      	movs	r2, #2
 80062bc:	715a      	strb	r2, [r3, #5]
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* defined(RNG_CR_CED) */
#endif /* end of RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	681a      	ldr	r2, [r3, #0]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f042 0204 	orr.w	r2, r2, #4
 80062cc:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062d8:	2b40      	cmp	r3, #64	; 0x40
 80062da:	d104      	bne.n	80062e6 <HAL_RNG_Init+0x56>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2204      	movs	r2, #4
 80062e0:	715a      	strb	r2, [r3, #5]
    return HAL_ERROR;
 80062e2:	2301      	movs	r3, #1
 80062e4:	e027      	b.n	8006336 <HAL_RNG_Init+0xa6>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80062e6:	f7fc fcd5 	bl	8002c94 <HAL_GetTick>
 80062ea:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80062ec:	e015      	b.n	800631a <HAL_RNG_Init+0x8a>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80062ee:	f7fc fcd1 	bl	8002c94 <HAL_GetTick>
 80062f2:	4602      	mov	r2, r0
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	1ad3      	subs	r3, r2, r3
 80062f8:	2b02      	cmp	r3, #2
 80062fa:	d90e      	bls.n	800631a <HAL_RNG_Init+0x8a>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	685b      	ldr	r3, [r3, #4]
 8006302:	f003 0304 	and.w	r3, r3, #4
 8006306:	2b04      	cmp	r3, #4
 8006308:	d107      	bne.n	800631a <HAL_RNG_Init+0x8a>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2204      	movs	r2, #4
 800630e:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2202      	movs	r2, #2
 8006314:	609a      	str	r2, [r3, #8]
        return HAL_ERROR;
 8006316:	2301      	movs	r3, #1
 8006318:	e00d      	b.n	8006336 <HAL_RNG_Init+0xa6>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	f003 0304 	and.w	r3, r3, #4
 8006324:	2b04      	cmp	r3, #4
 8006326:	d0e2      	beq.n	80062ee <HAL_RNG_Init+0x5e>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	2200      	movs	r2, #0
 8006332:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}

0800633e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b084      	sub	sp, #16
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d101      	bne.n	8006350 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e095      	b.n	800647c <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006354:	2b00      	cmp	r3, #0
 8006356:	d108      	bne.n	800636a <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	685b      	ldr	r3, [r3, #4]
 800635c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006360:	d009      	beq.n	8006376 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	61da      	str	r2, [r3, #28]
 8006368:	e005      	b.n	8006376 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2200      	movs	r2, #0
 800636e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006382:	b2db      	uxtb	r3, r3
 8006384:	2b00      	cmp	r3, #0
 8006386:	d106      	bne.n	8006396 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2200      	movs	r2, #0
 800638c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f7fc fa1b 	bl	80027cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2202      	movs	r2, #2
 800639a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063ac:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	68db      	ldr	r3, [r3, #12]
 80063b2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80063b6:	d902      	bls.n	80063be <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80063b8:	2300      	movs	r3, #0
 80063ba:	60fb      	str	r3, [r7, #12]
 80063bc:	e002      	b.n	80063c4 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80063be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80063c2:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80063cc:	d007      	beq.n	80063de <HAL_SPI_Init+0xa0>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80063d6:	d002      	beq.n	80063de <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	685b      	ldr	r3, [r3, #4]
 80063e2:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80063ee:	431a      	orrs	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	691b      	ldr	r3, [r3, #16]
 80063f4:	f003 0302 	and.w	r3, r3, #2
 80063f8:	431a      	orrs	r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	695b      	ldr	r3, [r3, #20]
 80063fe:	f003 0301 	and.w	r3, r3, #1
 8006402:	431a      	orrs	r2, r3
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	699b      	ldr	r3, [r3, #24]
 8006408:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800640c:	431a      	orrs	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	69db      	ldr	r3, [r3, #28]
 8006412:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006416:	431a      	orrs	r2, r3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6a1b      	ldr	r3, [r3, #32]
 800641c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006420:	ea42 0103 	orr.w	r1, r2, r3
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006428:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	430a      	orrs	r2, r1
 8006432:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	699b      	ldr	r3, [r3, #24]
 8006438:	0c1b      	lsrs	r3, r3, #16
 800643a:	f003 0204 	and.w	r2, r3, #4
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006442:	f003 0310 	and.w	r3, r3, #16
 8006446:	431a      	orrs	r2, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800644c:	f003 0308 	and.w	r3, r3, #8
 8006450:	431a      	orrs	r2, r3
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	68db      	ldr	r3, [r3, #12]
 8006456:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800645a:	ea42 0103 	orr.w	r1, r2, r3
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	430a      	orrs	r2, r1
 800646a:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	2201      	movs	r2, #1
 8006476:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800647a:	2300      	movs	r3, #0
}
 800647c:	4618      	mov	r0, r3
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b088      	sub	sp, #32
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	603b      	str	r3, [r7, #0]
 8006490:	4613      	mov	r3, r2
 8006492:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006494:	2300      	movs	r3, #0
 8006496:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800649e:	2b01      	cmp	r3, #1
 80064a0:	d101      	bne.n	80064a6 <HAL_SPI_Transmit+0x22>
 80064a2:	2302      	movs	r3, #2
 80064a4:	e158      	b.n	8006758 <HAL_SPI_Transmit+0x2d4>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2201      	movs	r2, #1
 80064aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80064ae:	f7fc fbf1 	bl	8002c94 <HAL_GetTick>
 80064b2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80064b4:	88fb      	ldrh	r3, [r7, #6]
 80064b6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d002      	beq.n	80064ca <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80064c4:	2302      	movs	r3, #2
 80064c6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80064c8:	e13d      	b.n	8006746 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d002      	beq.n	80064d6 <HAL_SPI_Transmit+0x52>
 80064d0:	88fb      	ldrh	r3, [r7, #6]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d102      	bne.n	80064dc <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80064d6:	2301      	movs	r3, #1
 80064d8:	77fb      	strb	r3, [r7, #31]
    goto error;
 80064da:	e134      	b.n	8006746 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2203      	movs	r2, #3
 80064e0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2200      	movs	r2, #0
 80064e8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	88fa      	ldrh	r2, [r7, #6]
 80064f4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	88fa      	ldrh	r2, [r7, #6]
 80064fa:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2200      	movs	r2, #0
 8006500:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2200      	movs	r2, #0
 800650e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2200      	movs	r2, #0
 800651c:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	689b      	ldr	r3, [r3, #8]
 8006522:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006526:	d10f      	bne.n	8006548 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006536:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006546:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006552:	2b40      	cmp	r3, #64	; 0x40
 8006554:	d007      	beq.n	8006566 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006564:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	68db      	ldr	r3, [r3, #12]
 800656a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800656e:	d94b      	bls.n	8006608 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d002      	beq.n	800657e <HAL_SPI_Transmit+0xfa>
 8006578:	8afb      	ldrh	r3, [r7, #22]
 800657a:	2b01      	cmp	r3, #1
 800657c:	d13e      	bne.n	80065fc <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006582:	881a      	ldrh	r2, [r3, #0]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800658e:	1c9a      	adds	r2, r3, #2
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006598:	b29b      	uxth	r3, r3
 800659a:	3b01      	subs	r3, #1
 800659c:	b29a      	uxth	r2, r3
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80065a2:	e02b      	b.n	80065fc <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	689b      	ldr	r3, [r3, #8]
 80065aa:	f003 0302 	and.w	r3, r3, #2
 80065ae:	2b02      	cmp	r3, #2
 80065b0:	d112      	bne.n	80065d8 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b6:	881a      	ldrh	r2, [r3, #0]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c2:	1c9a      	adds	r2, r3, #2
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065cc:	b29b      	uxth	r3, r3
 80065ce:	3b01      	subs	r3, #1
 80065d0:	b29a      	uxth	r2, r3
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065d6:	e011      	b.n	80065fc <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80065d8:	f7fc fb5c 	bl	8002c94 <HAL_GetTick>
 80065dc:	4602      	mov	r2, r0
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	1ad3      	subs	r3, r2, r3
 80065e2:	683a      	ldr	r2, [r7, #0]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	d803      	bhi.n	80065f0 <HAL_SPI_Transmit+0x16c>
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065ee:	d102      	bne.n	80065f6 <HAL_SPI_Transmit+0x172>
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d102      	bne.n	80065fc <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80065f6:	2303      	movs	r3, #3
 80065f8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80065fa:	e0a4      	b.n	8006746 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006600:	b29b      	uxth	r3, r3
 8006602:	2b00      	cmp	r3, #0
 8006604:	d1ce      	bne.n	80065a4 <HAL_SPI_Transmit+0x120>
 8006606:	e07c      	b.n	8006702 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d002      	beq.n	8006616 <HAL_SPI_Transmit+0x192>
 8006610:	8afb      	ldrh	r3, [r7, #22]
 8006612:	2b01      	cmp	r3, #1
 8006614:	d170      	bne.n	80066f8 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800661a:	b29b      	uxth	r3, r3
 800661c:	2b01      	cmp	r3, #1
 800661e:	d912      	bls.n	8006646 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006624:	881a      	ldrh	r2, [r3, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006630:	1c9a      	adds	r2, r3, #2
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800663a:	b29b      	uxth	r3, r3
 800663c:	3b02      	subs	r3, #2
 800663e:	b29a      	uxth	r2, r3
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006644:	e058      	b.n	80066f8 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	330c      	adds	r3, #12
 8006650:	7812      	ldrb	r2, [r2, #0]
 8006652:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006658:	1c5a      	adds	r2, r3, #1
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006662:	b29b      	uxth	r3, r3
 8006664:	3b01      	subs	r3, #1
 8006666:	b29a      	uxth	r2, r3
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800666c:	e044      	b.n	80066f8 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f003 0302 	and.w	r3, r3, #2
 8006678:	2b02      	cmp	r3, #2
 800667a:	d12b      	bne.n	80066d4 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006680:	b29b      	uxth	r3, r3
 8006682:	2b01      	cmp	r3, #1
 8006684:	d912      	bls.n	80066ac <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800668a:	881a      	ldrh	r2, [r3, #0]
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006696:	1c9a      	adds	r2, r3, #2
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	3b02      	subs	r3, #2
 80066a4:	b29a      	uxth	r2, r3
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80066aa:	e025      	b.n	80066f8 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	330c      	adds	r3, #12
 80066b6:	7812      	ldrb	r2, [r2, #0]
 80066b8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066be:	1c5a      	adds	r2, r3, #1
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	3b01      	subs	r3, #1
 80066cc:	b29a      	uxth	r2, r3
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80066d2:	e011      	b.n	80066f8 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80066d4:	f7fc fade 	bl	8002c94 <HAL_GetTick>
 80066d8:	4602      	mov	r2, r0
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	1ad3      	subs	r3, r2, r3
 80066de:	683a      	ldr	r2, [r7, #0]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d803      	bhi.n	80066ec <HAL_SPI_Transmit+0x268>
 80066e4:	683b      	ldr	r3, [r7, #0]
 80066e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066ea:	d102      	bne.n	80066f2 <HAL_SPI_Transmit+0x26e>
 80066ec:	683b      	ldr	r3, [r7, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d102      	bne.n	80066f8 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80066f2:	2303      	movs	r3, #3
 80066f4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80066f6:	e026      	b.n	8006746 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80066fc:	b29b      	uxth	r3, r3
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d1b5      	bne.n	800666e <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006702:	69ba      	ldr	r2, [r7, #24]
 8006704:	6839      	ldr	r1, [r7, #0]
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	f000 f948 	bl	800699c <SPI_EndRxTxTransaction>
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d002      	beq.n	8006718 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2220      	movs	r2, #32
 8006716:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d10a      	bne.n	8006736 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006720:	2300      	movs	r3, #0
 8006722:	613b      	str	r3, [r7, #16]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	613b      	str	r3, [r7, #16]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	613b      	str	r3, [r7, #16]
 8006734:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800673a:	2b00      	cmp	r3, #0
 800673c:	d002      	beq.n	8006744 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	77fb      	strb	r3, [r7, #31]
 8006742:	e000      	b.n	8006746 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006744:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2201      	movs	r2, #1
 800674a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	2200      	movs	r2, #0
 8006752:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006756:	7ffb      	ldrb	r3, [r7, #31]
}
 8006758:	4618      	mov	r0, r3
 800675a:	3720      	adds	r7, #32
 800675c:	46bd      	mov	sp, r7
 800675e:	bd80      	pop	{r7, pc}

08006760 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b088      	sub	sp, #32
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	603b      	str	r3, [r7, #0]
 800676c:	4613      	mov	r3, r2
 800676e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006770:	f7fc fa90 	bl	8002c94 <HAL_GetTick>
 8006774:	4602      	mov	r2, r0
 8006776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006778:	1a9b      	subs	r3, r3, r2
 800677a:	683a      	ldr	r2, [r7, #0]
 800677c:	4413      	add	r3, r2
 800677e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006780:	f7fc fa88 	bl	8002c94 <HAL_GetTick>
 8006784:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006786:	4b39      	ldr	r3, [pc, #228]	; (800686c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	015b      	lsls	r3, r3, #5
 800678c:	0d1b      	lsrs	r3, r3, #20
 800678e:	69fa      	ldr	r2, [r7, #28]
 8006790:	fb02 f303 	mul.w	r3, r2, r3
 8006794:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006796:	e054      	b.n	8006842 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006798:	683b      	ldr	r3, [r7, #0]
 800679a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800679e:	d050      	beq.n	8006842 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80067a0:	f7fc fa78 	bl	8002c94 <HAL_GetTick>
 80067a4:	4602      	mov	r2, r0
 80067a6:	69bb      	ldr	r3, [r7, #24]
 80067a8:	1ad3      	subs	r3, r2, r3
 80067aa:	69fa      	ldr	r2, [r7, #28]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	d902      	bls.n	80067b6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d13d      	bne.n	8006832 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80067c4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	685b      	ldr	r3, [r3, #4]
 80067ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80067ce:	d111      	bne.n	80067f4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067d8:	d004      	beq.n	80067e4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	689b      	ldr	r3, [r3, #8]
 80067de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067e2:	d107      	bne.n	80067f4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	681a      	ldr	r2, [r3, #0]
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067f2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067fc:	d10f      	bne.n	800681e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	681a      	ldr	r2, [r3, #0]
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800680c:	601a      	str	r2, [r3, #0]
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	681a      	ldr	r2, [r3, #0]
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800681c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2201      	movs	r2, #1
 8006822:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2200      	movs	r2, #0
 800682a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800682e:	2303      	movs	r3, #3
 8006830:	e017      	b.n	8006862 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d101      	bne.n	800683c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006838:	2300      	movs	r3, #0
 800683a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	3b01      	subs	r3, #1
 8006840:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	689a      	ldr	r2, [r3, #8]
 8006848:	68bb      	ldr	r3, [r7, #8]
 800684a:	4013      	ands	r3, r2
 800684c:	68ba      	ldr	r2, [r7, #8]
 800684e:	429a      	cmp	r2, r3
 8006850:	bf0c      	ite	eq
 8006852:	2301      	moveq	r3, #1
 8006854:	2300      	movne	r3, #0
 8006856:	b2db      	uxtb	r3, r3
 8006858:	461a      	mov	r2, r3
 800685a:	79fb      	ldrb	r3, [r7, #7]
 800685c:	429a      	cmp	r2, r3
 800685e:	d19b      	bne.n	8006798 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	3720      	adds	r7, #32
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}
 800686a:	bf00      	nop
 800686c:	2000011c 	.word	0x2000011c

08006870 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b08a      	sub	sp, #40	; 0x28
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]
 800687c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800687e:	2300      	movs	r3, #0
 8006880:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006882:	f7fc fa07 	bl	8002c94 <HAL_GetTick>
 8006886:	4602      	mov	r2, r0
 8006888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800688a:	1a9b      	subs	r3, r3, r2
 800688c:	683a      	ldr	r2, [r7, #0]
 800688e:	4413      	add	r3, r2
 8006890:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006892:	f7fc f9ff 	bl	8002c94 <HAL_GetTick>
 8006896:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	330c      	adds	r3, #12
 800689e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80068a0:	4b3d      	ldr	r3, [pc, #244]	; (8006998 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	4613      	mov	r3, r2
 80068a6:	009b      	lsls	r3, r3, #2
 80068a8:	4413      	add	r3, r2
 80068aa:	00da      	lsls	r2, r3, #3
 80068ac:	1ad3      	subs	r3, r2, r3
 80068ae:	0d1b      	lsrs	r3, r3, #20
 80068b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068b2:	fb02 f303 	mul.w	r3, r2, r3
 80068b6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80068b8:	e060      	b.n	800697c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80068c0:	d107      	bne.n	80068d2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d104      	bne.n	80068d2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80068c8:	69fb      	ldr	r3, [r7, #28]
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80068d0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068d8:	d050      	beq.n	800697c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80068da:	f7fc f9db 	bl	8002c94 <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	6a3b      	ldr	r3, [r7, #32]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068e6:	429a      	cmp	r2, r3
 80068e8:	d902      	bls.n	80068f0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80068ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d13d      	bne.n	800696c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	685a      	ldr	r2, [r3, #4]
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80068fe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006908:	d111      	bne.n	800692e <SPI_WaitFifoStateUntilTimeout+0xbe>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006912:	d004      	beq.n	800691e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800691c:	d107      	bne.n	800692e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	681a      	ldr	r2, [r3, #0]
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800692c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006936:	d10f      	bne.n	8006958 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681a      	ldr	r2, [r3, #0]
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006946:	601a      	str	r2, [r3, #0]
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006956:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2201      	movs	r2, #1
 800695c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2200      	movs	r2, #0
 8006964:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006968:	2303      	movs	r3, #3
 800696a:	e010      	b.n	800698e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d101      	bne.n	8006976 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006972:	2300      	movs	r3, #0
 8006974:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	3b01      	subs	r3, #1
 800697a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	689a      	ldr	r2, [r3, #8]
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	4013      	ands	r3, r2
 8006986:	687a      	ldr	r2, [r7, #4]
 8006988:	429a      	cmp	r2, r3
 800698a:	d196      	bne.n	80068ba <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3728      	adds	r7, #40	; 0x28
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	2000011c 	.word	0x2000011c

0800699c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b086      	sub	sp, #24
 80069a0:	af02      	add	r7, sp, #8
 80069a2:	60f8      	str	r0, [r7, #12]
 80069a4:	60b9      	str	r1, [r7, #8]
 80069a6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	9300      	str	r3, [sp, #0]
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f7ff ff5b 	bl	8006870 <SPI_WaitFifoStateUntilTimeout>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d007      	beq.n	80069d0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069c4:	f043 0220 	orr.w	r2, r3, #32
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80069cc:	2303      	movs	r3, #3
 80069ce:	e027      	b.n	8006a20 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	9300      	str	r3, [sp, #0]
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	2200      	movs	r2, #0
 80069d8:	2180      	movs	r1, #128	; 0x80
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f7ff fec0 	bl	8006760 <SPI_WaitFlagStateUntilTimeout>
 80069e0:	4603      	mov	r3, r0
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d007      	beq.n	80069f6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069ea:	f043 0220 	orr.w	r2, r3, #32
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80069f2:	2303      	movs	r3, #3
 80069f4:	e014      	b.n	8006a20 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	9300      	str	r3, [sp, #0]
 80069fa:	68bb      	ldr	r3, [r7, #8]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006a02:	68f8      	ldr	r0, [r7, #12]
 8006a04:	f7ff ff34 	bl	8006870 <SPI_WaitFifoStateUntilTimeout>
 8006a08:	4603      	mov	r3, r0
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d007      	beq.n	8006a1e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a12:	f043 0220 	orr.w	r2, r3, #32
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006a1a:	2303      	movs	r3, #3
 8006a1c:	e000      	b.n	8006a20 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006a1e:	2300      	movs	r3, #0
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}

08006a28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a28:	b580      	push	{r7, lr}
 8006a2a:	b082      	sub	sp, #8
 8006a2c:	af00      	add	r7, sp, #0
 8006a2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d101      	bne.n	8006a3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a36:	2301      	movs	r3, #1
 8006a38:	e049      	b.n	8006ace <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d106      	bne.n	8006a54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006a4e:	6878      	ldr	r0, [r7, #4]
 8006a50:	f000 f841 	bl	8006ad6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2202      	movs	r2, #2
 8006a58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681a      	ldr	r2, [r3, #0]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	3304      	adds	r3, #4
 8006a64:	4619      	mov	r1, r3
 8006a66:	4610      	mov	r0, r2
 8006a68:	f000 f9dc 	bl	8006e24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	2201      	movs	r2, #1
 8006a70:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2201      	movs	r2, #1
 8006a80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	2201      	movs	r2, #1
 8006a88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	2201      	movs	r2, #1
 8006aa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2201      	movs	r2, #1
 8006ab0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	2201      	movs	r2, #1
 8006ac0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006acc:	2300      	movs	r3, #0
}
 8006ace:	4618      	mov	r0, r3
 8006ad0:	3708      	adds	r7, #8
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	bd80      	pop	{r7, pc}

08006ad6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006ad6:	b480      	push	{r7}
 8006ad8:	b083      	sub	sp, #12
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006ade:	bf00      	nop
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr
	...

08006aec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b085      	sub	sp, #20
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	2b01      	cmp	r3, #1
 8006afe:	d001      	beq.n	8006b04 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006b00:	2301      	movs	r3, #1
 8006b02:	e03b      	b.n	8006b7c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2202      	movs	r2, #2
 8006b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	68da      	ldr	r2, [r3, #12]
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	f042 0201 	orr.w	r2, r2, #1
 8006b1a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	4a19      	ldr	r2, [pc, #100]	; (8006b88 <HAL_TIM_Base_Start_IT+0x9c>)
 8006b22:	4293      	cmp	r3, r2
 8006b24:	d009      	beq.n	8006b3a <HAL_TIM_Base_Start_IT+0x4e>
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b2e:	d004      	beq.n	8006b3a <HAL_TIM_Base_Start_IT+0x4e>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	4a15      	ldr	r2, [pc, #84]	; (8006b8c <HAL_TIM_Base_Start_IT+0xa0>)
 8006b36:	4293      	cmp	r3, r2
 8006b38:	d115      	bne.n	8006b66 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	689a      	ldr	r2, [r3, #8]
 8006b40:	4b13      	ldr	r3, [pc, #76]	; (8006b90 <HAL_TIM_Base_Start_IT+0xa4>)
 8006b42:	4013      	ands	r3, r2
 8006b44:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2b06      	cmp	r3, #6
 8006b4a:	d015      	beq.n	8006b78 <HAL_TIM_Base_Start_IT+0x8c>
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b52:	d011      	beq.n	8006b78 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f042 0201 	orr.w	r2, r2, #1
 8006b62:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b64:	e008      	b.n	8006b78 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f042 0201 	orr.w	r2, r2, #1
 8006b74:	601a      	str	r2, [r3, #0]
 8006b76:	e000      	b.n	8006b7a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006b78:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006b7a:	2300      	movs	r3, #0
}
 8006b7c:	4618      	mov	r0, r3
 8006b7e:	3714      	adds	r7, #20
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr
 8006b88:	40012c00 	.word	0x40012c00
 8006b8c:	40014000 	.word	0x40014000
 8006b90:	00010007 	.word	0x00010007

08006b94 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b082      	sub	sp, #8
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	691b      	ldr	r3, [r3, #16]
 8006ba2:	f003 0302 	and.w	r3, r3, #2
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d122      	bne.n	8006bf0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68db      	ldr	r3, [r3, #12]
 8006bb0:	f003 0302 	and.w	r3, r3, #2
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d11b      	bne.n	8006bf0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f06f 0202 	mvn.w	r2, #2
 8006bc0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	2201      	movs	r2, #1
 8006bc6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	699b      	ldr	r3, [r3, #24]
 8006bce:	f003 0303 	and.w	r3, r3, #3
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d003      	beq.n	8006bde <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f905 	bl	8006de6 <HAL_TIM_IC_CaptureCallback>
 8006bdc:	e005      	b.n	8006bea <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bde:	6878      	ldr	r0, [r7, #4]
 8006be0:	f000 f8f7 	bl	8006dd2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 f908 	bl	8006dfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	f003 0304 	and.w	r3, r3, #4
 8006bfa:	2b04      	cmp	r3, #4
 8006bfc:	d122      	bne.n	8006c44 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	f003 0304 	and.w	r3, r3, #4
 8006c08:	2b04      	cmp	r3, #4
 8006c0a:	d11b      	bne.n	8006c44 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f06f 0204 	mvn.w	r2, #4
 8006c14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2202      	movs	r2, #2
 8006c1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	699b      	ldr	r3, [r3, #24]
 8006c22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d003      	beq.n	8006c32 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c2a:	6878      	ldr	r0, [r7, #4]
 8006c2c:	f000 f8db 	bl	8006de6 <HAL_TIM_IC_CaptureCallback>
 8006c30:	e005      	b.n	8006c3e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f8cd 	bl	8006dd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f000 f8de 	bl	8006dfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	f003 0308 	and.w	r3, r3, #8
 8006c4e:	2b08      	cmp	r3, #8
 8006c50:	d122      	bne.n	8006c98 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68db      	ldr	r3, [r3, #12]
 8006c58:	f003 0308 	and.w	r3, r3, #8
 8006c5c:	2b08      	cmp	r3, #8
 8006c5e:	d11b      	bne.n	8006c98 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f06f 0208 	mvn.w	r2, #8
 8006c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2204      	movs	r2, #4
 8006c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	69db      	ldr	r3, [r3, #28]
 8006c76:	f003 0303 	and.w	r3, r3, #3
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d003      	beq.n	8006c86 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c7e:	6878      	ldr	r0, [r7, #4]
 8006c80:	f000 f8b1 	bl	8006de6 <HAL_TIM_IC_CaptureCallback>
 8006c84:	e005      	b.n	8006c92 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c86:	6878      	ldr	r0, [r7, #4]
 8006c88:	f000 f8a3 	bl	8006dd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 f8b4 	bl	8006dfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	f003 0310 	and.w	r3, r3, #16
 8006ca2:	2b10      	cmp	r3, #16
 8006ca4:	d122      	bne.n	8006cec <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	f003 0310 	and.w	r3, r3, #16
 8006cb0:	2b10      	cmp	r3, #16
 8006cb2:	d11b      	bne.n	8006cec <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	f06f 0210 	mvn.w	r2, #16
 8006cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2208      	movs	r2, #8
 8006cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	69db      	ldr	r3, [r3, #28]
 8006cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d003      	beq.n	8006cda <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 f887 	bl	8006de6 <HAL_TIM_IC_CaptureCallback>
 8006cd8:	e005      	b.n	8006ce6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 f879 	bl	8006dd2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f000 f88a 	bl	8006dfa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	691b      	ldr	r3, [r3, #16]
 8006cf2:	f003 0301 	and.w	r3, r3, #1
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d10e      	bne.n	8006d18 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	68db      	ldr	r3, [r3, #12]
 8006d00:	f003 0301 	and.w	r3, r3, #1
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d107      	bne.n	8006d18 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f06f 0201 	mvn.w	r2, #1
 8006d10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f7fb f9d4 	bl	80020c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	691b      	ldr	r3, [r3, #16]
 8006d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d22:	2b80      	cmp	r3, #128	; 0x80
 8006d24:	d10e      	bne.n	8006d44 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	68db      	ldr	r3, [r3, #12]
 8006d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d30:	2b80      	cmp	r3, #128	; 0x80
 8006d32:	d107      	bne.n	8006d44 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006d3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 f8de 	bl	8006f00 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	691b      	ldr	r3, [r3, #16]
 8006d4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d52:	d10e      	bne.n	8006d72 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	68db      	ldr	r3, [r3, #12]
 8006d5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d5e:	2b80      	cmp	r3, #128	; 0x80
 8006d60:	d107      	bne.n	8006d72 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006d6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006d6c:	6878      	ldr	r0, [r7, #4]
 8006d6e:	f000 f8d1 	bl	8006f14 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	691b      	ldr	r3, [r3, #16]
 8006d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d7c:	2b40      	cmp	r3, #64	; 0x40
 8006d7e:	d10e      	bne.n	8006d9e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	68db      	ldr	r3, [r3, #12]
 8006d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d8a:	2b40      	cmp	r3, #64	; 0x40
 8006d8c:	d107      	bne.n	8006d9e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006d96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f000 f838 	bl	8006e0e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	691b      	ldr	r3, [r3, #16]
 8006da4:	f003 0320 	and.w	r3, r3, #32
 8006da8:	2b20      	cmp	r3, #32
 8006daa:	d10e      	bne.n	8006dca <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	f003 0320 	and.w	r3, r3, #32
 8006db6:	2b20      	cmp	r3, #32
 8006db8:	d107      	bne.n	8006dca <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f06f 0220 	mvn.w	r2, #32
 8006dc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006dc4:	6878      	ldr	r0, [r7, #4]
 8006dc6:	f000 f891 	bl	8006eec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006dca:	bf00      	nop
 8006dcc:	3708      	adds	r7, #8
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006dd2:	b480      	push	{r7}
 8006dd4:	b083      	sub	sp, #12
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006dda:	bf00      	nop
 8006ddc:	370c      	adds	r7, #12
 8006dde:	46bd      	mov	sp, r7
 8006de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de4:	4770      	bx	lr

08006de6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006de6:	b480      	push	{r7}
 8006de8:	b083      	sub	sp, #12
 8006dea:	af00      	add	r7, sp, #0
 8006dec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006dee:	bf00      	nop
 8006df0:	370c      	adds	r7, #12
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr

08006dfa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006dfa:	b480      	push	{r7}
 8006dfc:	b083      	sub	sp, #12
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e02:	bf00      	nop
 8006e04:	370c      	adds	r7, #12
 8006e06:	46bd      	mov	sp, r7
 8006e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0c:	4770      	bx	lr

08006e0e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e0e:	b480      	push	{r7}
 8006e10:	b083      	sub	sp, #12
 8006e12:	af00      	add	r7, sp, #0
 8006e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e16:	bf00      	nop
 8006e18:	370c      	adds	r7, #12
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
	...

08006e24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b085      	sub	sp, #20
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	4a2a      	ldr	r2, [pc, #168]	; (8006ee0 <TIM_Base_SetConfig+0xbc>)
 8006e38:	4293      	cmp	r3, r2
 8006e3a:	d003      	beq.n	8006e44 <TIM_Base_SetConfig+0x20>
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e42:	d108      	bne.n	8006e56 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e4a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	685b      	ldr	r3, [r3, #4]
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	4313      	orrs	r3, r2
 8006e54:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a21      	ldr	r2, [pc, #132]	; (8006ee0 <TIM_Base_SetConfig+0xbc>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d00b      	beq.n	8006e76 <TIM_Base_SetConfig+0x52>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e64:	d007      	beq.n	8006e76 <TIM_Base_SetConfig+0x52>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4a1e      	ldr	r2, [pc, #120]	; (8006ee4 <TIM_Base_SetConfig+0xc0>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d003      	beq.n	8006e76 <TIM_Base_SetConfig+0x52>
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	4a1d      	ldr	r2, [pc, #116]	; (8006ee8 <TIM_Base_SetConfig+0xc4>)
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d108      	bne.n	8006e88 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e7e:	683b      	ldr	r3, [r7, #0]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	68fa      	ldr	r2, [r7, #12]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	695b      	ldr	r3, [r3, #20]
 8006e92:	4313      	orrs	r3, r2
 8006e94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	68fa      	ldr	r2, [r7, #12]
 8006e9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	689a      	ldr	r2, [r3, #8]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4a0c      	ldr	r2, [pc, #48]	; (8006ee0 <TIM_Base_SetConfig+0xbc>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d007      	beq.n	8006ec4 <TIM_Base_SetConfig+0xa0>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4a0b      	ldr	r2, [pc, #44]	; (8006ee4 <TIM_Base_SetConfig+0xc0>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d003      	beq.n	8006ec4 <TIM_Base_SetConfig+0xa0>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a0a      	ldr	r2, [pc, #40]	; (8006ee8 <TIM_Base_SetConfig+0xc4>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d103      	bne.n	8006ecc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ec4:	683b      	ldr	r3, [r7, #0]
 8006ec6:	691a      	ldr	r2, [r3, #16]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2201      	movs	r2, #1
 8006ed0:	615a      	str	r2, [r3, #20]
}
 8006ed2:	bf00      	nop
 8006ed4:	3714      	adds	r7, #20
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006edc:	4770      	bx	lr
 8006ede:	bf00      	nop
 8006ee0:	40012c00 	.word	0x40012c00
 8006ee4:	40014000 	.word	0x40014000
 8006ee8:	40014400 	.word	0x40014400

08006eec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b083      	sub	sp, #12
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ef4:	bf00      	nop
 8006ef6:	370c      	adds	r7, #12
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006efe:	4770      	bx	lr

08006f00 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f00:	b480      	push	{r7}
 8006f02:	b083      	sub	sp, #12
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f08:	bf00      	nop
 8006f0a:	370c      	adds	r7, #12
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f12:	4770      	bx	lr

08006f14 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006f1c:	bf00      	nop
 8006f1e:	370c      	adds	r7, #12
 8006f20:	46bd      	mov	sp, r7
 8006f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f26:	4770      	bx	lr

08006f28 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b082      	sub	sp, #8
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2b00      	cmp	r3, #0
 8006f34:	d101      	bne.n	8006f3a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	e040      	b.n	8006fbc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d106      	bne.n	8006f50 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006f4a:	6878      	ldr	r0, [r7, #4]
 8006f4c:	f7fb fc82 	bl	8002854 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2224      	movs	r2, #36	; 0x24
 8006f54:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	681a      	ldr	r2, [r3, #0]
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f022 0201 	bic.w	r2, r2, #1
 8006f64:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 fbf2 	bl	8007750 <UART_SetConfig>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d101      	bne.n	8006f76 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e022      	b.n	8006fbc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d002      	beq.n	8006f84 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f000 fdf0 	bl	8007b64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	685a      	ldr	r2, [r3, #4]
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006f92:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	689a      	ldr	r2, [r3, #8]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006fa2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f042 0201 	orr.w	r2, r2, #1
 8006fb2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 fe77 	bl	8007ca8 <UART_CheckIdleState>
 8006fba:	4603      	mov	r3, r0
}
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	3708      	adds	r7, #8
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	bd80      	pop	{r7, pc}

08006fc4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8006fc4:	b480      	push	{r7}
 8006fc6:	b08b      	sub	sp, #44	; 0x2c
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	4613      	mov	r3, r2
 8006fd0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006fd6:	2b20      	cmp	r3, #32
 8006fd8:	d156      	bne.n	8007088 <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 8006fda:	68bb      	ldr	r3, [r7, #8]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d002      	beq.n	8006fe6 <HAL_UART_Transmit_IT+0x22>
 8006fe0:	88fb      	ldrh	r3, [r7, #6]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d101      	bne.n	8006fea <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e04f      	b.n	800708a <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006ff0:	2b01      	cmp	r3, #1
 8006ff2:	d101      	bne.n	8006ff8 <HAL_UART_Transmit_IT+0x34>
 8006ff4:	2302      	movs	r3, #2
 8006ff6:	e048      	b.n	800708a <HAL_UART_Transmit_IT+0xc6>
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	68ba      	ldr	r2, [r7, #8]
 8007004:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	88fa      	ldrh	r2, [r7, #6]
 800700a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	88fa      	ldrh	r2, [r7, #6]
 8007012:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	2200      	movs	r2, #0
 8007020:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	2221      	movs	r2, #33	; 0x21
 8007028:	679a      	str	r2, [r3, #120]	; 0x78
      /* Enable the Transmit Data Register Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
    }
#else
    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	689b      	ldr	r3, [r3, #8]
 800702e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007032:	d107      	bne.n	8007044 <HAL_UART_Transmit_IT+0x80>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	691b      	ldr	r3, [r3, #16]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d103      	bne.n	8007044 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	4a16      	ldr	r2, [pc, #88]	; (8007098 <HAL_UART_Transmit_IT+0xd4>)
 8007040:	669a      	str	r2, [r3, #104]	; 0x68
 8007042:	e002      	b.n	800704a <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	4a15      	ldr	r2, [pc, #84]	; (800709c <HAL_UART_Transmit_IT+0xd8>)
 8007048:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	2200      	movs	r2, #0
 800704e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007058:	697b      	ldr	r3, [r7, #20]
 800705a:	e853 3f00 	ldrex	r3, [r3]
 800705e:	613b      	str	r3, [r7, #16]
   return(result);
 8007060:	693b      	ldr	r3, [r7, #16]
 8007062:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007066:	627b      	str	r3, [r7, #36]	; 0x24
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	461a      	mov	r2, r3
 800706e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007070:	623b      	str	r3, [r7, #32]
 8007072:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007074:	69f9      	ldr	r1, [r7, #28]
 8007076:	6a3a      	ldr	r2, [r7, #32]
 8007078:	e841 2300 	strex	r3, r2, [r1]
 800707c:	61bb      	str	r3, [r7, #24]
   return(result);
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1e6      	bne.n	8007052 <HAL_UART_Transmit_IT+0x8e>
#endif /* USART_CR1_FIFOEN */

    return HAL_OK;
 8007084:	2300      	movs	r3, #0
 8007086:	e000      	b.n	800708a <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8007088:	2302      	movs	r3, #2
  }
}
 800708a:	4618      	mov	r0, r3
 800708c:	372c      	adds	r7, #44	; 0x2c
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop
 8007098:	08008203 	.word	0x08008203
 800709c:	0800814b 	.word	0x0800814b

080070a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b08a      	sub	sp, #40	; 0x28
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	60b9      	str	r1, [r7, #8]
 80070aa:	4613      	mov	r3, r2
 80070ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070b2:	2b20      	cmp	r3, #32
 80070b4:	d142      	bne.n	800713c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d002      	beq.n	80070c2 <HAL_UART_Receive_IT+0x22>
 80070bc:	88fb      	ldrh	r3, [r7, #6]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d101      	bne.n	80070c6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80070c2:	2301      	movs	r3, #1
 80070c4:	e03b      	b.n	800713e <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80070cc:	2b01      	cmp	r3, #1
 80070ce:	d101      	bne.n	80070d4 <HAL_UART_Receive_IT+0x34>
 80070d0:	2302      	movs	r3, #2
 80070d2:	e034      	b.n	800713e <HAL_UART_Receive_IT+0x9e>
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	2200      	movs	r2, #0
 80070e0:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a18      	ldr	r2, [pc, #96]	; (8007148 <HAL_UART_Receive_IT+0xa8>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d01f      	beq.n	800712c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d018      	beq.n	800712c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007100:	697b      	ldr	r3, [r7, #20]
 8007102:	e853 3f00 	ldrex	r3, [r3]
 8007106:	613b      	str	r3, [r7, #16]
   return(result);
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800710e:	627b      	str	r3, [r7, #36]	; 0x24
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	461a      	mov	r2, r3
 8007116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007118:	623b      	str	r3, [r7, #32]
 800711a:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711c:	69f9      	ldr	r1, [r7, #28]
 800711e:	6a3a      	ldr	r2, [r7, #32]
 8007120:	e841 2300 	strex	r3, r2, [r1]
 8007124:	61bb      	str	r3, [r7, #24]
   return(result);
 8007126:	69bb      	ldr	r3, [r7, #24]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d1e6      	bne.n	80070fa <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800712c:	88fb      	ldrh	r3, [r7, #6]
 800712e:	461a      	mov	r2, r3
 8007130:	68b9      	ldr	r1, [r7, #8]
 8007132:	68f8      	ldr	r0, [r7, #12]
 8007134:	f000 fec6 	bl	8007ec4 <UART_Start_Receive_IT>
 8007138:	4603      	mov	r3, r0
 800713a:	e000      	b.n	800713e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800713c:	2302      	movs	r3, #2
  }
}
 800713e:	4618      	mov	r0, r3
 8007140:	3728      	adds	r7, #40	; 0x28
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}
 8007146:	bf00      	nop
 8007148:	40008000 	.word	0x40008000

0800714c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b0ba      	sub	sp, #232	; 0xe8
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	69db      	ldr	r3, [r3, #28]
 800715a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007172:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007176:	f640 030f 	movw	r3, #2063	; 0x80f
 800717a:	4013      	ands	r3, r2
 800717c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007180:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007184:	2b00      	cmp	r3, #0
 8007186:	d115      	bne.n	80071b4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8007188:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800718c:	f003 0320 	and.w	r3, r3, #32
 8007190:	2b00      	cmp	r3, #0
 8007192:	d00f      	beq.n	80071b4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007198:	f003 0320 	and.w	r3, r3, #32
 800719c:	2b00      	cmp	r3, #0
 800719e:	d009      	beq.n	80071b4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f000 82a6 	beq.w	80076f6 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80071ae:	6878      	ldr	r0, [r7, #4]
 80071b0:	4798      	blx	r3
      }
      return;
 80071b2:	e2a0      	b.n	80076f6 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80071b4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	f000 8117 	beq.w	80073ec <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80071be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071c2:	f003 0301 	and.w	r3, r3, #1
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d106      	bne.n	80071d8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80071ca:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80071ce:	4b85      	ldr	r3, [pc, #532]	; (80073e4 <HAL_UART_IRQHandler+0x298>)
 80071d0:	4013      	ands	r3, r2
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	f000 810a 	beq.w	80073ec <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80071d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071dc:	f003 0301 	and.w	r3, r3, #1
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d011      	beq.n	8007208 <HAL_UART_IRQHandler+0xbc>
 80071e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d00b      	beq.n	8007208 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	2201      	movs	r2, #1
 80071f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80071fe:	f043 0201 	orr.w	r2, r3, #1
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007208:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800720c:	f003 0302 	and.w	r3, r3, #2
 8007210:	2b00      	cmp	r3, #0
 8007212:	d011      	beq.n	8007238 <HAL_UART_IRQHandler+0xec>
 8007214:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007218:	f003 0301 	and.w	r3, r3, #1
 800721c:	2b00      	cmp	r3, #0
 800721e:	d00b      	beq.n	8007238 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	2202      	movs	r2, #2
 8007226:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800722e:	f043 0204 	orr.w	r2, r3, #4
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007238:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800723c:	f003 0304 	and.w	r3, r3, #4
 8007240:	2b00      	cmp	r3, #0
 8007242:	d011      	beq.n	8007268 <HAL_UART_IRQHandler+0x11c>
 8007244:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007248:	f003 0301 	and.w	r3, r3, #1
 800724c:	2b00      	cmp	r3, #0
 800724e:	d00b      	beq.n	8007268 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2204      	movs	r2, #4
 8007256:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800725e:	f043 0202 	orr.w	r2, r3, #2
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007268:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800726c:	f003 0308 	and.w	r3, r3, #8
 8007270:	2b00      	cmp	r3, #0
 8007272:	d017      	beq.n	80072a4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007274:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007278:	f003 0320 	and.w	r3, r3, #32
 800727c:	2b00      	cmp	r3, #0
 800727e:	d105      	bne.n	800728c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8007280:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007284:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8007288:	2b00      	cmp	r3, #0
 800728a:	d00b      	beq.n	80072a4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2208      	movs	r2, #8
 8007292:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800729a:	f043 0208 	orr.w	r2, r3, #8
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80072a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d012      	beq.n	80072d6 <HAL_UART_IRQHandler+0x18a>
 80072b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d00c      	beq.n	80072d6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072cc:	f043 0220 	orr.w	r2, r3, #32
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80072dc:	2b00      	cmp	r3, #0
 80072de:	f000 820c 	beq.w	80076fa <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80072e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072e6:	f003 0320 	and.w	r3, r3, #32
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00d      	beq.n	800730a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80072ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072f2:	f003 0320 	and.w	r3, r3, #32
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d007      	beq.n	800730a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d003      	beq.n	800730a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007310:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	689b      	ldr	r3, [r3, #8]
 800731a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800731e:	2b40      	cmp	r3, #64	; 0x40
 8007320:	d005      	beq.n	800732e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007322:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007326:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800732a:	2b00      	cmp	r3, #0
 800732c:	d04f      	beq.n	80073ce <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f000 fe92 	bl	8008058 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	689b      	ldr	r3, [r3, #8]
 800733a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800733e:	2b40      	cmp	r3, #64	; 0x40
 8007340:	d141      	bne.n	80073c6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	3308      	adds	r3, #8
 8007348:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800734c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007350:	e853 3f00 	ldrex	r3, [r3]
 8007354:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007358:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800735c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007360:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	3308      	adds	r3, #8
 800736a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800736e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007372:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007376:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800737a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800737e:	e841 2300 	strex	r3, r2, [r1]
 8007382:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007386:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800738a:	2b00      	cmp	r3, #0
 800738c:	d1d9      	bne.n	8007342 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007392:	2b00      	cmp	r3, #0
 8007394:	d013      	beq.n	80073be <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800739a:	4a13      	ldr	r2, [pc, #76]	; (80073e8 <HAL_UART_IRQHandler+0x29c>)
 800739c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073a2:	4618      	mov	r0, r3
 80073a4:	f7fc fe3c 	bl	8004020 <HAL_DMA_Abort_IT>
 80073a8:	4603      	mov	r3, r0
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d017      	beq.n	80073de <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80073b8:	4610      	mov	r0, r2
 80073ba:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073bc:	e00f      	b.n	80073de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 f9b0 	bl	8007724 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073c4:	e00b      	b.n	80073de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80073c6:	6878      	ldr	r0, [r7, #4]
 80073c8:	f000 f9ac 	bl	8007724 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073cc:	e007      	b.n	80073de <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 f9a8 	bl	8007724 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80073dc:	e18d      	b.n	80076fa <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073de:	bf00      	nop
    return;
 80073e0:	e18b      	b.n	80076fa <HAL_UART_IRQHandler+0x5ae>
 80073e2:	bf00      	nop
 80073e4:	04000120 	.word	0x04000120
 80073e8:	0800811f 	.word	0x0800811f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	f040 8146 	bne.w	8007682 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80073f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073fa:	f003 0310 	and.w	r3, r3, #16
 80073fe:	2b00      	cmp	r3, #0
 8007400:	f000 813f 	beq.w	8007682 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007404:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007408:	f003 0310 	and.w	r3, r3, #16
 800740c:	2b00      	cmp	r3, #0
 800740e:	f000 8138 	beq.w	8007682 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	2210      	movs	r2, #16
 8007418:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	689b      	ldr	r3, [r3, #8]
 8007420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007424:	2b40      	cmp	r3, #64	; 0x40
 8007426:	f040 80b4 	bne.w	8007592 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007436:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800743a:	2b00      	cmp	r3, #0
 800743c:	f000 815f 	beq.w	80076fe <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007446:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800744a:	429a      	cmp	r2, r3
 800744c:	f080 8157 	bcs.w	80076fe <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007456:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 0320 	and.w	r3, r3, #32
 8007466:	2b00      	cmp	r3, #0
 8007468:	f040 8085 	bne.w	8007576 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007474:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007478:	e853 3f00 	ldrex	r3, [r3]
 800747c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007480:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007484:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007488:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	461a      	mov	r2, r3
 8007492:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007496:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800749a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800749e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80074a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80074a6:	e841 2300 	strex	r3, r2, [r1]
 80074aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80074ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d1da      	bne.n	800746c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	3308      	adds	r3, #8
 80074bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80074c0:	e853 3f00 	ldrex	r3, [r3]
 80074c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80074c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074c8:	f023 0301 	bic.w	r3, r3, #1
 80074cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	3308      	adds	r3, #8
 80074d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80074da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80074de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80074e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80074e6:	e841 2300 	strex	r3, r2, [r1]
 80074ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80074ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d1e1      	bne.n	80074b6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	3308      	adds	r3, #8
 80074f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80074fc:	e853 3f00 	ldrex	r3, [r3]
 8007500:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007502:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007504:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007508:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	3308      	adds	r3, #8
 8007512:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007516:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007518:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800751c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800751e:	e841 2300 	strex	r3, r2, [r1]
 8007522:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007524:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1e3      	bne.n	80074f2 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2220      	movs	r2, #32
 800752e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2200      	movs	r2, #0
 8007534:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800753c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800753e:	e853 3f00 	ldrex	r3, [r3]
 8007542:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007546:	f023 0310 	bic.w	r3, r3, #16
 800754a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	461a      	mov	r2, r3
 8007554:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007558:	65bb      	str	r3, [r7, #88]	; 0x58
 800755a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800755c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800755e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007560:	e841 2300 	strex	r3, r2, [r1]
 8007564:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007566:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1e4      	bne.n	8007536 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007570:	4618      	mov	r0, r3
 8007572:	f7fc fd17 	bl	8003fa4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007582:	b29b      	uxth	r3, r3
 8007584:	1ad3      	subs	r3, r2, r3
 8007586:	b29b      	uxth	r3, r3
 8007588:	4619      	mov	r1, r3
 800758a:	6878      	ldr	r0, [r7, #4]
 800758c:	f000 f8d4 	bl	8007738 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007590:	e0b5      	b.n	80076fe <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800759e:	b29b      	uxth	r3, r3
 80075a0:	1ad3      	subs	r3, r2, r3
 80075a2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	f000 80a7 	beq.w	8007702 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80075b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	f000 80a2 	beq.w	8007702 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075c6:	e853 3f00 	ldrex	r3, [r3]
 80075ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80075cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80075d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	461a      	mov	r2, r3
 80075dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80075e0:	647b      	str	r3, [r7, #68]	; 0x44
 80075e2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075e4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80075e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80075e8:	e841 2300 	strex	r3, r2, [r1]
 80075ec:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80075ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d1e4      	bne.n	80075be <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	3308      	adds	r3, #8
 80075fa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fe:	e853 3f00 	ldrex	r3, [r3]
 8007602:	623b      	str	r3, [r7, #32]
   return(result);
 8007604:	6a3b      	ldr	r3, [r7, #32]
 8007606:	f023 0301 	bic.w	r3, r3, #1
 800760a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	3308      	adds	r3, #8
 8007614:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007618:	633a      	str	r2, [r7, #48]	; 0x30
 800761a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800761e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007620:	e841 2300 	strex	r3, r2, [r1]
 8007624:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1e3      	bne.n	80075f4 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2220      	movs	r2, #32
 8007630:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	2200      	movs	r2, #0
 8007636:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2200      	movs	r2, #0
 800763c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	e853 3f00 	ldrex	r3, [r3]
 800764a:	60fb      	str	r3, [r7, #12]
   return(result);
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f023 0310 	bic.w	r3, r3, #16
 8007652:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	461a      	mov	r2, r3
 800765c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007660:	61fb      	str	r3, [r7, #28]
 8007662:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007664:	69b9      	ldr	r1, [r7, #24]
 8007666:	69fa      	ldr	r2, [r7, #28]
 8007668:	e841 2300 	strex	r3, r2, [r1]
 800766c:	617b      	str	r3, [r7, #20]
   return(result);
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d1e4      	bne.n	800763e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007674:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007678:	4619      	mov	r1, r3
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f85c 	bl	8007738 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007680:	e03f      	b.n	8007702 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007682:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007686:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800768a:	2b00      	cmp	r3, #0
 800768c:	d00e      	beq.n	80076ac <HAL_UART_IRQHandler+0x560>
 800768e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007692:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007696:	2b00      	cmp	r3, #0
 8007698:	d008      	beq.n	80076ac <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80076a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80076a4:	6878      	ldr	r0, [r7, #4]
 80076a6:	f000 ff96 	bl	80085d6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80076aa:	e02d      	b.n	8007708 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80076ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d00e      	beq.n	80076d6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80076b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d008      	beq.n	80076d6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d01c      	beq.n	8007706 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80076d0:	6878      	ldr	r0, [r7, #4]
 80076d2:	4798      	blx	r3
    }
    return;
 80076d4:	e017      	b.n	8007706 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80076d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d012      	beq.n	8007708 <HAL_UART_IRQHandler+0x5bc>
 80076e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00c      	beq.n	8007708 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 fde7 	bl	80082c2 <UART_EndTransmit_IT>
    return;
 80076f4:	e008      	b.n	8007708 <HAL_UART_IRQHandler+0x5bc>
      return;
 80076f6:	bf00      	nop
 80076f8:	e006      	b.n	8007708 <HAL_UART_IRQHandler+0x5bc>
    return;
 80076fa:	bf00      	nop
 80076fc:	e004      	b.n	8007708 <HAL_UART_IRQHandler+0x5bc>
      return;
 80076fe:	bf00      	nop
 8007700:	e002      	b.n	8007708 <HAL_UART_IRQHandler+0x5bc>
      return;
 8007702:	bf00      	nop
 8007704:	e000      	b.n	8007708 <HAL_UART_IRQHandler+0x5bc>
    return;
 8007706:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8007708:	37e8      	adds	r7, #232	; 0xe8
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop

08007710 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007710:	b480      	push	{r7}
 8007712:	b083      	sub	sp, #12
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007718:	bf00      	nop
 800771a:	370c      	adds	r7, #12
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007724:	b480      	push	{r7}
 8007726:	b083      	sub	sp, #12
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800772c:	bf00      	nop
 800772e:	370c      	adds	r7, #12
 8007730:	46bd      	mov	sp, r7
 8007732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007736:	4770      	bx	lr

08007738 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007738:	b480      	push	{r7}
 800773a:	b083      	sub	sp, #12
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	460b      	mov	r3, r1
 8007742:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007744:	bf00      	nop
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007750:	b5b0      	push	{r4, r5, r7, lr}
 8007752:	b088      	sub	sp, #32
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007758:	2300      	movs	r3, #0
 800775a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	689a      	ldr	r2, [r3, #8]
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	691b      	ldr	r3, [r3, #16]
 8007764:	431a      	orrs	r2, r3
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	431a      	orrs	r2, r3
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	69db      	ldr	r3, [r3, #28]
 8007770:	4313      	orrs	r3, r2
 8007772:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	4baf      	ldr	r3, [pc, #700]	; (8007a38 <UART_SetConfig+0x2e8>)
 800777c:	4013      	ands	r3, r2
 800777e:	687a      	ldr	r2, [r7, #4]
 8007780:	6812      	ldr	r2, [r2, #0]
 8007782:	69f9      	ldr	r1, [r7, #28]
 8007784:	430b      	orrs	r3, r1
 8007786:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	685b      	ldr	r3, [r3, #4]
 800778e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	68da      	ldr	r2, [r3, #12]
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	430a      	orrs	r2, r1
 800779c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	699b      	ldr	r3, [r3, #24]
 80077a2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4aa4      	ldr	r2, [pc, #656]	; (8007a3c <UART_SetConfig+0x2ec>)
 80077aa:	4293      	cmp	r3, r2
 80077ac:	d004      	beq.n	80077b8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	6a1b      	ldr	r3, [r3, #32]
 80077b2:	69fa      	ldr	r2, [r7, #28]
 80077b4:	4313      	orrs	r3, r2
 80077b6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	689b      	ldr	r3, [r3, #8]
 80077be:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	69fa      	ldr	r2, [r7, #28]
 80077c8:	430a      	orrs	r2, r1
 80077ca:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	4a9b      	ldr	r2, [pc, #620]	; (8007a40 <UART_SetConfig+0x2f0>)
 80077d2:	4293      	cmp	r3, r2
 80077d4:	d121      	bne.n	800781a <UART_SetConfig+0xca>
 80077d6:	4b9b      	ldr	r3, [pc, #620]	; (8007a44 <UART_SetConfig+0x2f4>)
 80077d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077dc:	f003 0303 	and.w	r3, r3, #3
 80077e0:	2b03      	cmp	r3, #3
 80077e2:	d817      	bhi.n	8007814 <UART_SetConfig+0xc4>
 80077e4:	a201      	add	r2, pc, #4	; (adr r2, 80077ec <UART_SetConfig+0x9c>)
 80077e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ea:	bf00      	nop
 80077ec:	080077fd 	.word	0x080077fd
 80077f0:	08007809 	.word	0x08007809
 80077f4:	08007803 	.word	0x08007803
 80077f8:	0800780f 	.word	0x0800780f
 80077fc:	2301      	movs	r3, #1
 80077fe:	76fb      	strb	r3, [r7, #27]
 8007800:	e070      	b.n	80078e4 <UART_SetConfig+0x194>
 8007802:	2302      	movs	r3, #2
 8007804:	76fb      	strb	r3, [r7, #27]
 8007806:	e06d      	b.n	80078e4 <UART_SetConfig+0x194>
 8007808:	2304      	movs	r3, #4
 800780a:	76fb      	strb	r3, [r7, #27]
 800780c:	e06a      	b.n	80078e4 <UART_SetConfig+0x194>
 800780e:	2308      	movs	r3, #8
 8007810:	76fb      	strb	r3, [r7, #27]
 8007812:	e067      	b.n	80078e4 <UART_SetConfig+0x194>
 8007814:	2310      	movs	r3, #16
 8007816:	76fb      	strb	r3, [r7, #27]
 8007818:	e064      	b.n	80078e4 <UART_SetConfig+0x194>
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	4a8a      	ldr	r2, [pc, #552]	; (8007a48 <UART_SetConfig+0x2f8>)
 8007820:	4293      	cmp	r3, r2
 8007822:	d132      	bne.n	800788a <UART_SetConfig+0x13a>
 8007824:	4b87      	ldr	r3, [pc, #540]	; (8007a44 <UART_SetConfig+0x2f4>)
 8007826:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800782a:	f003 030c 	and.w	r3, r3, #12
 800782e:	2b0c      	cmp	r3, #12
 8007830:	d828      	bhi.n	8007884 <UART_SetConfig+0x134>
 8007832:	a201      	add	r2, pc, #4	; (adr r2, 8007838 <UART_SetConfig+0xe8>)
 8007834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007838:	0800786d 	.word	0x0800786d
 800783c:	08007885 	.word	0x08007885
 8007840:	08007885 	.word	0x08007885
 8007844:	08007885 	.word	0x08007885
 8007848:	08007879 	.word	0x08007879
 800784c:	08007885 	.word	0x08007885
 8007850:	08007885 	.word	0x08007885
 8007854:	08007885 	.word	0x08007885
 8007858:	08007873 	.word	0x08007873
 800785c:	08007885 	.word	0x08007885
 8007860:	08007885 	.word	0x08007885
 8007864:	08007885 	.word	0x08007885
 8007868:	0800787f 	.word	0x0800787f
 800786c:	2300      	movs	r3, #0
 800786e:	76fb      	strb	r3, [r7, #27]
 8007870:	e038      	b.n	80078e4 <UART_SetConfig+0x194>
 8007872:	2302      	movs	r3, #2
 8007874:	76fb      	strb	r3, [r7, #27]
 8007876:	e035      	b.n	80078e4 <UART_SetConfig+0x194>
 8007878:	2304      	movs	r3, #4
 800787a:	76fb      	strb	r3, [r7, #27]
 800787c:	e032      	b.n	80078e4 <UART_SetConfig+0x194>
 800787e:	2308      	movs	r3, #8
 8007880:	76fb      	strb	r3, [r7, #27]
 8007882:	e02f      	b.n	80078e4 <UART_SetConfig+0x194>
 8007884:	2310      	movs	r3, #16
 8007886:	76fb      	strb	r3, [r7, #27]
 8007888:	e02c      	b.n	80078e4 <UART_SetConfig+0x194>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	4a6b      	ldr	r2, [pc, #428]	; (8007a3c <UART_SetConfig+0x2ec>)
 8007890:	4293      	cmp	r3, r2
 8007892:	d125      	bne.n	80078e0 <UART_SetConfig+0x190>
 8007894:	4b6b      	ldr	r3, [pc, #428]	; (8007a44 <UART_SetConfig+0x2f4>)
 8007896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800789a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800789e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80078a2:	d017      	beq.n	80078d4 <UART_SetConfig+0x184>
 80078a4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80078a8:	d817      	bhi.n	80078da <UART_SetConfig+0x18a>
 80078aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078ae:	d00b      	beq.n	80078c8 <UART_SetConfig+0x178>
 80078b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80078b4:	d811      	bhi.n	80078da <UART_SetConfig+0x18a>
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d003      	beq.n	80078c2 <UART_SetConfig+0x172>
 80078ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80078be:	d006      	beq.n	80078ce <UART_SetConfig+0x17e>
 80078c0:	e00b      	b.n	80078da <UART_SetConfig+0x18a>
 80078c2:	2300      	movs	r3, #0
 80078c4:	76fb      	strb	r3, [r7, #27]
 80078c6:	e00d      	b.n	80078e4 <UART_SetConfig+0x194>
 80078c8:	2302      	movs	r3, #2
 80078ca:	76fb      	strb	r3, [r7, #27]
 80078cc:	e00a      	b.n	80078e4 <UART_SetConfig+0x194>
 80078ce:	2304      	movs	r3, #4
 80078d0:	76fb      	strb	r3, [r7, #27]
 80078d2:	e007      	b.n	80078e4 <UART_SetConfig+0x194>
 80078d4:	2308      	movs	r3, #8
 80078d6:	76fb      	strb	r3, [r7, #27]
 80078d8:	e004      	b.n	80078e4 <UART_SetConfig+0x194>
 80078da:	2310      	movs	r3, #16
 80078dc:	76fb      	strb	r3, [r7, #27]
 80078de:	e001      	b.n	80078e4 <UART_SetConfig+0x194>
 80078e0:	2310      	movs	r3, #16
 80078e2:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	4a54      	ldr	r2, [pc, #336]	; (8007a3c <UART_SetConfig+0x2ec>)
 80078ea:	4293      	cmp	r3, r2
 80078ec:	d173      	bne.n	80079d6 <UART_SetConfig+0x286>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80078ee:	7efb      	ldrb	r3, [r7, #27]
 80078f0:	2b08      	cmp	r3, #8
 80078f2:	d824      	bhi.n	800793e <UART_SetConfig+0x1ee>
 80078f4:	a201      	add	r2, pc, #4	; (adr r2, 80078fc <UART_SetConfig+0x1ac>)
 80078f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078fa:	bf00      	nop
 80078fc:	08007921 	.word	0x08007921
 8007900:	0800793f 	.word	0x0800793f
 8007904:	08007929 	.word	0x08007929
 8007908:	0800793f 	.word	0x0800793f
 800790c:	0800792f 	.word	0x0800792f
 8007910:	0800793f 	.word	0x0800793f
 8007914:	0800793f 	.word	0x0800793f
 8007918:	0800793f 	.word	0x0800793f
 800791c:	08007937 	.word	0x08007937
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007920:	f7fe f902 	bl	8005b28 <HAL_RCC_GetPCLK1Freq>
 8007924:	6178      	str	r0, [r7, #20]
        break;
 8007926:	e00f      	b.n	8007948 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007928:	4b48      	ldr	r3, [pc, #288]	; (8007a4c <UART_SetConfig+0x2fc>)
 800792a:	617b      	str	r3, [r7, #20]
        break;
 800792c:	e00c      	b.n	8007948 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800792e:	f7fe f863 	bl	80059f8 <HAL_RCC_GetSysClockFreq>
 8007932:	6178      	str	r0, [r7, #20]
        break;
 8007934:	e008      	b.n	8007948 <UART_SetConfig+0x1f8>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007936:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800793a:	617b      	str	r3, [r7, #20]
        break;
 800793c:	e004      	b.n	8007948 <UART_SetConfig+0x1f8>
      default:
        pclk = 0U;
 800793e:	2300      	movs	r3, #0
 8007940:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007942:	2301      	movs	r3, #1
 8007944:	76bb      	strb	r3, [r7, #26]
        break;
 8007946:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007948:	697b      	ldr	r3, [r7, #20]
 800794a:	2b00      	cmp	r3, #0
 800794c:	f000 80fc 	beq.w	8007b48 <UART_SetConfig+0x3f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	685a      	ldr	r2, [r3, #4]
 8007954:	4613      	mov	r3, r2
 8007956:	005b      	lsls	r3, r3, #1
 8007958:	4413      	add	r3, r2
 800795a:	697a      	ldr	r2, [r7, #20]
 800795c:	429a      	cmp	r2, r3
 800795e:	d305      	bcc.n	800796c <UART_SetConfig+0x21c>
          (pclk > (4096U * huart->Init.BaudRate)))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8007966:	697a      	ldr	r2, [r7, #20]
 8007968:	429a      	cmp	r2, r3
 800796a:	d902      	bls.n	8007972 <UART_SetConfig+0x222>
      {
        ret = HAL_ERROR;
 800796c:	2301      	movs	r3, #1
 800796e:	76bb      	strb	r3, [r7, #26]
 8007970:	e0ea      	b.n	8007b48 <UART_SetConfig+0x3f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	4618      	mov	r0, r3
 8007976:	f04f 0100 	mov.w	r1, #0
 800797a:	f04f 0200 	mov.w	r2, #0
 800797e:	f04f 0300 	mov.w	r3, #0
 8007982:	020b      	lsls	r3, r1, #8
 8007984:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007988:	0202      	lsls	r2, r0, #8
 800798a:	6879      	ldr	r1, [r7, #4]
 800798c:	6849      	ldr	r1, [r1, #4]
 800798e:	0849      	lsrs	r1, r1, #1
 8007990:	4608      	mov	r0, r1
 8007992:	f04f 0100 	mov.w	r1, #0
 8007996:	1814      	adds	r4, r2, r0
 8007998:	eb43 0501 	adc.w	r5, r3, r1
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	685b      	ldr	r3, [r3, #4]
 80079a0:	461a      	mov	r2, r3
 80079a2:	f04f 0300 	mov.w	r3, #0
 80079a6:	4620      	mov	r0, r4
 80079a8:	4629      	mov	r1, r5
 80079aa:	f7f9 f96d 	bl	8000c88 <__aeabi_uldivmod>
 80079ae:	4602      	mov	r2, r0
 80079b0:	460b      	mov	r3, r1
 80079b2:	4613      	mov	r3, r2
 80079b4:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80079b6:	693b      	ldr	r3, [r7, #16]
 80079b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80079bc:	d308      	bcc.n	80079d0 <UART_SetConfig+0x280>
 80079be:	693b      	ldr	r3, [r7, #16]
 80079c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80079c4:	d204      	bcs.n	80079d0 <UART_SetConfig+0x280>
        {
          huart->Instance->BRR = usartdiv;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	693a      	ldr	r2, [r7, #16]
 80079cc:	60da      	str	r2, [r3, #12]
 80079ce:	e0bb      	b.n	8007b48 <UART_SetConfig+0x3f8>
        }
        else
        {
          ret = HAL_ERROR;
 80079d0:	2301      	movs	r3, #1
 80079d2:	76bb      	strb	r3, [r7, #26]
 80079d4:	e0b8      	b.n	8007b48 <UART_SetConfig+0x3f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	69db      	ldr	r3, [r3, #28]
 80079da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80079de:	d167      	bne.n	8007ab0 <UART_SetConfig+0x360>
  {
    switch (clocksource)
 80079e0:	7efb      	ldrb	r3, [r7, #27]
 80079e2:	2b08      	cmp	r3, #8
 80079e4:	d834      	bhi.n	8007a50 <UART_SetConfig+0x300>
 80079e6:	a201      	add	r2, pc, #4	; (adr r2, 80079ec <UART_SetConfig+0x29c>)
 80079e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ec:	08007a11 	.word	0x08007a11
 80079f0:	08007a19 	.word	0x08007a19
 80079f4:	08007a21 	.word	0x08007a21
 80079f8:	08007a51 	.word	0x08007a51
 80079fc:	08007a27 	.word	0x08007a27
 8007a00:	08007a51 	.word	0x08007a51
 8007a04:	08007a51 	.word	0x08007a51
 8007a08:	08007a51 	.word	0x08007a51
 8007a0c:	08007a2f 	.word	0x08007a2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a10:	f7fe f88a 	bl	8005b28 <HAL_RCC_GetPCLK1Freq>
 8007a14:	6178      	str	r0, [r7, #20]
        break;
 8007a16:	e020      	b.n	8007a5a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a18:	f7fe f89c 	bl	8005b54 <HAL_RCC_GetPCLK2Freq>
 8007a1c:	6178      	str	r0, [r7, #20]
        break;
 8007a1e:	e01c      	b.n	8007a5a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a20:	4b0a      	ldr	r3, [pc, #40]	; (8007a4c <UART_SetConfig+0x2fc>)
 8007a22:	617b      	str	r3, [r7, #20]
        break;
 8007a24:	e019      	b.n	8007a5a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a26:	f7fd ffe7 	bl	80059f8 <HAL_RCC_GetSysClockFreq>
 8007a2a:	6178      	str	r0, [r7, #20]
        break;
 8007a2c:	e015      	b.n	8007a5a <UART_SetConfig+0x30a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a32:	617b      	str	r3, [r7, #20]
        break;
 8007a34:	e011      	b.n	8007a5a <UART_SetConfig+0x30a>
 8007a36:	bf00      	nop
 8007a38:	efff69f3 	.word	0xefff69f3
 8007a3c:	40008000 	.word	0x40008000
 8007a40:	40013800 	.word	0x40013800
 8007a44:	40021000 	.word	0x40021000
 8007a48:	40004400 	.word	0x40004400
 8007a4c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8007a50:	2300      	movs	r3, #0
 8007a52:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	76bb      	strb	r3, [r7, #26]
        break;
 8007a58:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d073      	beq.n	8007b48 <UART_SetConfig+0x3f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007a60:	697b      	ldr	r3, [r7, #20]
 8007a62:	005a      	lsls	r2, r3, #1
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	685b      	ldr	r3, [r3, #4]
 8007a68:	085b      	lsrs	r3, r3, #1
 8007a6a:	441a      	add	r2, r3
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a74:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a76:	693b      	ldr	r3, [r7, #16]
 8007a78:	2b0f      	cmp	r3, #15
 8007a7a:	d916      	bls.n	8007aaa <UART_SetConfig+0x35a>
 8007a7c:	693b      	ldr	r3, [r7, #16]
 8007a7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a82:	d212      	bcs.n	8007aaa <UART_SetConfig+0x35a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a84:	693b      	ldr	r3, [r7, #16]
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	f023 030f 	bic.w	r3, r3, #15
 8007a8c:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	085b      	lsrs	r3, r3, #1
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	f003 0307 	and.w	r3, r3, #7
 8007a98:	b29a      	uxth	r2, r3
 8007a9a:	89fb      	ldrh	r3, [r7, #14]
 8007a9c:	4313      	orrs	r3, r2
 8007a9e:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	89fa      	ldrh	r2, [r7, #14]
 8007aa6:	60da      	str	r2, [r3, #12]
 8007aa8:	e04e      	b.n	8007b48 <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 8007aaa:	2301      	movs	r3, #1
 8007aac:	76bb      	strb	r3, [r7, #26]
 8007aae:	e04b      	b.n	8007b48 <UART_SetConfig+0x3f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007ab0:	7efb      	ldrb	r3, [r7, #27]
 8007ab2:	2b08      	cmp	r3, #8
 8007ab4:	d827      	bhi.n	8007b06 <UART_SetConfig+0x3b6>
 8007ab6:	a201      	add	r2, pc, #4	; (adr r2, 8007abc <UART_SetConfig+0x36c>)
 8007ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007abc:	08007ae1 	.word	0x08007ae1
 8007ac0:	08007ae9 	.word	0x08007ae9
 8007ac4:	08007af1 	.word	0x08007af1
 8007ac8:	08007b07 	.word	0x08007b07
 8007acc:	08007af7 	.word	0x08007af7
 8007ad0:	08007b07 	.word	0x08007b07
 8007ad4:	08007b07 	.word	0x08007b07
 8007ad8:	08007b07 	.word	0x08007b07
 8007adc:	08007aff 	.word	0x08007aff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007ae0:	f7fe f822 	bl	8005b28 <HAL_RCC_GetPCLK1Freq>
 8007ae4:	6178      	str	r0, [r7, #20]
        break;
 8007ae6:	e013      	b.n	8007b10 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007ae8:	f7fe f834 	bl	8005b54 <HAL_RCC_GetPCLK2Freq>
 8007aec:	6178      	str	r0, [r7, #20]
        break;
 8007aee:	e00f      	b.n	8007b10 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007af0:	4b1b      	ldr	r3, [pc, #108]	; (8007b60 <UART_SetConfig+0x410>)
 8007af2:	617b      	str	r3, [r7, #20]
        break;
 8007af4:	e00c      	b.n	8007b10 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007af6:	f7fd ff7f 	bl	80059f8 <HAL_RCC_GetSysClockFreq>
 8007afa:	6178      	str	r0, [r7, #20]
        break;
 8007afc:	e008      	b.n	8007b10 <UART_SetConfig+0x3c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007afe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b02:	617b      	str	r3, [r7, #20]
        break;
 8007b04:	e004      	b.n	8007b10 <UART_SetConfig+0x3c0>
      default:
        pclk = 0U;
 8007b06:	2300      	movs	r3, #0
 8007b08:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8007b0a:	2301      	movs	r3, #1
 8007b0c:	76bb      	strb	r3, [r7, #26]
        break;
 8007b0e:	bf00      	nop
    }

    if (pclk != 0U)
 8007b10:	697b      	ldr	r3, [r7, #20]
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d018      	beq.n	8007b48 <UART_SetConfig+0x3f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	685b      	ldr	r3, [r3, #4]
 8007b1a:	085a      	lsrs	r2, r3, #1
 8007b1c:	697b      	ldr	r3, [r7, #20]
 8007b1e:	441a      	add	r2, r3
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	685b      	ldr	r3, [r3, #4]
 8007b24:	fbb2 f3f3 	udiv	r3, r2, r3
 8007b28:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007b2a:	693b      	ldr	r3, [r7, #16]
 8007b2c:	2b0f      	cmp	r3, #15
 8007b2e:	d909      	bls.n	8007b44 <UART_SetConfig+0x3f4>
 8007b30:	693b      	ldr	r3, [r7, #16]
 8007b32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b36:	d205      	bcs.n	8007b44 <UART_SetConfig+0x3f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007b38:	693b      	ldr	r3, [r7, #16]
 8007b3a:	b29a      	uxth	r2, r3
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	60da      	str	r2, [r3, #12]
 8007b42:	e001      	b.n	8007b48 <UART_SetConfig+0x3f8>
      }
      else
      {
        ret = HAL_ERROR;
 8007b44:	2301      	movs	r3, #1
 8007b46:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2200      	movs	r2, #0
 8007b52:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007b54:	7ebb      	ldrb	r3, [r7, #26]
}
 8007b56:	4618      	mov	r0, r3
 8007b58:	3720      	adds	r7, #32
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bdb0      	pop	{r4, r5, r7, pc}
 8007b5e:	bf00      	nop
 8007b60:	00f42400 	.word	0x00f42400

08007b64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b64:	b480      	push	{r7}
 8007b66:	b083      	sub	sp, #12
 8007b68:	af00      	add	r7, sp, #0
 8007b6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b70:	f003 0301 	and.w	r3, r3, #1
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d00a      	beq.n	8007b8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	430a      	orrs	r2, r1
 8007b8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b92:	f003 0302 	and.w	r3, r3, #2
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00a      	beq.n	8007bb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	430a      	orrs	r2, r1
 8007bae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bb4:	f003 0304 	and.w	r3, r3, #4
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d00a      	beq.n	8007bd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	685b      	ldr	r3, [r3, #4]
 8007bc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	430a      	orrs	r2, r1
 8007bd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd6:	f003 0308 	and.w	r3, r3, #8
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00a      	beq.n	8007bf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	685b      	ldr	r3, [r3, #4]
 8007be4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	430a      	orrs	r2, r1
 8007bf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf8:	f003 0310 	and.w	r3, r3, #16
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d00a      	beq.n	8007c16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	689b      	ldr	r3, [r3, #8]
 8007c06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	430a      	orrs	r2, r1
 8007c14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c1a:	f003 0320 	and.w	r3, r3, #32
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00a      	beq.n	8007c38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	430a      	orrs	r2, r1
 8007c36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d01a      	beq.n	8007c7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	430a      	orrs	r2, r1
 8007c58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c62:	d10a      	bne.n	8007c7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	430a      	orrs	r2, r1
 8007c78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d00a      	beq.n	8007c9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	430a      	orrs	r2, r1
 8007c9a:	605a      	str	r2, [r3, #4]
  }
}
 8007c9c:	bf00      	nop
 8007c9e:	370c      	adds	r7, #12
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b086      	sub	sp, #24
 8007cac:	af02      	add	r7, sp, #8
 8007cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007cb8:	f7fa ffec 	bl	8002c94 <HAL_GetTick>
 8007cbc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f003 0308 	and.w	r3, r3, #8
 8007cc8:	2b08      	cmp	r3, #8
 8007cca:	d10e      	bne.n	8007cea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ccc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007cd0:	9300      	str	r3, [sp, #0]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 f82d 	bl	8007d3a <UART_WaitOnFlagUntilTimeout>
 8007ce0:	4603      	mov	r3, r0
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d001      	beq.n	8007cea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ce6:	2303      	movs	r3, #3
 8007ce8:	e023      	b.n	8007d32 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	f003 0304 	and.w	r3, r3, #4
 8007cf4:	2b04      	cmp	r3, #4
 8007cf6:	d10e      	bne.n	8007d16 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007cf8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007cfc:	9300      	str	r3, [sp, #0]
 8007cfe:	68fb      	ldr	r3, [r7, #12]
 8007d00:	2200      	movs	r2, #0
 8007d02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007d06:	6878      	ldr	r0, [r7, #4]
 8007d08:	f000 f817 	bl	8007d3a <UART_WaitOnFlagUntilTimeout>
 8007d0c:	4603      	mov	r3, r0
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d001      	beq.n	8007d16 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007d12:	2303      	movs	r3, #3
 8007d14:	e00d      	b.n	8007d32 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2220      	movs	r2, #32
 8007d1a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2220      	movs	r2, #32
 8007d20:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	2200      	movs	r2, #0
 8007d26:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007d30:	2300      	movs	r3, #0
}
 8007d32:	4618      	mov	r0, r3
 8007d34:	3710      	adds	r7, #16
 8007d36:	46bd      	mov	sp, r7
 8007d38:	bd80      	pop	{r7, pc}

08007d3a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007d3a:	b580      	push	{r7, lr}
 8007d3c:	b09c      	sub	sp, #112	; 0x70
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	60f8      	str	r0, [r7, #12]
 8007d42:	60b9      	str	r1, [r7, #8]
 8007d44:	603b      	str	r3, [r7, #0]
 8007d46:	4613      	mov	r3, r2
 8007d48:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007d4a:	e0a5      	b.n	8007e98 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d52:	f000 80a1 	beq.w	8007e98 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d56:	f7fa ff9d 	bl	8002c94 <HAL_GetTick>
 8007d5a:	4602      	mov	r2, r0
 8007d5c:	683b      	ldr	r3, [r7, #0]
 8007d5e:	1ad3      	subs	r3, r2, r3
 8007d60:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d302      	bcc.n	8007d6c <UART_WaitOnFlagUntilTimeout+0x32>
 8007d66:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d13e      	bne.n	8007dea <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d74:	e853 3f00 	ldrex	r3, [r3]
 8007d78:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d7c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007d80:	667b      	str	r3, [r7, #100]	; 0x64
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	461a      	mov	r2, r3
 8007d88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d8a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007d8c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007d90:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007d92:	e841 2300 	strex	r3, r2, [r1]
 8007d96:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007d98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d1e6      	bne.n	8007d6c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	3308      	adds	r3, #8
 8007da4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007da6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007da8:	e853 3f00 	ldrex	r3, [r3]
 8007dac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db0:	f023 0301 	bic.w	r3, r3, #1
 8007db4:	663b      	str	r3, [r7, #96]	; 0x60
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	3308      	adds	r3, #8
 8007dbc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007dbe:	64ba      	str	r2, [r7, #72]	; 0x48
 8007dc0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007dc4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dc6:	e841 2300 	strex	r3, r2, [r1]
 8007dca:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007dcc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d1e5      	bne.n	8007d9e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	2220      	movs	r2, #32
 8007dd6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	2220      	movs	r2, #32
 8007ddc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2200      	movs	r2, #0
 8007de2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007de6:	2303      	movs	r3, #3
 8007de8:	e067      	b.n	8007eba <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f003 0304 	and.w	r3, r3, #4
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d04f      	beq.n	8007e98 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	69db      	ldr	r3, [r3, #28]
 8007dfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007e02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e06:	d147      	bne.n	8007e98 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007e10:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1a:	e853 3f00 	ldrex	r3, [r3]
 8007e1e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e22:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007e26:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e30:	637b      	str	r3, [r7, #52]	; 0x34
 8007e32:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e34:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007e36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e38:	e841 2300 	strex	r3, r2, [r1]
 8007e3c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d1e6      	bne.n	8007e12 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	3308      	adds	r3, #8
 8007e4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e4c:	697b      	ldr	r3, [r7, #20]
 8007e4e:	e853 3f00 	ldrex	r3, [r3]
 8007e52:	613b      	str	r3, [r7, #16]
   return(result);
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	f023 0301 	bic.w	r3, r3, #1
 8007e5a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	3308      	adds	r3, #8
 8007e62:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007e64:	623a      	str	r2, [r7, #32]
 8007e66:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e68:	69f9      	ldr	r1, [r7, #28]
 8007e6a:	6a3a      	ldr	r2, [r7, #32]
 8007e6c:	e841 2300 	strex	r3, r2, [r1]
 8007e70:	61bb      	str	r3, [r7, #24]
   return(result);
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d1e5      	bne.n	8007e44 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	2220      	movs	r2, #32
 8007e7c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	2220      	movs	r2, #32
 8007e82:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	2220      	movs	r2, #32
 8007e88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007e94:	2303      	movs	r3, #3
 8007e96:	e010      	b.n	8007eba <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	69da      	ldr	r2, [r3, #28]
 8007e9e:	68bb      	ldr	r3, [r7, #8]
 8007ea0:	4013      	ands	r3, r2
 8007ea2:	68ba      	ldr	r2, [r7, #8]
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	bf0c      	ite	eq
 8007ea8:	2301      	moveq	r3, #1
 8007eaa:	2300      	movne	r3, #0
 8007eac:	b2db      	uxtb	r3, r3
 8007eae:	461a      	mov	r2, r3
 8007eb0:	79fb      	ldrb	r3, [r7, #7]
 8007eb2:	429a      	cmp	r2, r3
 8007eb4:	f43f af4a 	beq.w	8007d4c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007eb8:	2300      	movs	r3, #0
}
 8007eba:	4618      	mov	r0, r3
 8007ebc:	3770      	adds	r7, #112	; 0x70
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bd80      	pop	{r7, pc}
	...

08007ec4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007ec4:	b480      	push	{r7}
 8007ec6:	b097      	sub	sp, #92	; 0x5c
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	60f8      	str	r0, [r7, #12]
 8007ecc:	60b9      	str	r1, [r7, #8]
 8007ece:	4613      	mov	r3, r2
 8007ed0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	68ba      	ldr	r2, [r7, #8]
 8007ed6:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	88fa      	ldrh	r2, [r7, #6]
 8007edc:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	88fa      	ldrh	r2, [r7, #6]
 8007ee4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	2200      	movs	r2, #0
 8007eec:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	689b      	ldr	r3, [r3, #8]
 8007ef2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ef6:	d10e      	bne.n	8007f16 <UART_Start_Receive_IT+0x52>
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	691b      	ldr	r3, [r3, #16]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d105      	bne.n	8007f0c <UART_Start_Receive_IT+0x48>
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	f240 12ff 	movw	r2, #511	; 0x1ff
 8007f06:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007f0a:	e02d      	b.n	8007f68 <UART_Start_Receive_IT+0xa4>
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	22ff      	movs	r2, #255	; 0xff
 8007f10:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007f14:	e028      	b.n	8007f68 <UART_Start_Receive_IT+0xa4>
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d10d      	bne.n	8007f3a <UART_Start_Receive_IT+0x76>
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	691b      	ldr	r3, [r3, #16]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d104      	bne.n	8007f30 <UART_Start_Receive_IT+0x6c>
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	22ff      	movs	r2, #255	; 0xff
 8007f2a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007f2e:	e01b      	b.n	8007f68 <UART_Start_Receive_IT+0xa4>
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	227f      	movs	r2, #127	; 0x7f
 8007f34:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007f38:	e016      	b.n	8007f68 <UART_Start_Receive_IT+0xa4>
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007f42:	d10d      	bne.n	8007f60 <UART_Start_Receive_IT+0x9c>
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	691b      	ldr	r3, [r3, #16]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d104      	bne.n	8007f56 <UART_Start_Receive_IT+0x92>
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	227f      	movs	r2, #127	; 0x7f
 8007f50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007f54:	e008      	b.n	8007f68 <UART_Start_Receive_IT+0xa4>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	223f      	movs	r2, #63	; 0x3f
 8007f5a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007f5e:	e003      	b.n	8007f68 <UART_Start_Receive_IT+0xa4>
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2200      	movs	r2, #0
 8007f64:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	2222      	movs	r2, #34	; 0x22
 8007f74:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	3308      	adds	r3, #8
 8007f7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f80:	e853 3f00 	ldrex	r3, [r3]
 8007f84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f88:	f043 0301 	orr.w	r3, r3, #1
 8007f8c:	657b      	str	r3, [r7, #84]	; 0x54
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	3308      	adds	r3, #8
 8007f94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007f96:	64ba      	str	r2, [r7, #72]	; 0x48
 8007f98:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007f9c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f9e:	e841 2300 	strex	r3, r2, [r1]
 8007fa2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007fa4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d1e5      	bne.n	8007f76 <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007fb2:	d107      	bne.n	8007fc4 <UART_Start_Receive_IT+0x100>
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	691b      	ldr	r3, [r3, #16]
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d103      	bne.n	8007fc4 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	4a24      	ldr	r2, [pc, #144]	; (8008050 <UART_Start_Receive_IT+0x18c>)
 8007fc0:	665a      	str	r2, [r3, #100]	; 0x64
 8007fc2:	e002      	b.n	8007fca <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	4a23      	ldr	r2, [pc, #140]	; (8008054 <UART_Start_Receive_IT+0x190>)
 8007fc8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	691b      	ldr	r3, [r3, #16]
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d019      	beq.n	800800e <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fe2:	e853 3f00 	ldrex	r3, [r3]
 8007fe6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fea:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007fee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	461a      	mov	r2, r3
 8007ff6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ff8:	637b      	str	r3, [r7, #52]	; 0x34
 8007ffa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ffc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007ffe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008000:	e841 2300 	strex	r3, r2, [r1]
 8008004:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008008:	2b00      	cmp	r3, #0
 800800a:	d1e6      	bne.n	8007fda <UART_Start_Receive_IT+0x116>
 800800c:	e018      	b.n	8008040 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008014:	697b      	ldr	r3, [r7, #20]
 8008016:	e853 3f00 	ldrex	r3, [r3]
 800801a:	613b      	str	r3, [r7, #16]
   return(result);
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	f043 0320 	orr.w	r3, r3, #32
 8008022:	653b      	str	r3, [r7, #80]	; 0x50
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	461a      	mov	r2, r3
 800802a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800802c:	623b      	str	r3, [r7, #32]
 800802e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008030:	69f9      	ldr	r1, [r7, #28]
 8008032:	6a3a      	ldr	r2, [r7, #32]
 8008034:	e841 2300 	strex	r3, r2, [r1]
 8008038:	61bb      	str	r3, [r7, #24]
   return(result);
 800803a:	69bb      	ldr	r3, [r7, #24]
 800803c:	2b00      	cmp	r3, #0
 800803e:	d1e6      	bne.n	800800e <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8008040:	2300      	movs	r3, #0
}
 8008042:	4618      	mov	r0, r3
 8008044:	375c      	adds	r7, #92	; 0x5c
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr
 800804e:	bf00      	nop
 8008050:	08008477 	.word	0x08008477
 8008054:	08008317 	.word	0x08008317

08008058 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008058:	b480      	push	{r7}
 800805a:	b095      	sub	sp, #84	; 0x54
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008068:	e853 3f00 	ldrex	r3, [r3]
 800806c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800806e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008070:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008074:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	461a      	mov	r2, r3
 800807c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800807e:	643b      	str	r3, [r7, #64]	; 0x40
 8008080:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008082:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008084:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008086:	e841 2300 	strex	r3, r2, [r1]
 800808a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800808c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800808e:	2b00      	cmp	r3, #0
 8008090:	d1e6      	bne.n	8008060 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	681b      	ldr	r3, [r3, #0]
 8008096:	3308      	adds	r3, #8
 8008098:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800809a:	6a3b      	ldr	r3, [r7, #32]
 800809c:	e853 3f00 	ldrex	r3, [r3]
 80080a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80080a2:	69fb      	ldr	r3, [r7, #28]
 80080a4:	f023 0301 	bic.w	r3, r3, #1
 80080a8:	64bb      	str	r3, [r7, #72]	; 0x48
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	3308      	adds	r3, #8
 80080b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80080b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80080b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80080b8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80080ba:	e841 2300 	strex	r3, r2, [r1]
 80080be:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d1e5      	bne.n	8008092 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d118      	bne.n	8008100 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	e853 3f00 	ldrex	r3, [r3]
 80080da:	60bb      	str	r3, [r7, #8]
   return(result);
 80080dc:	68bb      	ldr	r3, [r7, #8]
 80080de:	f023 0310 	bic.w	r3, r3, #16
 80080e2:	647b      	str	r3, [r7, #68]	; 0x44
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	461a      	mov	r2, r3
 80080ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080ec:	61bb      	str	r3, [r7, #24]
 80080ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f0:	6979      	ldr	r1, [r7, #20]
 80080f2:	69ba      	ldr	r2, [r7, #24]
 80080f4:	e841 2300 	strex	r3, r2, [r1]
 80080f8:	613b      	str	r3, [r7, #16]
   return(result);
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d1e6      	bne.n	80080ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2220      	movs	r2, #32
 8008104:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2200      	movs	r2, #0
 8008110:	665a      	str	r2, [r3, #100]	; 0x64
}
 8008112:	bf00      	nop
 8008114:	3754      	adds	r7, #84	; 0x54
 8008116:	46bd      	mov	sp, r7
 8008118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811c:	4770      	bx	lr

0800811e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800811e:	b580      	push	{r7, lr}
 8008120:	b084      	sub	sp, #16
 8008122:	af00      	add	r7, sp, #0
 8008124:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800812a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	2200      	movs	r2, #0
 8008130:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	2200      	movs	r2, #0
 8008138:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800813c:	68f8      	ldr	r0, [r7, #12]
 800813e:	f7ff faf1 	bl	8007724 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008142:	bf00      	nop
 8008144:	3710      	adds	r7, #16
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}

0800814a <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800814a:	b480      	push	{r7}
 800814c:	b08f      	sub	sp, #60	; 0x3c
 800814e:	af00      	add	r7, sp, #0
 8008150:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008156:	2b21      	cmp	r3, #33	; 0x21
 8008158:	d14d      	bne.n	80081f6 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008160:	b29b      	uxth	r3, r3
 8008162:	2b00      	cmp	r3, #0
 8008164:	d132      	bne.n	80081cc <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800816c:	6a3b      	ldr	r3, [r7, #32]
 800816e:	e853 3f00 	ldrex	r3, [r3]
 8008172:	61fb      	str	r3, [r7, #28]
   return(result);
 8008174:	69fb      	ldr	r3, [r7, #28]
 8008176:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800817a:	637b      	str	r3, [r7, #52]	; 0x34
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	461a      	mov	r2, r3
 8008182:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008184:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008186:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008188:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800818a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800818c:	e841 2300 	strex	r3, r2, [r1]
 8008190:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008194:	2b00      	cmp	r3, #0
 8008196:	d1e6      	bne.n	8008166 <UART_TxISR_8BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	e853 3f00 	ldrex	r3, [r3]
 80081a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081ac:	633b      	str	r3, [r7, #48]	; 0x30
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	461a      	mov	r2, r3
 80081b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80081b6:	61bb      	str	r3, [r7, #24]
 80081b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ba:	6979      	ldr	r1, [r7, #20]
 80081bc:	69ba      	ldr	r2, [r7, #24]
 80081be:	e841 2300 	strex	r3, r2, [r1]
 80081c2:	613b      	str	r3, [r7, #16]
   return(result);
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d1e6      	bne.n	8008198 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80081ca:	e014      	b.n	80081f6 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081d0:	781a      	ldrb	r2, [r3, #0]
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	b292      	uxth	r2, r2
 80081d8:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081de:	1c5a      	adds	r2, r3, #1
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	3b01      	subs	r3, #1
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80081f6:	bf00      	nop
 80081f8:	373c      	adds	r7, #60	; 0x3c
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr

08008202 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008202:	b480      	push	{r7}
 8008204:	b091      	sub	sp, #68	; 0x44
 8008206:	af00      	add	r7, sp, #0
 8008208:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800820e:	2b21      	cmp	r3, #33	; 0x21
 8008210:	d151      	bne.n	80082b6 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008218:	b29b      	uxth	r3, r3
 800821a:	2b00      	cmp	r3, #0
 800821c:	d132      	bne.n	8008284 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008226:	e853 3f00 	ldrex	r3, [r3]
 800822a:	623b      	str	r3, [r7, #32]
   return(result);
 800822c:	6a3b      	ldr	r3, [r7, #32]
 800822e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008232:	63bb      	str	r3, [r7, #56]	; 0x38
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	461a      	mov	r2, r3
 800823a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800823c:	633b      	str	r3, [r7, #48]	; 0x30
 800823e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008240:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008242:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008244:	e841 2300 	strex	r3, r2, [r1]
 8008248:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800824a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800824c:	2b00      	cmp	r3, #0
 800824e:	d1e6      	bne.n	800821e <UART_TxISR_16BIT+0x1c>
#endif /* USART_CR1_FIFOEN */

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	e853 3f00 	ldrex	r3, [r3]
 800825c:	60fb      	str	r3, [r7, #12]
   return(result);
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008264:	637b      	str	r3, [r7, #52]	; 0x34
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	461a      	mov	r2, r3
 800826c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800826e:	61fb      	str	r3, [r7, #28]
 8008270:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008272:	69b9      	ldr	r1, [r7, #24]
 8008274:	69fa      	ldr	r2, [r7, #28]
 8008276:	e841 2300 	strex	r3, r2, [r1]
 800827a:	617b      	str	r3, [r7, #20]
   return(result);
 800827c:	697b      	ldr	r3, [r7, #20]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d1e6      	bne.n	8008250 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008282:	e018      	b.n	80082b6 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008288:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800828a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800828c:	881a      	ldrh	r2, [r3, #0]
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008296:	b292      	uxth	r2, r2
 8008298:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800829e:	1c9a      	adds	r2, r3, #2
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80082aa:	b29b      	uxth	r3, r3
 80082ac:	3b01      	subs	r3, #1
 80082ae:	b29a      	uxth	r2, r3
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80082b6:	bf00      	nop
 80082b8:	3744      	adds	r7, #68	; 0x44
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr

080082c2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80082c2:	b580      	push	{r7, lr}
 80082c4:	b088      	sub	sp, #32
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	e853 3f00 	ldrex	r3, [r3]
 80082d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082de:	61fb      	str	r3, [r7, #28]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	461a      	mov	r2, r3
 80082e6:	69fb      	ldr	r3, [r7, #28]
 80082e8:	61bb      	str	r3, [r7, #24]
 80082ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ec:	6979      	ldr	r1, [r7, #20]
 80082ee:	69ba      	ldr	r2, [r7, #24]
 80082f0:	e841 2300 	strex	r3, r2, [r1]
 80082f4:	613b      	str	r3, [r7, #16]
   return(result);
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d1e6      	bne.n	80082ca <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	2220      	movs	r2, #32
 8008300:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2200      	movs	r2, #0
 8008306:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f7ff fa01 	bl	8007710 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800830e:	bf00      	nop
 8008310:	3720      	adds	r7, #32
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008316:	b580      	push	{r7, lr}
 8008318:	b096      	sub	sp, #88	; 0x58
 800831a:	af00      	add	r7, sp, #0
 800831c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008324:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800832c:	2b22      	cmp	r3, #34	; 0x22
 800832e:	f040 8094 	bne.w	800845a <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008338:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800833c:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008340:	b2d9      	uxtb	r1, r3
 8008342:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008346:	b2da      	uxtb	r2, r3
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800834c:	400a      	ands	r2, r1
 800834e:	b2d2      	uxtb	r2, r2
 8008350:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008356:	1c5a      	adds	r2, r3, #1
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008362:	b29b      	uxth	r3, r3
 8008364:	3b01      	subs	r3, #1
 8008366:	b29a      	uxth	r2, r3
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008374:	b29b      	uxth	r3, r3
 8008376:	2b00      	cmp	r3, #0
 8008378:	d179      	bne.n	800846e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008382:	e853 3f00 	ldrex	r3, [r3]
 8008386:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800838a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800838e:	653b      	str	r3, [r7, #80]	; 0x50
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	461a      	mov	r2, r3
 8008396:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008398:	647b      	str	r3, [r7, #68]	; 0x44
 800839a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800839c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800839e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80083a0:	e841 2300 	strex	r3, r2, [r1]
 80083a4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80083a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d1e6      	bne.n	800837a <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	3308      	adds	r3, #8
 80083b2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083b6:	e853 3f00 	ldrex	r3, [r3]
 80083ba:	623b      	str	r3, [r7, #32]
   return(result);
 80083bc:	6a3b      	ldr	r3, [r7, #32]
 80083be:	f023 0301 	bic.w	r3, r3, #1
 80083c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	3308      	adds	r3, #8
 80083ca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80083cc:	633a      	str	r2, [r7, #48]	; 0x30
 80083ce:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083d0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80083d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80083d4:	e841 2300 	strex	r3, r2, [r1]
 80083d8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80083da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d1e5      	bne.n	80083ac <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2220      	movs	r2, #32
 80083e4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2200      	movs	r2, #0
 80083ea:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80083f0:	2b01      	cmp	r3, #1
 80083f2:	d12e      	bne.n	8008452 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	2200      	movs	r2, #0
 80083f8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	e853 3f00 	ldrex	r3, [r3]
 8008406:	60fb      	str	r3, [r7, #12]
   return(result);
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f023 0310 	bic.w	r3, r3, #16
 800840e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	461a      	mov	r2, r3
 8008416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008418:	61fb      	str	r3, [r7, #28]
 800841a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841c:	69b9      	ldr	r1, [r7, #24]
 800841e:	69fa      	ldr	r2, [r7, #28]
 8008420:	e841 2300 	strex	r3, r2, [r1]
 8008424:	617b      	str	r3, [r7, #20]
   return(result);
 8008426:	697b      	ldr	r3, [r7, #20]
 8008428:	2b00      	cmp	r3, #0
 800842a:	d1e6      	bne.n	80083fa <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	69db      	ldr	r3, [r3, #28]
 8008432:	f003 0310 	and.w	r3, r3, #16
 8008436:	2b10      	cmp	r3, #16
 8008438:	d103      	bne.n	8008442 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	2210      	movs	r2, #16
 8008440:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008448:	4619      	mov	r1, r3
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f7ff f974 	bl	8007738 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008450:	e00d      	b.n	800846e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008452:	6878      	ldr	r0, [r7, #4]
 8008454:	f7f8 ffc0 	bl	80013d8 <HAL_UART_RxCpltCallback>
}
 8008458:	e009      	b.n	800846e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	8b1b      	ldrh	r3, [r3, #24]
 8008460:	b29a      	uxth	r2, r3
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	f042 0208 	orr.w	r2, r2, #8
 800846a:	b292      	uxth	r2, r2
 800846c:	831a      	strh	r2, [r3, #24]
}
 800846e:	bf00      	nop
 8008470:	3758      	adds	r7, #88	; 0x58
 8008472:	46bd      	mov	sp, r7
 8008474:	bd80      	pop	{r7, pc}

08008476 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008476:	b580      	push	{r7, lr}
 8008478:	b096      	sub	sp, #88	; 0x58
 800847a:	af00      	add	r7, sp, #0
 800847c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008484:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800848c:	2b22      	cmp	r3, #34	; 0x22
 800848e:	f040 8094 	bne.w	80085ba <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008498:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084a0:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80084a2:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80084a6:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80084aa:	4013      	ands	r3, r2
 80084ac:	b29a      	uxth	r2, r3
 80084ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084b0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084b6:	1c9a      	adds	r2, r3, #2
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80084c2:	b29b      	uxth	r3, r3
 80084c4:	3b01      	subs	r3, #1
 80084c6:	b29a      	uxth	r2, r3
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80084d4:	b29b      	uxth	r3, r3
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d179      	bne.n	80085ce <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084e2:	e853 3f00 	ldrex	r3, [r3]
 80084e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80084e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	461a      	mov	r2, r3
 80084f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80084f8:	643b      	str	r3, [r7, #64]	; 0x40
 80084fa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80084fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008500:	e841 2300 	strex	r3, r2, [r1]
 8008504:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008508:	2b00      	cmp	r3, #0
 800850a:	d1e6      	bne.n	80084da <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	3308      	adds	r3, #8
 8008512:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008514:	6a3b      	ldr	r3, [r7, #32]
 8008516:	e853 3f00 	ldrex	r3, [r3]
 800851a:	61fb      	str	r3, [r7, #28]
   return(result);
 800851c:	69fb      	ldr	r3, [r7, #28]
 800851e:	f023 0301 	bic.w	r3, r3, #1
 8008522:	64bb      	str	r3, [r7, #72]	; 0x48
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	3308      	adds	r3, #8
 800852a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800852c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800852e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008530:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008532:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008534:	e841 2300 	strex	r3, r2, [r1]
 8008538:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800853a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800853c:	2b00      	cmp	r3, #0
 800853e:	d1e5      	bne.n	800850c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2220      	movs	r2, #32
 8008544:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2200      	movs	r2, #0
 800854a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008550:	2b01      	cmp	r3, #1
 8008552:	d12e      	bne.n	80085b2 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	e853 3f00 	ldrex	r3, [r3]
 8008566:	60bb      	str	r3, [r7, #8]
   return(result);
 8008568:	68bb      	ldr	r3, [r7, #8]
 800856a:	f023 0310 	bic.w	r3, r3, #16
 800856e:	647b      	str	r3, [r7, #68]	; 0x44
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	461a      	mov	r2, r3
 8008576:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008578:	61bb      	str	r3, [r7, #24]
 800857a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800857c:	6979      	ldr	r1, [r7, #20]
 800857e:	69ba      	ldr	r2, [r7, #24]
 8008580:	e841 2300 	strex	r3, r2, [r1]
 8008584:	613b      	str	r3, [r7, #16]
   return(result);
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	2b00      	cmp	r3, #0
 800858a:	d1e6      	bne.n	800855a <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	69db      	ldr	r3, [r3, #28]
 8008592:	f003 0310 	and.w	r3, r3, #16
 8008596:	2b10      	cmp	r3, #16
 8008598:	d103      	bne.n	80085a2 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2210      	movs	r2, #16
 80085a0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80085a8:	4619      	mov	r1, r3
 80085aa:	6878      	ldr	r0, [r7, #4]
 80085ac:	f7ff f8c4 	bl	8007738 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80085b0:	e00d      	b.n	80085ce <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f7f8 ff10 	bl	80013d8 <HAL_UART_RxCpltCallback>
}
 80085b8:	e009      	b.n	80085ce <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	8b1b      	ldrh	r3, [r3, #24]
 80085c0:	b29a      	uxth	r2, r3
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	f042 0208 	orr.w	r2, r2, #8
 80085ca:	b292      	uxth	r2, r2
 80085cc:	831a      	strh	r2, [r3, #24]
}
 80085ce:	bf00      	nop
 80085d0:	3758      	adds	r7, #88	; 0x58
 80085d2:	46bd      	mov	sp, r7
 80085d4:	bd80      	pop	{r7, pc}

080085d6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80085d6:	b480      	push	{r7}
 80085d8:	b083      	sub	sp, #12
 80085da:	af00      	add	r7, sp, #0
 80085dc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80085de:	bf00      	nop
 80085e0:	370c      	adds	r7, #12
 80085e2:	46bd      	mov	sp, r7
 80085e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e8:	4770      	bx	lr
	...

080085ec <__NVIC_SetPriority>:
{
 80085ec:	b480      	push	{r7}
 80085ee:	b083      	sub	sp, #12
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	4603      	mov	r3, r0
 80085f4:	6039      	str	r1, [r7, #0]
 80085f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80085f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	db0a      	blt.n	8008616 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	b2da      	uxtb	r2, r3
 8008604:	490c      	ldr	r1, [pc, #48]	; (8008638 <__NVIC_SetPriority+0x4c>)
 8008606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800860a:	0112      	lsls	r2, r2, #4
 800860c:	b2d2      	uxtb	r2, r2
 800860e:	440b      	add	r3, r1
 8008610:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008614:	e00a      	b.n	800862c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008616:	683b      	ldr	r3, [r7, #0]
 8008618:	b2da      	uxtb	r2, r3
 800861a:	4908      	ldr	r1, [pc, #32]	; (800863c <__NVIC_SetPriority+0x50>)
 800861c:	79fb      	ldrb	r3, [r7, #7]
 800861e:	f003 030f 	and.w	r3, r3, #15
 8008622:	3b04      	subs	r3, #4
 8008624:	0112      	lsls	r2, r2, #4
 8008626:	b2d2      	uxtb	r2, r2
 8008628:	440b      	add	r3, r1
 800862a:	761a      	strb	r2, [r3, #24]
}
 800862c:	bf00      	nop
 800862e:	370c      	adds	r7, #12
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr
 8008638:	e000e100 	.word	0xe000e100
 800863c:	e000ed00 	.word	0xe000ed00

08008640 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008640:	b580      	push	{r7, lr}
 8008642:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008644:	4b05      	ldr	r3, [pc, #20]	; (800865c <SysTick_Handler+0x1c>)
 8008646:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008648:	f001 ff12 	bl	800a470 <xTaskGetSchedulerState>
 800864c:	4603      	mov	r3, r0
 800864e:	2b01      	cmp	r3, #1
 8008650:	d001      	beq.n	8008656 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008652:	f002 fcf9 	bl	800b048 <xPortSysTickHandler>
  }
}
 8008656:	bf00      	nop
 8008658:	bd80      	pop	{r7, pc}
 800865a:	bf00      	nop
 800865c:	e000e010 	.word	0xe000e010

08008660 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008660:	b580      	push	{r7, lr}
 8008662:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008664:	2100      	movs	r1, #0
 8008666:	f06f 0004 	mvn.w	r0, #4
 800866a:	f7ff ffbf 	bl	80085ec <__NVIC_SetPriority>
#endif
}
 800866e:	bf00      	nop
 8008670:	bd80      	pop	{r7, pc}
	...

08008674 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008674:	b480      	push	{r7}
 8008676:	b083      	sub	sp, #12
 8008678:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800867a:	f3ef 8305 	mrs	r3, IPSR
 800867e:	603b      	str	r3, [r7, #0]
  return(result);
 8008680:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008682:	2b00      	cmp	r3, #0
 8008684:	d003      	beq.n	800868e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008686:	f06f 0305 	mvn.w	r3, #5
 800868a:	607b      	str	r3, [r7, #4]
 800868c:	e00c      	b.n	80086a8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800868e:	4b0a      	ldr	r3, [pc, #40]	; (80086b8 <osKernelInitialize+0x44>)
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d105      	bne.n	80086a2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008696:	4b08      	ldr	r3, [pc, #32]	; (80086b8 <osKernelInitialize+0x44>)
 8008698:	2201      	movs	r2, #1
 800869a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800869c:	2300      	movs	r3, #0
 800869e:	607b      	str	r3, [r7, #4]
 80086a0:	e002      	b.n	80086a8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80086a2:	f04f 33ff 	mov.w	r3, #4294967295
 80086a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80086a8:	687b      	ldr	r3, [r7, #4]
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	370c      	adds	r7, #12
 80086ae:	46bd      	mov	sp, r7
 80086b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b4:	4770      	bx	lr
 80086b6:	bf00      	nop
 80086b8:	20000334 	.word	0x20000334

080086bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80086bc:	b580      	push	{r7, lr}
 80086be:	b082      	sub	sp, #8
 80086c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80086c2:	f3ef 8305 	mrs	r3, IPSR
 80086c6:	603b      	str	r3, [r7, #0]
  return(result);
 80086c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d003      	beq.n	80086d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80086ce:	f06f 0305 	mvn.w	r3, #5
 80086d2:	607b      	str	r3, [r7, #4]
 80086d4:	e010      	b.n	80086f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80086d6:	4b0b      	ldr	r3, [pc, #44]	; (8008704 <osKernelStart+0x48>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	2b01      	cmp	r3, #1
 80086dc:	d109      	bne.n	80086f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80086de:	f7ff ffbf 	bl	8008660 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80086e2:	4b08      	ldr	r3, [pc, #32]	; (8008704 <osKernelStart+0x48>)
 80086e4:	2202      	movs	r2, #2
 80086e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80086e8:	f001 fa66 	bl	8009bb8 <vTaskStartScheduler>
      stat = osOK;
 80086ec:	2300      	movs	r3, #0
 80086ee:	607b      	str	r3, [r7, #4]
 80086f0:	e002      	b.n	80086f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80086f2:	f04f 33ff 	mov.w	r3, #4294967295
 80086f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80086f8:	687b      	ldr	r3, [r7, #4]
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3708      	adds	r7, #8
 80086fe:	46bd      	mov	sp, r7
 8008700:	bd80      	pop	{r7, pc}
 8008702:	bf00      	nop
 8008704:	20000334 	.word	0x20000334

08008708 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008708:	b580      	push	{r7, lr}
 800870a:	b08e      	sub	sp, #56	; 0x38
 800870c:	af04      	add	r7, sp, #16
 800870e:	60f8      	str	r0, [r7, #12]
 8008710:	60b9      	str	r1, [r7, #8]
 8008712:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008714:	2300      	movs	r3, #0
 8008716:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008718:	f3ef 8305 	mrs	r3, IPSR
 800871c:	617b      	str	r3, [r7, #20]
  return(result);
 800871e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008720:	2b00      	cmp	r3, #0
 8008722:	d17e      	bne.n	8008822 <osThreadNew+0x11a>
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d07b      	beq.n	8008822 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800872a:	2380      	movs	r3, #128	; 0x80
 800872c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800872e:	2318      	movs	r3, #24
 8008730:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008732:	2300      	movs	r3, #0
 8008734:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008736:	f04f 33ff 	mov.w	r3, #4294967295
 800873a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d045      	beq.n	80087ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d002      	beq.n	8008750 <osThreadNew+0x48>
        name = attr->name;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	699b      	ldr	r3, [r3, #24]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d002      	beq.n	800875e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	699b      	ldr	r3, [r3, #24]
 800875c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d008      	beq.n	8008776 <osThreadNew+0x6e>
 8008764:	69fb      	ldr	r3, [r7, #28]
 8008766:	2b38      	cmp	r3, #56	; 0x38
 8008768:	d805      	bhi.n	8008776 <osThreadNew+0x6e>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	685b      	ldr	r3, [r3, #4]
 800876e:	f003 0301 	and.w	r3, r3, #1
 8008772:	2b00      	cmp	r3, #0
 8008774:	d001      	beq.n	800877a <osThreadNew+0x72>
        return (NULL);
 8008776:	2300      	movs	r3, #0
 8008778:	e054      	b.n	8008824 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	695b      	ldr	r3, [r3, #20]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d003      	beq.n	800878a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	695b      	ldr	r3, [r3, #20]
 8008786:	089b      	lsrs	r3, r3, #2
 8008788:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	689b      	ldr	r3, [r3, #8]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00e      	beq.n	80087b0 <osThreadNew+0xa8>
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	68db      	ldr	r3, [r3, #12]
 8008796:	2bbb      	cmp	r3, #187	; 0xbb
 8008798:	d90a      	bls.n	80087b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d006      	beq.n	80087b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	695b      	ldr	r3, [r3, #20]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d002      	beq.n	80087b0 <osThreadNew+0xa8>
        mem = 1;
 80087aa:	2301      	movs	r3, #1
 80087ac:	61bb      	str	r3, [r7, #24]
 80087ae:	e010      	b.n	80087d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	689b      	ldr	r3, [r3, #8]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d10c      	bne.n	80087d2 <osThreadNew+0xca>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	68db      	ldr	r3, [r3, #12]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d108      	bne.n	80087d2 <osThreadNew+0xca>
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	691b      	ldr	r3, [r3, #16]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d104      	bne.n	80087d2 <osThreadNew+0xca>
          mem = 0;
 80087c8:	2300      	movs	r3, #0
 80087ca:	61bb      	str	r3, [r7, #24]
 80087cc:	e001      	b.n	80087d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80087ce:	2300      	movs	r3, #0
 80087d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80087d2:	69bb      	ldr	r3, [r7, #24]
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d110      	bne.n	80087fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80087dc:	687a      	ldr	r2, [r7, #4]
 80087de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80087e0:	9202      	str	r2, [sp, #8]
 80087e2:	9301      	str	r3, [sp, #4]
 80087e4:	69fb      	ldr	r3, [r7, #28]
 80087e6:	9300      	str	r3, [sp, #0]
 80087e8:	68bb      	ldr	r3, [r7, #8]
 80087ea:	6a3a      	ldr	r2, [r7, #32]
 80087ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087ee:	68f8      	ldr	r0, [r7, #12]
 80087f0:	f000 fff6 	bl	80097e0 <xTaskCreateStatic>
 80087f4:	4603      	mov	r3, r0
 80087f6:	613b      	str	r3, [r7, #16]
 80087f8:	e013      	b.n	8008822 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80087fa:	69bb      	ldr	r3, [r7, #24]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d110      	bne.n	8008822 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008800:	6a3b      	ldr	r3, [r7, #32]
 8008802:	b29a      	uxth	r2, r3
 8008804:	f107 0310 	add.w	r3, r7, #16
 8008808:	9301      	str	r3, [sp, #4]
 800880a:	69fb      	ldr	r3, [r7, #28]
 800880c:	9300      	str	r3, [sp, #0]
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008812:	68f8      	ldr	r0, [r7, #12]
 8008814:	f001 f841 	bl	800989a <xTaskCreate>
 8008818:	4603      	mov	r3, r0
 800881a:	2b01      	cmp	r3, #1
 800881c:	d001      	beq.n	8008822 <osThreadNew+0x11a>
            hTask = NULL;
 800881e:	2300      	movs	r3, #0
 8008820:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008822:	693b      	ldr	r3, [r7, #16]
}
 8008824:	4618      	mov	r0, r3
 8008826:	3728      	adds	r7, #40	; 0x28
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800882c:	b580      	push	{r7, lr}
 800882e:	b084      	sub	sp, #16
 8008830:	af00      	add	r7, sp, #0
 8008832:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008834:	f3ef 8305 	mrs	r3, IPSR
 8008838:	60bb      	str	r3, [r7, #8]
  return(result);
 800883a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800883c:	2b00      	cmp	r3, #0
 800883e:	d003      	beq.n	8008848 <osDelay+0x1c>
    stat = osErrorISR;
 8008840:	f06f 0305 	mvn.w	r3, #5
 8008844:	60fb      	str	r3, [r7, #12]
 8008846:	e007      	b.n	8008858 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008848:	2300      	movs	r3, #0
 800884a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d002      	beq.n	8008858 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008852:	6878      	ldr	r0, [r7, #4]
 8008854:	f001 f97c 	bl	8009b50 <vTaskDelay>
    }
  }

  return (stat);
 8008858:	68fb      	ldr	r3, [r7, #12]
}
 800885a:	4618      	mov	r0, r3
 800885c:	3710      	adds	r7, #16
 800885e:	46bd      	mov	sp, r7
 8008860:	bd80      	pop	{r7, pc}

08008862 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8008862:	b580      	push	{r7, lr}
 8008864:	b08a      	sub	sp, #40	; 0x28
 8008866:	af02      	add	r7, sp, #8
 8008868:	60f8      	str	r0, [r7, #12]
 800886a:	60b9      	str	r1, [r7, #8]
 800886c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800886e:	2300      	movs	r3, #0
 8008870:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008872:	f3ef 8305 	mrs	r3, IPSR
 8008876:	613b      	str	r3, [r7, #16]
  return(result);
 8008878:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800887a:	2b00      	cmp	r3, #0
 800887c:	d15f      	bne.n	800893e <osMessageQueueNew+0xdc>
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d05c      	beq.n	800893e <osMessageQueueNew+0xdc>
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d059      	beq.n	800893e <osMessageQueueNew+0xdc>
    mem = -1;
 800888a:	f04f 33ff 	mov.w	r3, #4294967295
 800888e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d029      	beq.n	80088ea <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d012      	beq.n	80088c4 <osMessageQueueNew+0x62>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	68db      	ldr	r3, [r3, #12]
 80088a2:	2b4f      	cmp	r3, #79	; 0x4f
 80088a4:	d90e      	bls.n	80088c4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	d00a      	beq.n	80088c4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	695a      	ldr	r2, [r3, #20]
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	68b9      	ldr	r1, [r7, #8]
 80088b6:	fb01 f303 	mul.w	r3, r1, r3
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d302      	bcc.n	80088c4 <osMessageQueueNew+0x62>
        mem = 1;
 80088be:	2301      	movs	r3, #1
 80088c0:	61bb      	str	r3, [r7, #24]
 80088c2:	e014      	b.n	80088ee <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	689b      	ldr	r3, [r3, #8]
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d110      	bne.n	80088ee <osMessageQueueNew+0x8c>
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	68db      	ldr	r3, [r3, #12]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d10c      	bne.n	80088ee <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d108      	bne.n	80088ee <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	695b      	ldr	r3, [r3, #20]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d104      	bne.n	80088ee <osMessageQueueNew+0x8c>
          mem = 0;
 80088e4:	2300      	movs	r3, #0
 80088e6:	61bb      	str	r3, [r7, #24]
 80088e8:	e001      	b.n	80088ee <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80088ea:	2300      	movs	r3, #0
 80088ec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80088ee:	69bb      	ldr	r3, [r7, #24]
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d10b      	bne.n	800890c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	691a      	ldr	r2, [r3, #16]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	2100      	movs	r1, #0
 80088fe:	9100      	str	r1, [sp, #0]
 8008900:	68b9      	ldr	r1, [r7, #8]
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	f000 fa2e 	bl	8008d64 <xQueueGenericCreateStatic>
 8008908:	61f8      	str	r0, [r7, #28]
 800890a:	e008      	b.n	800891e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800890c:	69bb      	ldr	r3, [r7, #24]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d105      	bne.n	800891e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8008912:	2200      	movs	r2, #0
 8008914:	68b9      	ldr	r1, [r7, #8]
 8008916:	68f8      	ldr	r0, [r7, #12]
 8008918:	f000 fa9c 	bl	8008e54 <xQueueGenericCreate>
 800891c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800891e:	69fb      	ldr	r3, [r7, #28]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d00c      	beq.n	800893e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2b00      	cmp	r3, #0
 8008928:	d003      	beq.n	8008932 <osMessageQueueNew+0xd0>
        name = attr->name;
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	617b      	str	r3, [r7, #20]
 8008930:	e001      	b.n	8008936 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8008932:	2300      	movs	r3, #0
 8008934:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8008936:	6979      	ldr	r1, [r7, #20]
 8008938:	69f8      	ldr	r0, [r7, #28]
 800893a:	f000 fef3 	bl	8009724 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800893e:	69fb      	ldr	r3, [r7, #28]
}
 8008940:	4618      	mov	r0, r3
 8008942:	3720      	adds	r7, #32
 8008944:	46bd      	mov	sp, r7
 8008946:	bd80      	pop	{r7, pc}

08008948 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008948:	b580      	push	{r7, lr}
 800894a:	b088      	sub	sp, #32
 800894c:	af00      	add	r7, sp, #0
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	603b      	str	r3, [r7, #0]
 8008954:	4613      	mov	r3, r2
 8008956:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800895c:	2300      	movs	r3, #0
 800895e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008960:	f3ef 8305 	mrs	r3, IPSR
 8008964:	617b      	str	r3, [r7, #20]
  return(result);
 8008966:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008968:	2b00      	cmp	r3, #0
 800896a:	d028      	beq.n	80089be <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d005      	beq.n	800897e <osMessageQueuePut+0x36>
 8008972:	68bb      	ldr	r3, [r7, #8]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d002      	beq.n	800897e <osMessageQueuePut+0x36>
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	2b00      	cmp	r3, #0
 800897c:	d003      	beq.n	8008986 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800897e:	f06f 0303 	mvn.w	r3, #3
 8008982:	61fb      	str	r3, [r7, #28]
 8008984:	e038      	b.n	80089f8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008986:	2300      	movs	r3, #0
 8008988:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800898a:	f107 0210 	add.w	r2, r7, #16
 800898e:	2300      	movs	r3, #0
 8008990:	68b9      	ldr	r1, [r7, #8]
 8008992:	69b8      	ldr	r0, [r7, #24]
 8008994:	f000 fbba 	bl	800910c <xQueueGenericSendFromISR>
 8008998:	4603      	mov	r3, r0
 800899a:	2b01      	cmp	r3, #1
 800899c:	d003      	beq.n	80089a6 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800899e:	f06f 0302 	mvn.w	r3, #2
 80089a2:	61fb      	str	r3, [r7, #28]
 80089a4:	e028      	b.n	80089f8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80089a6:	693b      	ldr	r3, [r7, #16]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d025      	beq.n	80089f8 <osMessageQueuePut+0xb0>
 80089ac:	4b15      	ldr	r3, [pc, #84]	; (8008a04 <osMessageQueuePut+0xbc>)
 80089ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80089b2:	601a      	str	r2, [r3, #0]
 80089b4:	f3bf 8f4f 	dsb	sy
 80089b8:	f3bf 8f6f 	isb	sy
 80089bc:	e01c      	b.n	80089f8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80089be:	69bb      	ldr	r3, [r7, #24]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d002      	beq.n	80089ca <osMessageQueuePut+0x82>
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d103      	bne.n	80089d2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80089ca:	f06f 0303 	mvn.w	r3, #3
 80089ce:	61fb      	str	r3, [r7, #28]
 80089d0:	e012      	b.n	80089f8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80089d2:	2300      	movs	r3, #0
 80089d4:	683a      	ldr	r2, [r7, #0]
 80089d6:	68b9      	ldr	r1, [r7, #8]
 80089d8:	69b8      	ldr	r0, [r7, #24]
 80089da:	f000 fa99 	bl	8008f10 <xQueueGenericSend>
 80089de:	4603      	mov	r3, r0
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d009      	beq.n	80089f8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80089e4:	683b      	ldr	r3, [r7, #0]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d003      	beq.n	80089f2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80089ea:	f06f 0301 	mvn.w	r3, #1
 80089ee:	61fb      	str	r3, [r7, #28]
 80089f0:	e002      	b.n	80089f8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80089f2:	f06f 0302 	mvn.w	r3, #2
 80089f6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80089f8:	69fb      	ldr	r3, [r7, #28]
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3720      	adds	r7, #32
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	e000ed04 	.word	0xe000ed04

08008a08 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b088      	sub	sp, #32
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	60f8      	str	r0, [r7, #12]
 8008a10:	60b9      	str	r1, [r7, #8]
 8008a12:	607a      	str	r2, [r7, #4]
 8008a14:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a1e:	f3ef 8305 	mrs	r3, IPSR
 8008a22:	617b      	str	r3, [r7, #20]
  return(result);
 8008a24:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d028      	beq.n	8008a7c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d005      	beq.n	8008a3c <osMessageQueueGet+0x34>
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d002      	beq.n	8008a3c <osMessageQueueGet+0x34>
 8008a36:	683b      	ldr	r3, [r7, #0]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d003      	beq.n	8008a44 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8008a3c:	f06f 0303 	mvn.w	r3, #3
 8008a40:	61fb      	str	r3, [r7, #28]
 8008a42:	e037      	b.n	8008ab4 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8008a44:	2300      	movs	r3, #0
 8008a46:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8008a48:	f107 0310 	add.w	r3, r7, #16
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	68b9      	ldr	r1, [r7, #8]
 8008a50:	69b8      	ldr	r0, [r7, #24]
 8008a52:	f000 fcd7 	bl	8009404 <xQueueReceiveFromISR>
 8008a56:	4603      	mov	r3, r0
 8008a58:	2b01      	cmp	r3, #1
 8008a5a:	d003      	beq.n	8008a64 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8008a5c:	f06f 0302 	mvn.w	r3, #2
 8008a60:	61fb      	str	r3, [r7, #28]
 8008a62:	e027      	b.n	8008ab4 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8008a64:	693b      	ldr	r3, [r7, #16]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d024      	beq.n	8008ab4 <osMessageQueueGet+0xac>
 8008a6a:	4b15      	ldr	r3, [pc, #84]	; (8008ac0 <osMessageQueueGet+0xb8>)
 8008a6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a70:	601a      	str	r2, [r3, #0]
 8008a72:	f3bf 8f4f 	dsb	sy
 8008a76:	f3bf 8f6f 	isb	sy
 8008a7a:	e01b      	b.n	8008ab4 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008a7c:	69bb      	ldr	r3, [r7, #24]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d002      	beq.n	8008a88 <osMessageQueueGet+0x80>
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	d103      	bne.n	8008a90 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8008a88:	f06f 0303 	mvn.w	r3, #3
 8008a8c:	61fb      	str	r3, [r7, #28]
 8008a8e:	e011      	b.n	8008ab4 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008a90:	683a      	ldr	r2, [r7, #0]
 8008a92:	68b9      	ldr	r1, [r7, #8]
 8008a94:	69b8      	ldr	r0, [r7, #24]
 8008a96:	f000 fbd5 	bl	8009244 <xQueueReceive>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	2b01      	cmp	r3, #1
 8008a9e:	d009      	beq.n	8008ab4 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8008aa0:	683b      	ldr	r3, [r7, #0]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d003      	beq.n	8008aae <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8008aa6:	f06f 0301 	mvn.w	r3, #1
 8008aaa:	61fb      	str	r3, [r7, #28]
 8008aac:	e002      	b.n	8008ab4 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8008aae:	f06f 0302 	mvn.w	r3, #2
 8008ab2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008ab4:	69fb      	ldr	r3, [r7, #28]
}
 8008ab6:	4618      	mov	r0, r3
 8008ab8:	3720      	adds	r7, #32
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	bf00      	nop
 8008ac0:	e000ed04 	.word	0xe000ed04

08008ac4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008ac4:	b480      	push	{r7}
 8008ac6:	b085      	sub	sp, #20
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	60f8      	str	r0, [r7, #12]
 8008acc:	60b9      	str	r1, [r7, #8]
 8008ace:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	4a07      	ldr	r2, [pc, #28]	; (8008af0 <vApplicationGetIdleTaskMemory+0x2c>)
 8008ad4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	4a06      	ldr	r2, [pc, #24]	; (8008af4 <vApplicationGetIdleTaskMemory+0x30>)
 8008ada:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2280      	movs	r2, #128	; 0x80
 8008ae0:	601a      	str	r2, [r3, #0]
}
 8008ae2:	bf00      	nop
 8008ae4:	3714      	adds	r7, #20
 8008ae6:	46bd      	mov	sp, r7
 8008ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aec:	4770      	bx	lr
 8008aee:	bf00      	nop
 8008af0:	20000338 	.word	0x20000338
 8008af4:	200003f4 	.word	0x200003f4

08008af8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008af8:	b480      	push	{r7}
 8008afa:	b085      	sub	sp, #20
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	60f8      	str	r0, [r7, #12]
 8008b00:	60b9      	str	r1, [r7, #8]
 8008b02:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	4a07      	ldr	r2, [pc, #28]	; (8008b24 <vApplicationGetTimerTaskMemory+0x2c>)
 8008b08:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	4a06      	ldr	r2, [pc, #24]	; (8008b28 <vApplicationGetTimerTaskMemory+0x30>)
 8008b0e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008b16:	601a      	str	r2, [r3, #0]
}
 8008b18:	bf00      	nop
 8008b1a:	3714      	adds	r7, #20
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr
 8008b24:	200005f4 	.word	0x200005f4
 8008b28:	200006b0 	.word	0x200006b0

08008b2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	f103 0208 	add.w	r2, r3, #8
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	f04f 32ff 	mov.w	r2, #4294967295
 8008b44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f103 0208 	add.w	r2, r3, #8
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f103 0208 	add.w	r2, r3, #8
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008b60:	bf00      	nop
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2200      	movs	r2, #0
 8008b78:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008b7a:	bf00      	nop
 8008b7c:	370c      	adds	r7, #12
 8008b7e:	46bd      	mov	sp, r7
 8008b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b84:	4770      	bx	lr

08008b86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008b86:	b480      	push	{r7}
 8008b88:	b085      	sub	sp, #20
 8008b8a:	af00      	add	r7, sp, #0
 8008b8c:	6078      	str	r0, [r7, #4]
 8008b8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	685b      	ldr	r3, [r3, #4]
 8008b94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008b96:	683b      	ldr	r3, [r7, #0]
 8008b98:	68fa      	ldr	r2, [r7, #12]
 8008b9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	689a      	ldr	r2, [r3, #8]
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	683a      	ldr	r2, [r7, #0]
 8008baa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	683a      	ldr	r2, [r7, #0]
 8008bb0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008bb2:	683b      	ldr	r3, [r7, #0]
 8008bb4:	687a      	ldr	r2, [r7, #4]
 8008bb6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	1c5a      	adds	r2, r3, #1
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	601a      	str	r2, [r3, #0]
}
 8008bc2:	bf00      	nop
 8008bc4:	3714      	adds	r7, #20
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr

08008bce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008bce:	b480      	push	{r7}
 8008bd0:	b085      	sub	sp, #20
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
 8008bd6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008be4:	d103      	bne.n	8008bee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	691b      	ldr	r3, [r3, #16]
 8008bea:	60fb      	str	r3, [r7, #12]
 8008bec:	e00c      	b.n	8008c08 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	3308      	adds	r3, #8
 8008bf2:	60fb      	str	r3, [r7, #12]
 8008bf4:	e002      	b.n	8008bfc <vListInsert+0x2e>
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	60fb      	str	r3, [r7, #12]
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	68ba      	ldr	r2, [r7, #8]
 8008c04:	429a      	cmp	r2, r3
 8008c06:	d2f6      	bcs.n	8008bf6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	685a      	ldr	r2, [r3, #4]
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008c10:	683b      	ldr	r3, [r7, #0]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	683a      	ldr	r2, [r7, #0]
 8008c16:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008c18:	683b      	ldr	r3, [r7, #0]
 8008c1a:	68fa      	ldr	r2, [r7, #12]
 8008c1c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	683a      	ldr	r2, [r7, #0]
 8008c22:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008c24:	683b      	ldr	r3, [r7, #0]
 8008c26:	687a      	ldr	r2, [r7, #4]
 8008c28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	1c5a      	adds	r2, r3, #1
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	601a      	str	r2, [r3, #0]
}
 8008c34:	bf00      	nop
 8008c36:	3714      	adds	r7, #20
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr

08008c40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008c40:	b480      	push	{r7}
 8008c42:	b085      	sub	sp, #20
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	691b      	ldr	r3, [r3, #16]
 8008c4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	685b      	ldr	r3, [r3, #4]
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	6892      	ldr	r2, [r2, #8]
 8008c56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	689b      	ldr	r3, [r3, #8]
 8008c5c:	687a      	ldr	r2, [r7, #4]
 8008c5e:	6852      	ldr	r2, [r2, #4]
 8008c60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	685b      	ldr	r3, [r3, #4]
 8008c66:	687a      	ldr	r2, [r7, #4]
 8008c68:	429a      	cmp	r2, r3
 8008c6a:	d103      	bne.n	8008c74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	689a      	ldr	r2, [r3, #8]
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	2200      	movs	r2, #0
 8008c78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	1e5a      	subs	r2, r3, #1
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	681b      	ldr	r3, [r3, #0]
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3714      	adds	r7, #20
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d10a      	bne.n	8008cbe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cac:	f383 8811 	msr	BASEPRI, r3
 8008cb0:	f3bf 8f6f 	isb	sy
 8008cb4:	f3bf 8f4f 	dsb	sy
 8008cb8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008cba:	bf00      	nop
 8008cbc:	e7fe      	b.n	8008cbc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008cbe:	f002 f931 	bl	800af24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	681a      	ldr	r2, [r3, #0]
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cca:	68f9      	ldr	r1, [r7, #12]
 8008ccc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008cce:	fb01 f303 	mul.w	r3, r1, r3
 8008cd2:	441a      	add	r2, r3
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2200      	movs	r2, #0
 8008cdc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681a      	ldr	r2, [r3, #0]
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cee:	3b01      	subs	r3, #1
 8008cf0:	68f9      	ldr	r1, [r7, #12]
 8008cf2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008cf4:	fb01 f303 	mul.w	r3, r1, r3
 8008cf8:	441a      	add	r2, r3
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	22ff      	movs	r2, #255	; 0xff
 8008d02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	22ff      	movs	r2, #255	; 0xff
 8008d0a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008d0e:	683b      	ldr	r3, [r7, #0]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d114      	bne.n	8008d3e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	691b      	ldr	r3, [r3, #16]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d01a      	beq.n	8008d52 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	3310      	adds	r3, #16
 8008d20:	4618      	mov	r0, r3
 8008d22:	f001 f9e3 	bl	800a0ec <xTaskRemoveFromEventList>
 8008d26:	4603      	mov	r3, r0
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d012      	beq.n	8008d52 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008d2c:	4b0c      	ldr	r3, [pc, #48]	; (8008d60 <xQueueGenericReset+0xcc>)
 8008d2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d32:	601a      	str	r2, [r3, #0]
 8008d34:	f3bf 8f4f 	dsb	sy
 8008d38:	f3bf 8f6f 	isb	sy
 8008d3c:	e009      	b.n	8008d52 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	3310      	adds	r3, #16
 8008d42:	4618      	mov	r0, r3
 8008d44:	f7ff fef2 	bl	8008b2c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	3324      	adds	r3, #36	; 0x24
 8008d4c:	4618      	mov	r0, r3
 8008d4e:	f7ff feed 	bl	8008b2c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008d52:	f002 f917 	bl	800af84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008d56:	2301      	movs	r3, #1
}
 8008d58:	4618      	mov	r0, r3
 8008d5a:	3710      	adds	r7, #16
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	bd80      	pop	{r7, pc}
 8008d60:	e000ed04 	.word	0xe000ed04

08008d64 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b08e      	sub	sp, #56	; 0x38
 8008d68:	af02      	add	r7, sp, #8
 8008d6a:	60f8      	str	r0, [r7, #12]
 8008d6c:	60b9      	str	r1, [r7, #8]
 8008d6e:	607a      	str	r2, [r7, #4]
 8008d70:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d10a      	bne.n	8008d8e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d7c:	f383 8811 	msr	BASEPRI, r3
 8008d80:	f3bf 8f6f 	isb	sy
 8008d84:	f3bf 8f4f 	dsb	sy
 8008d88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008d8a:	bf00      	nop
 8008d8c:	e7fe      	b.n	8008d8c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008d8e:	683b      	ldr	r3, [r7, #0]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d10a      	bne.n	8008daa <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008d94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d98:	f383 8811 	msr	BASEPRI, r3
 8008d9c:	f3bf 8f6f 	isb	sy
 8008da0:	f3bf 8f4f 	dsb	sy
 8008da4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008da6:	bf00      	nop
 8008da8:	e7fe      	b.n	8008da8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d002      	beq.n	8008db6 <xQueueGenericCreateStatic+0x52>
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d001      	beq.n	8008dba <xQueueGenericCreateStatic+0x56>
 8008db6:	2301      	movs	r3, #1
 8008db8:	e000      	b.n	8008dbc <xQueueGenericCreateStatic+0x58>
 8008dba:	2300      	movs	r3, #0
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d10a      	bne.n	8008dd6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dc4:	f383 8811 	msr	BASEPRI, r3
 8008dc8:	f3bf 8f6f 	isb	sy
 8008dcc:	f3bf 8f4f 	dsb	sy
 8008dd0:	623b      	str	r3, [r7, #32]
}
 8008dd2:	bf00      	nop
 8008dd4:	e7fe      	b.n	8008dd4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d102      	bne.n	8008de2 <xQueueGenericCreateStatic+0x7e>
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d101      	bne.n	8008de6 <xQueueGenericCreateStatic+0x82>
 8008de2:	2301      	movs	r3, #1
 8008de4:	e000      	b.n	8008de8 <xQueueGenericCreateStatic+0x84>
 8008de6:	2300      	movs	r3, #0
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d10a      	bne.n	8008e02 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008df0:	f383 8811 	msr	BASEPRI, r3
 8008df4:	f3bf 8f6f 	isb	sy
 8008df8:	f3bf 8f4f 	dsb	sy
 8008dfc:	61fb      	str	r3, [r7, #28]
}
 8008dfe:	bf00      	nop
 8008e00:	e7fe      	b.n	8008e00 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008e02:	2350      	movs	r3, #80	; 0x50
 8008e04:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008e06:	697b      	ldr	r3, [r7, #20]
 8008e08:	2b50      	cmp	r3, #80	; 0x50
 8008e0a:	d00a      	beq.n	8008e22 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e10:	f383 8811 	msr	BASEPRI, r3
 8008e14:	f3bf 8f6f 	isb	sy
 8008e18:	f3bf 8f4f 	dsb	sy
 8008e1c:	61bb      	str	r3, [r7, #24]
}
 8008e1e:	bf00      	nop
 8008e20:	e7fe      	b.n	8008e20 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008e22:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d00d      	beq.n	8008e4a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e30:	2201      	movs	r2, #1
 8008e32:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008e36:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e3c:	9300      	str	r3, [sp, #0]
 8008e3e:	4613      	mov	r3, r2
 8008e40:	687a      	ldr	r2, [r7, #4]
 8008e42:	68b9      	ldr	r1, [r7, #8]
 8008e44:	68f8      	ldr	r0, [r7, #12]
 8008e46:	f000 f83f 	bl	8008ec8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008e4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	3730      	adds	r7, #48	; 0x30
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd80      	pop	{r7, pc}

08008e54 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8008e54:	b580      	push	{r7, lr}
 8008e56:	b08a      	sub	sp, #40	; 0x28
 8008e58:	af02      	add	r7, sp, #8
 8008e5a:	60f8      	str	r0, [r7, #12]
 8008e5c:	60b9      	str	r1, [r7, #8]
 8008e5e:	4613      	mov	r3, r2
 8008e60:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d10a      	bne.n	8008e7e <xQueueGenericCreate+0x2a>
	__asm volatile
 8008e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e6c:	f383 8811 	msr	BASEPRI, r3
 8008e70:	f3bf 8f6f 	isb	sy
 8008e74:	f3bf 8f4f 	dsb	sy
 8008e78:	613b      	str	r3, [r7, #16]
}
 8008e7a:	bf00      	nop
 8008e7c:	e7fe      	b.n	8008e7c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	68ba      	ldr	r2, [r7, #8]
 8008e82:	fb02 f303 	mul.w	r3, r2, r3
 8008e86:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8008e88:	69fb      	ldr	r3, [r7, #28]
 8008e8a:	3350      	adds	r3, #80	; 0x50
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f002 f96b 	bl	800b168 <pvPortMalloc>
 8008e92:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8008e94:	69bb      	ldr	r3, [r7, #24]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d011      	beq.n	8008ebe <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008e9a:	69bb      	ldr	r3, [r7, #24]
 8008e9c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e9e:	697b      	ldr	r3, [r7, #20]
 8008ea0:	3350      	adds	r3, #80	; 0x50
 8008ea2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8008ea4:	69bb      	ldr	r3, [r7, #24]
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008eac:	79fa      	ldrb	r2, [r7, #7]
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	9300      	str	r3, [sp, #0]
 8008eb2:	4613      	mov	r3, r2
 8008eb4:	697a      	ldr	r2, [r7, #20]
 8008eb6:	68b9      	ldr	r1, [r7, #8]
 8008eb8:	68f8      	ldr	r0, [r7, #12]
 8008eba:	f000 f805 	bl	8008ec8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008ebe:	69bb      	ldr	r3, [r7, #24]
	}
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	3720      	adds	r7, #32
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b084      	sub	sp, #16
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	60f8      	str	r0, [r7, #12]
 8008ed0:	60b9      	str	r1, [r7, #8]
 8008ed2:	607a      	str	r2, [r7, #4]
 8008ed4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d103      	bne.n	8008ee4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008edc:	69bb      	ldr	r3, [r7, #24]
 8008ede:	69ba      	ldr	r2, [r7, #24]
 8008ee0:	601a      	str	r2, [r3, #0]
 8008ee2:	e002      	b.n	8008eea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008ee4:	69bb      	ldr	r3, [r7, #24]
 8008ee6:	687a      	ldr	r2, [r7, #4]
 8008ee8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008eea:	69bb      	ldr	r3, [r7, #24]
 8008eec:	68fa      	ldr	r2, [r7, #12]
 8008eee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008ef0:	69bb      	ldr	r3, [r7, #24]
 8008ef2:	68ba      	ldr	r2, [r7, #8]
 8008ef4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008ef6:	2101      	movs	r1, #1
 8008ef8:	69b8      	ldr	r0, [r7, #24]
 8008efa:	f7ff fecb 	bl	8008c94 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008efe:	69bb      	ldr	r3, [r7, #24]
 8008f00:	78fa      	ldrb	r2, [r7, #3]
 8008f02:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008f06:	bf00      	nop
 8008f08:	3710      	adds	r7, #16
 8008f0a:	46bd      	mov	sp, r7
 8008f0c:	bd80      	pop	{r7, pc}
	...

08008f10 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008f10:	b580      	push	{r7, lr}
 8008f12:	b08e      	sub	sp, #56	; 0x38
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	60f8      	str	r0, [r7, #12]
 8008f18:	60b9      	str	r1, [r7, #8]
 8008f1a:	607a      	str	r2, [r7, #4]
 8008f1c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008f1e:	2300      	movs	r3, #0
 8008f20:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d10a      	bne.n	8008f42 <xQueueGenericSend+0x32>
	__asm volatile
 8008f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f30:	f383 8811 	msr	BASEPRI, r3
 8008f34:	f3bf 8f6f 	isb	sy
 8008f38:	f3bf 8f4f 	dsb	sy
 8008f3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008f3e:	bf00      	nop
 8008f40:	e7fe      	b.n	8008f40 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d103      	bne.n	8008f50 <xQueueGenericSend+0x40>
 8008f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d101      	bne.n	8008f54 <xQueueGenericSend+0x44>
 8008f50:	2301      	movs	r3, #1
 8008f52:	e000      	b.n	8008f56 <xQueueGenericSend+0x46>
 8008f54:	2300      	movs	r3, #0
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d10a      	bne.n	8008f70 <xQueueGenericSend+0x60>
	__asm volatile
 8008f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f5e:	f383 8811 	msr	BASEPRI, r3
 8008f62:	f3bf 8f6f 	isb	sy
 8008f66:	f3bf 8f4f 	dsb	sy
 8008f6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008f6c:	bf00      	nop
 8008f6e:	e7fe      	b.n	8008f6e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f70:	683b      	ldr	r3, [r7, #0]
 8008f72:	2b02      	cmp	r3, #2
 8008f74:	d103      	bne.n	8008f7e <xQueueGenericSend+0x6e>
 8008f76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f7a:	2b01      	cmp	r3, #1
 8008f7c:	d101      	bne.n	8008f82 <xQueueGenericSend+0x72>
 8008f7e:	2301      	movs	r3, #1
 8008f80:	e000      	b.n	8008f84 <xQueueGenericSend+0x74>
 8008f82:	2300      	movs	r3, #0
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d10a      	bne.n	8008f9e <xQueueGenericSend+0x8e>
	__asm volatile
 8008f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f8c:	f383 8811 	msr	BASEPRI, r3
 8008f90:	f3bf 8f6f 	isb	sy
 8008f94:	f3bf 8f4f 	dsb	sy
 8008f98:	623b      	str	r3, [r7, #32]
}
 8008f9a:	bf00      	nop
 8008f9c:	e7fe      	b.n	8008f9c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008f9e:	f001 fa67 	bl	800a470 <xTaskGetSchedulerState>
 8008fa2:	4603      	mov	r3, r0
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d102      	bne.n	8008fae <xQueueGenericSend+0x9e>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d101      	bne.n	8008fb2 <xQueueGenericSend+0xa2>
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e000      	b.n	8008fb4 <xQueueGenericSend+0xa4>
 8008fb2:	2300      	movs	r3, #0
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d10a      	bne.n	8008fce <xQueueGenericSend+0xbe>
	__asm volatile
 8008fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fbc:	f383 8811 	msr	BASEPRI, r3
 8008fc0:	f3bf 8f6f 	isb	sy
 8008fc4:	f3bf 8f4f 	dsb	sy
 8008fc8:	61fb      	str	r3, [r7, #28]
}
 8008fca:	bf00      	nop
 8008fcc:	e7fe      	b.n	8008fcc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008fce:	f001 ffa9 	bl	800af24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008fd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d302      	bcc.n	8008fe4 <xQueueGenericSend+0xd4>
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	2b02      	cmp	r3, #2
 8008fe2:	d129      	bne.n	8009038 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008fe4:	683a      	ldr	r2, [r7, #0]
 8008fe6:	68b9      	ldr	r1, [r7, #8]
 8008fe8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008fea:	f000 fa8b 	bl	8009504 <prvCopyDataToQueue>
 8008fee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d010      	beq.n	800901a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008ff8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ffa:	3324      	adds	r3, #36	; 0x24
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	f001 f875 	bl	800a0ec <xTaskRemoveFromEventList>
 8009002:	4603      	mov	r3, r0
 8009004:	2b00      	cmp	r3, #0
 8009006:	d013      	beq.n	8009030 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009008:	4b3f      	ldr	r3, [pc, #252]	; (8009108 <xQueueGenericSend+0x1f8>)
 800900a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800900e:	601a      	str	r2, [r3, #0]
 8009010:	f3bf 8f4f 	dsb	sy
 8009014:	f3bf 8f6f 	isb	sy
 8009018:	e00a      	b.n	8009030 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800901a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800901c:	2b00      	cmp	r3, #0
 800901e:	d007      	beq.n	8009030 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009020:	4b39      	ldr	r3, [pc, #228]	; (8009108 <xQueueGenericSend+0x1f8>)
 8009022:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009026:	601a      	str	r2, [r3, #0]
 8009028:	f3bf 8f4f 	dsb	sy
 800902c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009030:	f001 ffa8 	bl	800af84 <vPortExitCritical>
				return pdPASS;
 8009034:	2301      	movs	r3, #1
 8009036:	e063      	b.n	8009100 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d103      	bne.n	8009046 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800903e:	f001 ffa1 	bl	800af84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009042:	2300      	movs	r3, #0
 8009044:	e05c      	b.n	8009100 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009046:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009048:	2b00      	cmp	r3, #0
 800904a:	d106      	bne.n	800905a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800904c:	f107 0314 	add.w	r3, r7, #20
 8009050:	4618      	mov	r0, r3
 8009052:	f001 f8af 	bl	800a1b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009056:	2301      	movs	r3, #1
 8009058:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800905a:	f001 ff93 	bl	800af84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800905e:	f000 fe1b 	bl	8009c98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009062:	f001 ff5f 	bl	800af24 <vPortEnterCritical>
 8009066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009068:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800906c:	b25b      	sxtb	r3, r3
 800906e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009072:	d103      	bne.n	800907c <xQueueGenericSend+0x16c>
 8009074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009076:	2200      	movs	r2, #0
 8009078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800907c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800907e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009082:	b25b      	sxtb	r3, r3
 8009084:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009088:	d103      	bne.n	8009092 <xQueueGenericSend+0x182>
 800908a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800908c:	2200      	movs	r2, #0
 800908e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009092:	f001 ff77 	bl	800af84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009096:	1d3a      	adds	r2, r7, #4
 8009098:	f107 0314 	add.w	r3, r7, #20
 800909c:	4611      	mov	r1, r2
 800909e:	4618      	mov	r0, r3
 80090a0:	f001 f89e 	bl	800a1e0 <xTaskCheckForTimeOut>
 80090a4:	4603      	mov	r3, r0
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d124      	bne.n	80090f4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80090aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090ac:	f000 fb22 	bl	80096f4 <prvIsQueueFull>
 80090b0:	4603      	mov	r3, r0
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d018      	beq.n	80090e8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80090b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b8:	3310      	adds	r3, #16
 80090ba:	687a      	ldr	r2, [r7, #4]
 80090bc:	4611      	mov	r1, r2
 80090be:	4618      	mov	r0, r3
 80090c0:	f000 ffc4 	bl	800a04c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80090c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090c6:	f000 faad 	bl	8009624 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80090ca:	f000 fdf3 	bl	8009cb4 <xTaskResumeAll>
 80090ce:	4603      	mov	r3, r0
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	f47f af7c 	bne.w	8008fce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80090d6:	4b0c      	ldr	r3, [pc, #48]	; (8009108 <xQueueGenericSend+0x1f8>)
 80090d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090dc:	601a      	str	r2, [r3, #0]
 80090de:	f3bf 8f4f 	dsb	sy
 80090e2:	f3bf 8f6f 	isb	sy
 80090e6:	e772      	b.n	8008fce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80090e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090ea:	f000 fa9b 	bl	8009624 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80090ee:	f000 fde1 	bl	8009cb4 <xTaskResumeAll>
 80090f2:	e76c      	b.n	8008fce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80090f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090f6:	f000 fa95 	bl	8009624 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80090fa:	f000 fddb 	bl	8009cb4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80090fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009100:	4618      	mov	r0, r3
 8009102:	3738      	adds	r7, #56	; 0x38
 8009104:	46bd      	mov	sp, r7
 8009106:	bd80      	pop	{r7, pc}
 8009108:	e000ed04 	.word	0xe000ed04

0800910c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b090      	sub	sp, #64	; 0x40
 8009110:	af00      	add	r7, sp, #0
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	607a      	str	r2, [r7, #4]
 8009118:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800911e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009120:	2b00      	cmp	r3, #0
 8009122:	d10a      	bne.n	800913a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009128:	f383 8811 	msr	BASEPRI, r3
 800912c:	f3bf 8f6f 	isb	sy
 8009130:	f3bf 8f4f 	dsb	sy
 8009134:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009136:	bf00      	nop
 8009138:	e7fe      	b.n	8009138 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	2b00      	cmp	r3, #0
 800913e:	d103      	bne.n	8009148 <xQueueGenericSendFromISR+0x3c>
 8009140:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009144:	2b00      	cmp	r3, #0
 8009146:	d101      	bne.n	800914c <xQueueGenericSendFromISR+0x40>
 8009148:	2301      	movs	r3, #1
 800914a:	e000      	b.n	800914e <xQueueGenericSendFromISR+0x42>
 800914c:	2300      	movs	r3, #0
 800914e:	2b00      	cmp	r3, #0
 8009150:	d10a      	bne.n	8009168 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009152:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009156:	f383 8811 	msr	BASEPRI, r3
 800915a:	f3bf 8f6f 	isb	sy
 800915e:	f3bf 8f4f 	dsb	sy
 8009162:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009164:	bf00      	nop
 8009166:	e7fe      	b.n	8009166 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	2b02      	cmp	r3, #2
 800916c:	d103      	bne.n	8009176 <xQueueGenericSendFromISR+0x6a>
 800916e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009172:	2b01      	cmp	r3, #1
 8009174:	d101      	bne.n	800917a <xQueueGenericSendFromISR+0x6e>
 8009176:	2301      	movs	r3, #1
 8009178:	e000      	b.n	800917c <xQueueGenericSendFromISR+0x70>
 800917a:	2300      	movs	r3, #0
 800917c:	2b00      	cmp	r3, #0
 800917e:	d10a      	bne.n	8009196 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009184:	f383 8811 	msr	BASEPRI, r3
 8009188:	f3bf 8f6f 	isb	sy
 800918c:	f3bf 8f4f 	dsb	sy
 8009190:	623b      	str	r3, [r7, #32]
}
 8009192:	bf00      	nop
 8009194:	e7fe      	b.n	8009194 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009196:	f001 ffa7 	bl	800b0e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800919a:	f3ef 8211 	mrs	r2, BASEPRI
 800919e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091a2:	f383 8811 	msr	BASEPRI, r3
 80091a6:	f3bf 8f6f 	isb	sy
 80091aa:	f3bf 8f4f 	dsb	sy
 80091ae:	61fa      	str	r2, [r7, #28]
 80091b0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80091b2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80091b4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80091b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80091ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091be:	429a      	cmp	r2, r3
 80091c0:	d302      	bcc.n	80091c8 <xQueueGenericSendFromISR+0xbc>
 80091c2:	683b      	ldr	r3, [r7, #0]
 80091c4:	2b02      	cmp	r3, #2
 80091c6:	d12f      	bne.n	8009228 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80091c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80091ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80091d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091d6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80091d8:	683a      	ldr	r2, [r7, #0]
 80091da:	68b9      	ldr	r1, [r7, #8]
 80091dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80091de:	f000 f991 	bl	8009504 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80091e2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80091e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091ea:	d112      	bne.n	8009212 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80091ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d016      	beq.n	8009222 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80091f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091f6:	3324      	adds	r3, #36	; 0x24
 80091f8:	4618      	mov	r0, r3
 80091fa:	f000 ff77 	bl	800a0ec <xTaskRemoveFromEventList>
 80091fe:	4603      	mov	r3, r0
 8009200:	2b00      	cmp	r3, #0
 8009202:	d00e      	beq.n	8009222 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	2b00      	cmp	r3, #0
 8009208:	d00b      	beq.n	8009222 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	2201      	movs	r2, #1
 800920e:	601a      	str	r2, [r3, #0]
 8009210:	e007      	b.n	8009222 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009212:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009216:	3301      	adds	r3, #1
 8009218:	b2db      	uxtb	r3, r3
 800921a:	b25a      	sxtb	r2, r3
 800921c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800921e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009222:	2301      	movs	r3, #1
 8009224:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009226:	e001      	b.n	800922c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009228:	2300      	movs	r3, #0
 800922a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800922c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800922e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009230:	697b      	ldr	r3, [r7, #20]
 8009232:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009236:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009238:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800923a:	4618      	mov	r0, r3
 800923c:	3740      	adds	r7, #64	; 0x40
 800923e:	46bd      	mov	sp, r7
 8009240:	bd80      	pop	{r7, pc}
	...

08009244 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b08c      	sub	sp, #48	; 0x30
 8009248:	af00      	add	r7, sp, #0
 800924a:	60f8      	str	r0, [r7, #12]
 800924c:	60b9      	str	r1, [r7, #8]
 800924e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009250:	2300      	movs	r3, #0
 8009252:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800925a:	2b00      	cmp	r3, #0
 800925c:	d10a      	bne.n	8009274 <xQueueReceive+0x30>
	__asm volatile
 800925e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009262:	f383 8811 	msr	BASEPRI, r3
 8009266:	f3bf 8f6f 	isb	sy
 800926a:	f3bf 8f4f 	dsb	sy
 800926e:	623b      	str	r3, [r7, #32]
}
 8009270:	bf00      	nop
 8009272:	e7fe      	b.n	8009272 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	2b00      	cmp	r3, #0
 8009278:	d103      	bne.n	8009282 <xQueueReceive+0x3e>
 800927a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800927c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800927e:	2b00      	cmp	r3, #0
 8009280:	d101      	bne.n	8009286 <xQueueReceive+0x42>
 8009282:	2301      	movs	r3, #1
 8009284:	e000      	b.n	8009288 <xQueueReceive+0x44>
 8009286:	2300      	movs	r3, #0
 8009288:	2b00      	cmp	r3, #0
 800928a:	d10a      	bne.n	80092a2 <xQueueReceive+0x5e>
	__asm volatile
 800928c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009290:	f383 8811 	msr	BASEPRI, r3
 8009294:	f3bf 8f6f 	isb	sy
 8009298:	f3bf 8f4f 	dsb	sy
 800929c:	61fb      	str	r3, [r7, #28]
}
 800929e:	bf00      	nop
 80092a0:	e7fe      	b.n	80092a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80092a2:	f001 f8e5 	bl	800a470 <xTaskGetSchedulerState>
 80092a6:	4603      	mov	r3, r0
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d102      	bne.n	80092b2 <xQueueReceive+0x6e>
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d101      	bne.n	80092b6 <xQueueReceive+0x72>
 80092b2:	2301      	movs	r3, #1
 80092b4:	e000      	b.n	80092b8 <xQueueReceive+0x74>
 80092b6:	2300      	movs	r3, #0
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d10a      	bne.n	80092d2 <xQueueReceive+0x8e>
	__asm volatile
 80092bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092c0:	f383 8811 	msr	BASEPRI, r3
 80092c4:	f3bf 8f6f 	isb	sy
 80092c8:	f3bf 8f4f 	dsb	sy
 80092cc:	61bb      	str	r3, [r7, #24]
}
 80092ce:	bf00      	nop
 80092d0:	e7fe      	b.n	80092d0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80092d2:	f001 fe27 	bl	800af24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80092d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80092dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d01f      	beq.n	8009322 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80092e2:	68b9      	ldr	r1, [r7, #8]
 80092e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80092e6:	f000 f977 	bl	80095d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80092ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ec:	1e5a      	subs	r2, r3, #1
 80092ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092f4:	691b      	ldr	r3, [r3, #16]
 80092f6:	2b00      	cmp	r3, #0
 80092f8:	d00f      	beq.n	800931a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092fc:	3310      	adds	r3, #16
 80092fe:	4618      	mov	r0, r3
 8009300:	f000 fef4 	bl	800a0ec <xTaskRemoveFromEventList>
 8009304:	4603      	mov	r3, r0
 8009306:	2b00      	cmp	r3, #0
 8009308:	d007      	beq.n	800931a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800930a:	4b3d      	ldr	r3, [pc, #244]	; (8009400 <xQueueReceive+0x1bc>)
 800930c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009310:	601a      	str	r2, [r3, #0]
 8009312:	f3bf 8f4f 	dsb	sy
 8009316:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800931a:	f001 fe33 	bl	800af84 <vPortExitCritical>
				return pdPASS;
 800931e:	2301      	movs	r3, #1
 8009320:	e069      	b.n	80093f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d103      	bne.n	8009330 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009328:	f001 fe2c 	bl	800af84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800932c:	2300      	movs	r3, #0
 800932e:	e062      	b.n	80093f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009332:	2b00      	cmp	r3, #0
 8009334:	d106      	bne.n	8009344 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009336:	f107 0310 	add.w	r3, r7, #16
 800933a:	4618      	mov	r0, r3
 800933c:	f000 ff3a 	bl	800a1b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009340:	2301      	movs	r3, #1
 8009342:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009344:	f001 fe1e 	bl	800af84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009348:	f000 fca6 	bl	8009c98 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800934c:	f001 fdea 	bl	800af24 <vPortEnterCritical>
 8009350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009352:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009356:	b25b      	sxtb	r3, r3
 8009358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800935c:	d103      	bne.n	8009366 <xQueueReceive+0x122>
 800935e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009360:	2200      	movs	r2, #0
 8009362:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009368:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800936c:	b25b      	sxtb	r3, r3
 800936e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009372:	d103      	bne.n	800937c <xQueueReceive+0x138>
 8009374:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009376:	2200      	movs	r2, #0
 8009378:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800937c:	f001 fe02 	bl	800af84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009380:	1d3a      	adds	r2, r7, #4
 8009382:	f107 0310 	add.w	r3, r7, #16
 8009386:	4611      	mov	r1, r2
 8009388:	4618      	mov	r0, r3
 800938a:	f000 ff29 	bl	800a1e0 <xTaskCheckForTimeOut>
 800938e:	4603      	mov	r3, r0
 8009390:	2b00      	cmp	r3, #0
 8009392:	d123      	bne.n	80093dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009394:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009396:	f000 f997 	bl	80096c8 <prvIsQueueEmpty>
 800939a:	4603      	mov	r3, r0
 800939c:	2b00      	cmp	r3, #0
 800939e:	d017      	beq.n	80093d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80093a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a2:	3324      	adds	r3, #36	; 0x24
 80093a4:	687a      	ldr	r2, [r7, #4]
 80093a6:	4611      	mov	r1, r2
 80093a8:	4618      	mov	r0, r3
 80093aa:	f000 fe4f 	bl	800a04c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80093ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093b0:	f000 f938 	bl	8009624 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80093b4:	f000 fc7e 	bl	8009cb4 <xTaskResumeAll>
 80093b8:	4603      	mov	r3, r0
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d189      	bne.n	80092d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80093be:	4b10      	ldr	r3, [pc, #64]	; (8009400 <xQueueReceive+0x1bc>)
 80093c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093c4:	601a      	str	r2, [r3, #0]
 80093c6:	f3bf 8f4f 	dsb	sy
 80093ca:	f3bf 8f6f 	isb	sy
 80093ce:	e780      	b.n	80092d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80093d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093d2:	f000 f927 	bl	8009624 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80093d6:	f000 fc6d 	bl	8009cb4 <xTaskResumeAll>
 80093da:	e77a      	b.n	80092d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80093dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093de:	f000 f921 	bl	8009624 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80093e2:	f000 fc67 	bl	8009cb4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80093e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093e8:	f000 f96e 	bl	80096c8 <prvIsQueueEmpty>
 80093ec:	4603      	mov	r3, r0
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	f43f af6f 	beq.w	80092d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80093f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80093f6:	4618      	mov	r0, r3
 80093f8:	3730      	adds	r7, #48	; 0x30
 80093fa:	46bd      	mov	sp, r7
 80093fc:	bd80      	pop	{r7, pc}
 80093fe:	bf00      	nop
 8009400:	e000ed04 	.word	0xe000ed04

08009404 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009404:	b580      	push	{r7, lr}
 8009406:	b08e      	sub	sp, #56	; 0x38
 8009408:	af00      	add	r7, sp, #0
 800940a:	60f8      	str	r0, [r7, #12]
 800940c:	60b9      	str	r1, [r7, #8]
 800940e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009416:	2b00      	cmp	r3, #0
 8009418:	d10a      	bne.n	8009430 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800941a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800941e:	f383 8811 	msr	BASEPRI, r3
 8009422:	f3bf 8f6f 	isb	sy
 8009426:	f3bf 8f4f 	dsb	sy
 800942a:	623b      	str	r3, [r7, #32]
}
 800942c:	bf00      	nop
 800942e:	e7fe      	b.n	800942e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	2b00      	cmp	r3, #0
 8009434:	d103      	bne.n	800943e <xQueueReceiveFromISR+0x3a>
 8009436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800943a:	2b00      	cmp	r3, #0
 800943c:	d101      	bne.n	8009442 <xQueueReceiveFromISR+0x3e>
 800943e:	2301      	movs	r3, #1
 8009440:	e000      	b.n	8009444 <xQueueReceiveFromISR+0x40>
 8009442:	2300      	movs	r3, #0
 8009444:	2b00      	cmp	r3, #0
 8009446:	d10a      	bne.n	800945e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8009448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800944c:	f383 8811 	msr	BASEPRI, r3
 8009450:	f3bf 8f6f 	isb	sy
 8009454:	f3bf 8f4f 	dsb	sy
 8009458:	61fb      	str	r3, [r7, #28]
}
 800945a:	bf00      	nop
 800945c:	e7fe      	b.n	800945c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800945e:	f001 fe43 	bl	800b0e8 <vPortValidateInterruptPriority>
	__asm volatile
 8009462:	f3ef 8211 	mrs	r2, BASEPRI
 8009466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800946a:	f383 8811 	msr	BASEPRI, r3
 800946e:	f3bf 8f6f 	isb	sy
 8009472:	f3bf 8f4f 	dsb	sy
 8009476:	61ba      	str	r2, [r7, #24]
 8009478:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800947a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800947c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800947e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009482:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009486:	2b00      	cmp	r3, #0
 8009488:	d02f      	beq.n	80094ea <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800948a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800948c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009490:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009494:	68b9      	ldr	r1, [r7, #8]
 8009496:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009498:	f000 f89e 	bl	80095d8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800949c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800949e:	1e5a      	subs	r2, r3, #1
 80094a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094a2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80094a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80094a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ac:	d112      	bne.n	80094d4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80094ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b0:	691b      	ldr	r3, [r3, #16]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d016      	beq.n	80094e4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094b8:	3310      	adds	r3, #16
 80094ba:	4618      	mov	r0, r3
 80094bc:	f000 fe16 	bl	800a0ec <xTaskRemoveFromEventList>
 80094c0:	4603      	mov	r3, r0
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d00e      	beq.n	80094e4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d00b      	beq.n	80094e4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	2201      	movs	r2, #1
 80094d0:	601a      	str	r2, [r3, #0]
 80094d2:	e007      	b.n	80094e4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80094d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80094d8:	3301      	adds	r3, #1
 80094da:	b2db      	uxtb	r3, r3
 80094dc:	b25a      	sxtb	r2, r3
 80094de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80094e4:	2301      	movs	r3, #1
 80094e6:	637b      	str	r3, [r7, #52]	; 0x34
 80094e8:	e001      	b.n	80094ee <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80094ea:	2300      	movs	r3, #0
 80094ec:	637b      	str	r3, [r7, #52]	; 0x34
 80094ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80094f2:	693b      	ldr	r3, [r7, #16]
 80094f4:	f383 8811 	msr	BASEPRI, r3
}
 80094f8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80094fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3738      	adds	r7, #56	; 0x38
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}

08009504 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009504:	b580      	push	{r7, lr}
 8009506:	b086      	sub	sp, #24
 8009508:	af00      	add	r7, sp, #0
 800950a:	60f8      	str	r0, [r7, #12]
 800950c:	60b9      	str	r1, [r7, #8]
 800950e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009510:	2300      	movs	r3, #0
 8009512:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009518:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800951e:	2b00      	cmp	r3, #0
 8009520:	d10d      	bne.n	800953e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	2b00      	cmp	r3, #0
 8009528:	d14d      	bne.n	80095c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	689b      	ldr	r3, [r3, #8]
 800952e:	4618      	mov	r0, r3
 8009530:	f000 ffbc 	bl	800a4ac <xTaskPriorityDisinherit>
 8009534:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	2200      	movs	r2, #0
 800953a:	609a      	str	r2, [r3, #8]
 800953c:	e043      	b.n	80095c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d119      	bne.n	8009578 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	6858      	ldr	r0, [r3, #4]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800954c:	461a      	mov	r2, r3
 800954e:	68b9      	ldr	r1, [r7, #8]
 8009550:	f002 f917 	bl	800b782 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	685a      	ldr	r2, [r3, #4]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800955c:	441a      	add	r2, r3
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	685a      	ldr	r2, [r3, #4]
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	689b      	ldr	r3, [r3, #8]
 800956a:	429a      	cmp	r2, r3
 800956c:	d32b      	bcc.n	80095c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	681a      	ldr	r2, [r3, #0]
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	605a      	str	r2, [r3, #4]
 8009576:	e026      	b.n	80095c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	68d8      	ldr	r0, [r3, #12]
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009580:	461a      	mov	r2, r3
 8009582:	68b9      	ldr	r1, [r7, #8]
 8009584:	f002 f8fd 	bl	800b782 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	68da      	ldr	r2, [r3, #12]
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009590:	425b      	negs	r3, r3
 8009592:	441a      	add	r2, r3
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	68da      	ldr	r2, [r3, #12]
 800959c:	68fb      	ldr	r3, [r7, #12]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d207      	bcs.n	80095b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	689a      	ldr	r2, [r3, #8]
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ac:	425b      	negs	r3, r3
 80095ae:	441a      	add	r2, r3
 80095b0:	68fb      	ldr	r3, [r7, #12]
 80095b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2b02      	cmp	r3, #2
 80095b8:	d105      	bne.n	80095c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80095ba:	693b      	ldr	r3, [r7, #16]
 80095bc:	2b00      	cmp	r3, #0
 80095be:	d002      	beq.n	80095c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80095c0:	693b      	ldr	r3, [r7, #16]
 80095c2:	3b01      	subs	r3, #1
 80095c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80095c6:	693b      	ldr	r3, [r7, #16]
 80095c8:	1c5a      	adds	r2, r3, #1
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80095ce:	697b      	ldr	r3, [r7, #20]
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3718      	adds	r7, #24
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b082      	sub	sp, #8
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
 80095e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d018      	beq.n	800961c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	68da      	ldr	r2, [r3, #12]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095f2:	441a      	add	r2, r3
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	68da      	ldr	r2, [r3, #12]
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	429a      	cmp	r2, r3
 8009602:	d303      	bcc.n	800960c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	68d9      	ldr	r1, [r3, #12]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009614:	461a      	mov	r2, r3
 8009616:	6838      	ldr	r0, [r7, #0]
 8009618:	f002 f8b3 	bl	800b782 <memcpy>
	}
}
 800961c:	bf00      	nop
 800961e:	3708      	adds	r7, #8
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b084      	sub	sp, #16
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800962c:	f001 fc7a 	bl	800af24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009636:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009638:	e011      	b.n	800965e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800963e:	2b00      	cmp	r3, #0
 8009640:	d012      	beq.n	8009668 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	3324      	adds	r3, #36	; 0x24
 8009646:	4618      	mov	r0, r3
 8009648:	f000 fd50 	bl	800a0ec <xTaskRemoveFromEventList>
 800964c:	4603      	mov	r3, r0
 800964e:	2b00      	cmp	r3, #0
 8009650:	d001      	beq.n	8009656 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009652:	f000 fe27 	bl	800a2a4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009656:	7bfb      	ldrb	r3, [r7, #15]
 8009658:	3b01      	subs	r3, #1
 800965a:	b2db      	uxtb	r3, r3
 800965c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800965e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009662:	2b00      	cmp	r3, #0
 8009664:	dce9      	bgt.n	800963a <prvUnlockQueue+0x16>
 8009666:	e000      	b.n	800966a <prvUnlockQueue+0x46>
					break;
 8009668:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	22ff      	movs	r2, #255	; 0xff
 800966e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8009672:	f001 fc87 	bl	800af84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009676:	f001 fc55 	bl	800af24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009680:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009682:	e011      	b.n	80096a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	691b      	ldr	r3, [r3, #16]
 8009688:	2b00      	cmp	r3, #0
 800968a:	d012      	beq.n	80096b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	3310      	adds	r3, #16
 8009690:	4618      	mov	r0, r3
 8009692:	f000 fd2b 	bl	800a0ec <xTaskRemoveFromEventList>
 8009696:	4603      	mov	r3, r0
 8009698:	2b00      	cmp	r3, #0
 800969a:	d001      	beq.n	80096a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800969c:	f000 fe02 	bl	800a2a4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80096a0:	7bbb      	ldrb	r3, [r7, #14]
 80096a2:	3b01      	subs	r3, #1
 80096a4:	b2db      	uxtb	r3, r3
 80096a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80096a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	dce9      	bgt.n	8009684 <prvUnlockQueue+0x60>
 80096b0:	e000      	b.n	80096b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80096b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	22ff      	movs	r2, #255	; 0xff
 80096b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80096bc:	f001 fc62 	bl	800af84 <vPortExitCritical>
}
 80096c0:	bf00      	nop
 80096c2:	3710      	adds	r7, #16
 80096c4:	46bd      	mov	sp, r7
 80096c6:	bd80      	pop	{r7, pc}

080096c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80096c8:	b580      	push	{r7, lr}
 80096ca:	b084      	sub	sp, #16
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80096d0:	f001 fc28 	bl	800af24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d102      	bne.n	80096e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80096dc:	2301      	movs	r3, #1
 80096de:	60fb      	str	r3, [r7, #12]
 80096e0:	e001      	b.n	80096e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80096e2:	2300      	movs	r3, #0
 80096e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80096e6:	f001 fc4d 	bl	800af84 <vPortExitCritical>

	return xReturn;
 80096ea:	68fb      	ldr	r3, [r7, #12]
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3710      	adds	r7, #16
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}

080096f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b084      	sub	sp, #16
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80096fc:	f001 fc12 	bl	800af24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009708:	429a      	cmp	r2, r3
 800970a:	d102      	bne.n	8009712 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800970c:	2301      	movs	r3, #1
 800970e:	60fb      	str	r3, [r7, #12]
 8009710:	e001      	b.n	8009716 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009712:	2300      	movs	r3, #0
 8009714:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8009716:	f001 fc35 	bl	800af84 <vPortExitCritical>

	return xReturn;
 800971a:	68fb      	ldr	r3, [r7, #12]
}
 800971c:	4618      	mov	r0, r3
 800971e:	3710      	adds	r7, #16
 8009720:	46bd      	mov	sp, r7
 8009722:	bd80      	pop	{r7, pc}

08009724 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8009724:	b480      	push	{r7}
 8009726:	b085      	sub	sp, #20
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
 800972c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800972e:	2300      	movs	r3, #0
 8009730:	60fb      	str	r3, [r7, #12]
 8009732:	e014      	b.n	800975e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009734:	4a0f      	ldr	r2, [pc, #60]	; (8009774 <vQueueAddToRegistry+0x50>)
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d10b      	bne.n	8009758 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8009740:	490c      	ldr	r1, [pc, #48]	; (8009774 <vQueueAddToRegistry+0x50>)
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	683a      	ldr	r2, [r7, #0]
 8009746:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800974a:	4a0a      	ldr	r2, [pc, #40]	; (8009774 <vQueueAddToRegistry+0x50>)
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	00db      	lsls	r3, r3, #3
 8009750:	4413      	add	r3, r2
 8009752:	687a      	ldr	r2, [r7, #4]
 8009754:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009756:	e006      	b.n	8009766 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	3301      	adds	r3, #1
 800975c:	60fb      	str	r3, [r7, #12]
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	2b07      	cmp	r3, #7
 8009762:	d9e7      	bls.n	8009734 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009764:	bf00      	nop
 8009766:	bf00      	nop
 8009768:	3714      	adds	r7, #20
 800976a:	46bd      	mov	sp, r7
 800976c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009770:	4770      	bx	lr
 8009772:	bf00      	nop
 8009774:	20002af8 	.word	0x20002af8

08009778 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009778:	b580      	push	{r7, lr}
 800977a:	b086      	sub	sp, #24
 800977c:	af00      	add	r7, sp, #0
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	60b9      	str	r1, [r7, #8]
 8009782:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009788:	f001 fbcc 	bl	800af24 <vPortEnterCritical>
 800978c:	697b      	ldr	r3, [r7, #20]
 800978e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009792:	b25b      	sxtb	r3, r3
 8009794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009798:	d103      	bne.n	80097a2 <vQueueWaitForMessageRestricted+0x2a>
 800979a:	697b      	ldr	r3, [r7, #20]
 800979c:	2200      	movs	r2, #0
 800979e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80097a8:	b25b      	sxtb	r3, r3
 80097aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80097ae:	d103      	bne.n	80097b8 <vQueueWaitForMessageRestricted+0x40>
 80097b0:	697b      	ldr	r3, [r7, #20]
 80097b2:	2200      	movs	r2, #0
 80097b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80097b8:	f001 fbe4 	bl	800af84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d106      	bne.n	80097d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80097c4:	697b      	ldr	r3, [r7, #20]
 80097c6:	3324      	adds	r3, #36	; 0x24
 80097c8:	687a      	ldr	r2, [r7, #4]
 80097ca:	68b9      	ldr	r1, [r7, #8]
 80097cc:	4618      	mov	r0, r3
 80097ce:	f000 fc61 	bl	800a094 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80097d2:	6978      	ldr	r0, [r7, #20]
 80097d4:	f7ff ff26 	bl	8009624 <prvUnlockQueue>
	}
 80097d8:	bf00      	nop
 80097da:	3718      	adds	r7, #24
 80097dc:	46bd      	mov	sp, r7
 80097de:	bd80      	pop	{r7, pc}

080097e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80097e0:	b580      	push	{r7, lr}
 80097e2:	b08e      	sub	sp, #56	; 0x38
 80097e4:	af04      	add	r7, sp, #16
 80097e6:	60f8      	str	r0, [r7, #12]
 80097e8:	60b9      	str	r1, [r7, #8]
 80097ea:	607a      	str	r2, [r7, #4]
 80097ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80097ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d10a      	bne.n	800980a <xTaskCreateStatic+0x2a>
	__asm volatile
 80097f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097f8:	f383 8811 	msr	BASEPRI, r3
 80097fc:	f3bf 8f6f 	isb	sy
 8009800:	f3bf 8f4f 	dsb	sy
 8009804:	623b      	str	r3, [r7, #32]
}
 8009806:	bf00      	nop
 8009808:	e7fe      	b.n	8009808 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800980a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800980c:	2b00      	cmp	r3, #0
 800980e:	d10a      	bne.n	8009826 <xTaskCreateStatic+0x46>
	__asm volatile
 8009810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009814:	f383 8811 	msr	BASEPRI, r3
 8009818:	f3bf 8f6f 	isb	sy
 800981c:	f3bf 8f4f 	dsb	sy
 8009820:	61fb      	str	r3, [r7, #28]
}
 8009822:	bf00      	nop
 8009824:	e7fe      	b.n	8009824 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8009826:	23bc      	movs	r3, #188	; 0xbc
 8009828:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	2bbc      	cmp	r3, #188	; 0xbc
 800982e:	d00a      	beq.n	8009846 <xTaskCreateStatic+0x66>
	__asm volatile
 8009830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009834:	f383 8811 	msr	BASEPRI, r3
 8009838:	f3bf 8f6f 	isb	sy
 800983c:	f3bf 8f4f 	dsb	sy
 8009840:	61bb      	str	r3, [r7, #24]
}
 8009842:	bf00      	nop
 8009844:	e7fe      	b.n	8009844 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009846:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800984a:	2b00      	cmp	r3, #0
 800984c:	d01e      	beq.n	800988c <xTaskCreateStatic+0xac>
 800984e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009850:	2b00      	cmp	r3, #0
 8009852:	d01b      	beq.n	800988c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009856:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800985c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800985e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009860:	2202      	movs	r2, #2
 8009862:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009866:	2300      	movs	r3, #0
 8009868:	9303      	str	r3, [sp, #12]
 800986a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800986c:	9302      	str	r3, [sp, #8]
 800986e:	f107 0314 	add.w	r3, r7, #20
 8009872:	9301      	str	r3, [sp, #4]
 8009874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009876:	9300      	str	r3, [sp, #0]
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	687a      	ldr	r2, [r7, #4]
 800987c:	68b9      	ldr	r1, [r7, #8]
 800987e:	68f8      	ldr	r0, [r7, #12]
 8009880:	f000 f850 	bl	8009924 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009884:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009886:	f000 f8f3 	bl	8009a70 <prvAddNewTaskToReadyList>
 800988a:	e001      	b.n	8009890 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800988c:	2300      	movs	r3, #0
 800988e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009890:	697b      	ldr	r3, [r7, #20]
	}
 8009892:	4618      	mov	r0, r3
 8009894:	3728      	adds	r7, #40	; 0x28
 8009896:	46bd      	mov	sp, r7
 8009898:	bd80      	pop	{r7, pc}

0800989a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800989a:	b580      	push	{r7, lr}
 800989c:	b08c      	sub	sp, #48	; 0x30
 800989e:	af04      	add	r7, sp, #16
 80098a0:	60f8      	str	r0, [r7, #12]
 80098a2:	60b9      	str	r1, [r7, #8]
 80098a4:	603b      	str	r3, [r7, #0]
 80098a6:	4613      	mov	r3, r2
 80098a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80098aa:	88fb      	ldrh	r3, [r7, #6]
 80098ac:	009b      	lsls	r3, r3, #2
 80098ae:	4618      	mov	r0, r3
 80098b0:	f001 fc5a 	bl	800b168 <pvPortMalloc>
 80098b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80098b6:	697b      	ldr	r3, [r7, #20]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d00e      	beq.n	80098da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80098bc:	20bc      	movs	r0, #188	; 0xbc
 80098be:	f001 fc53 	bl	800b168 <pvPortMalloc>
 80098c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d003      	beq.n	80098d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80098ca:	69fb      	ldr	r3, [r7, #28]
 80098cc:	697a      	ldr	r2, [r7, #20]
 80098ce:	631a      	str	r2, [r3, #48]	; 0x30
 80098d0:	e005      	b.n	80098de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80098d2:	6978      	ldr	r0, [r7, #20]
 80098d4:	f001 fd14 	bl	800b300 <vPortFree>
 80098d8:	e001      	b.n	80098de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80098da:	2300      	movs	r3, #0
 80098dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80098de:	69fb      	ldr	r3, [r7, #28]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d017      	beq.n	8009914 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80098e4:	69fb      	ldr	r3, [r7, #28]
 80098e6:	2200      	movs	r2, #0
 80098e8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80098ec:	88fa      	ldrh	r2, [r7, #6]
 80098ee:	2300      	movs	r3, #0
 80098f0:	9303      	str	r3, [sp, #12]
 80098f2:	69fb      	ldr	r3, [r7, #28]
 80098f4:	9302      	str	r3, [sp, #8]
 80098f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098f8:	9301      	str	r3, [sp, #4]
 80098fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098fc:	9300      	str	r3, [sp, #0]
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	68b9      	ldr	r1, [r7, #8]
 8009902:	68f8      	ldr	r0, [r7, #12]
 8009904:	f000 f80e 	bl	8009924 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009908:	69f8      	ldr	r0, [r7, #28]
 800990a:	f000 f8b1 	bl	8009a70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800990e:	2301      	movs	r3, #1
 8009910:	61bb      	str	r3, [r7, #24]
 8009912:	e002      	b.n	800991a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009914:	f04f 33ff 	mov.w	r3, #4294967295
 8009918:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800991a:	69bb      	ldr	r3, [r7, #24]
	}
 800991c:	4618      	mov	r0, r3
 800991e:	3720      	adds	r7, #32
 8009920:	46bd      	mov	sp, r7
 8009922:	bd80      	pop	{r7, pc}

08009924 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b088      	sub	sp, #32
 8009928:	af00      	add	r7, sp, #0
 800992a:	60f8      	str	r0, [r7, #12]
 800992c:	60b9      	str	r1, [r7, #8]
 800992e:	607a      	str	r2, [r7, #4]
 8009930:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8009932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009934:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	009b      	lsls	r3, r3, #2
 800993a:	461a      	mov	r2, r3
 800993c:	21a5      	movs	r1, #165	; 0xa5
 800993e:	f001 ff2e 	bl	800b79e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009944:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800994c:	3b01      	subs	r3, #1
 800994e:	009b      	lsls	r3, r3, #2
 8009950:	4413      	add	r3, r2
 8009952:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009954:	69bb      	ldr	r3, [r7, #24]
 8009956:	f023 0307 	bic.w	r3, r3, #7
 800995a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800995c:	69bb      	ldr	r3, [r7, #24]
 800995e:	f003 0307 	and.w	r3, r3, #7
 8009962:	2b00      	cmp	r3, #0
 8009964:	d00a      	beq.n	800997c <prvInitialiseNewTask+0x58>
	__asm volatile
 8009966:	f04f 0350 	mov.w	r3, #80	; 0x50
 800996a:	f383 8811 	msr	BASEPRI, r3
 800996e:	f3bf 8f6f 	isb	sy
 8009972:	f3bf 8f4f 	dsb	sy
 8009976:	617b      	str	r3, [r7, #20]
}
 8009978:	bf00      	nop
 800997a:	e7fe      	b.n	800997a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d01f      	beq.n	80099c2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009982:	2300      	movs	r3, #0
 8009984:	61fb      	str	r3, [r7, #28]
 8009986:	e012      	b.n	80099ae <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009988:	68ba      	ldr	r2, [r7, #8]
 800998a:	69fb      	ldr	r3, [r7, #28]
 800998c:	4413      	add	r3, r2
 800998e:	7819      	ldrb	r1, [r3, #0]
 8009990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009992:	69fb      	ldr	r3, [r7, #28]
 8009994:	4413      	add	r3, r2
 8009996:	3334      	adds	r3, #52	; 0x34
 8009998:	460a      	mov	r2, r1
 800999a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800999c:	68ba      	ldr	r2, [r7, #8]
 800999e:	69fb      	ldr	r3, [r7, #28]
 80099a0:	4413      	add	r3, r2
 80099a2:	781b      	ldrb	r3, [r3, #0]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d006      	beq.n	80099b6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80099a8:	69fb      	ldr	r3, [r7, #28]
 80099aa:	3301      	adds	r3, #1
 80099ac:	61fb      	str	r3, [r7, #28]
 80099ae:	69fb      	ldr	r3, [r7, #28]
 80099b0:	2b0f      	cmp	r3, #15
 80099b2:	d9e9      	bls.n	8009988 <prvInitialiseNewTask+0x64>
 80099b4:	e000      	b.n	80099b8 <prvInitialiseNewTask+0x94>
			{
				break;
 80099b6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80099b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ba:	2200      	movs	r2, #0
 80099bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80099c0:	e003      	b.n	80099ca <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80099c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c4:	2200      	movs	r2, #0
 80099c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80099ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099cc:	2b37      	cmp	r3, #55	; 0x37
 80099ce:	d901      	bls.n	80099d4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80099d0:	2337      	movs	r3, #55	; 0x37
 80099d2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80099d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099d8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80099da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099de:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80099e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e2:	2200      	movs	r2, #0
 80099e4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80099e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e8:	3304      	adds	r3, #4
 80099ea:	4618      	mov	r0, r3
 80099ec:	f7ff f8be 	bl	8008b6c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80099f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099f2:	3318      	adds	r3, #24
 80099f4:	4618      	mov	r0, r3
 80099f6:	f7ff f8b9 	bl	8008b6c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80099fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099fe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a02:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a08:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a0e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a12:	2200      	movs	r2, #0
 8009a14:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8009a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a22:	3354      	adds	r3, #84	; 0x54
 8009a24:	2260      	movs	r2, #96	; 0x60
 8009a26:	2100      	movs	r1, #0
 8009a28:	4618      	mov	r0, r3
 8009a2a:	f001 feb8 	bl	800b79e <memset>
 8009a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a30:	4a0c      	ldr	r2, [pc, #48]	; (8009a64 <prvInitialiseNewTask+0x140>)
 8009a32:	659a      	str	r2, [r3, #88]	; 0x58
 8009a34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a36:	4a0c      	ldr	r2, [pc, #48]	; (8009a68 <prvInitialiseNewTask+0x144>)
 8009a38:	65da      	str	r2, [r3, #92]	; 0x5c
 8009a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a3c:	4a0b      	ldr	r2, [pc, #44]	; (8009a6c <prvInitialiseNewTask+0x148>)
 8009a3e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009a40:	683a      	ldr	r2, [r7, #0]
 8009a42:	68f9      	ldr	r1, [r7, #12]
 8009a44:	69b8      	ldr	r0, [r7, #24]
 8009a46:	f001 f941 	bl	800accc <pxPortInitialiseStack>
 8009a4a:	4602      	mov	r2, r0
 8009a4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a4e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009a50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d002      	beq.n	8009a5c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a5a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a5c:	bf00      	nop
 8009a5e:	3720      	adds	r7, #32
 8009a60:	46bd      	mov	sp, r7
 8009a62:	bd80      	pop	{r7, pc}
 8009a64:	080102d0 	.word	0x080102d0
 8009a68:	080102f0 	.word	0x080102f0
 8009a6c:	080102b0 	.word	0x080102b0

08009a70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b082      	sub	sp, #8
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009a78:	f001 fa54 	bl	800af24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009a7c:	4b2d      	ldr	r3, [pc, #180]	; (8009b34 <prvAddNewTaskToReadyList+0xc4>)
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	3301      	adds	r3, #1
 8009a82:	4a2c      	ldr	r2, [pc, #176]	; (8009b34 <prvAddNewTaskToReadyList+0xc4>)
 8009a84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009a86:	4b2c      	ldr	r3, [pc, #176]	; (8009b38 <prvAddNewTaskToReadyList+0xc8>)
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d109      	bne.n	8009aa2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009a8e:	4a2a      	ldr	r2, [pc, #168]	; (8009b38 <prvAddNewTaskToReadyList+0xc8>)
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009a94:	4b27      	ldr	r3, [pc, #156]	; (8009b34 <prvAddNewTaskToReadyList+0xc4>)
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	2b01      	cmp	r3, #1
 8009a9a:	d110      	bne.n	8009abe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009a9c:	f000 fc26 	bl	800a2ec <prvInitialiseTaskLists>
 8009aa0:	e00d      	b.n	8009abe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009aa2:	4b26      	ldr	r3, [pc, #152]	; (8009b3c <prvAddNewTaskToReadyList+0xcc>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d109      	bne.n	8009abe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009aaa:	4b23      	ldr	r3, [pc, #140]	; (8009b38 <prvAddNewTaskToReadyList+0xc8>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ab4:	429a      	cmp	r2, r3
 8009ab6:	d802      	bhi.n	8009abe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009ab8:	4a1f      	ldr	r2, [pc, #124]	; (8009b38 <prvAddNewTaskToReadyList+0xc8>)
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009abe:	4b20      	ldr	r3, [pc, #128]	; (8009b40 <prvAddNewTaskToReadyList+0xd0>)
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	3301      	adds	r3, #1
 8009ac4:	4a1e      	ldr	r2, [pc, #120]	; (8009b40 <prvAddNewTaskToReadyList+0xd0>)
 8009ac6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009ac8:	4b1d      	ldr	r3, [pc, #116]	; (8009b40 <prvAddNewTaskToReadyList+0xd0>)
 8009aca:	681a      	ldr	r2, [r3, #0]
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ad4:	4b1b      	ldr	r3, [pc, #108]	; (8009b44 <prvAddNewTaskToReadyList+0xd4>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	429a      	cmp	r2, r3
 8009ada:	d903      	bls.n	8009ae4 <prvAddNewTaskToReadyList+0x74>
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ae0:	4a18      	ldr	r2, [pc, #96]	; (8009b44 <prvAddNewTaskToReadyList+0xd4>)
 8009ae2:	6013      	str	r3, [r2, #0]
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ae8:	4613      	mov	r3, r2
 8009aea:	009b      	lsls	r3, r3, #2
 8009aec:	4413      	add	r3, r2
 8009aee:	009b      	lsls	r3, r3, #2
 8009af0:	4a15      	ldr	r2, [pc, #84]	; (8009b48 <prvAddNewTaskToReadyList+0xd8>)
 8009af2:	441a      	add	r2, r3
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	3304      	adds	r3, #4
 8009af8:	4619      	mov	r1, r3
 8009afa:	4610      	mov	r0, r2
 8009afc:	f7ff f843 	bl	8008b86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009b00:	f001 fa40 	bl	800af84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009b04:	4b0d      	ldr	r3, [pc, #52]	; (8009b3c <prvAddNewTaskToReadyList+0xcc>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	2b00      	cmp	r3, #0
 8009b0a:	d00e      	beq.n	8009b2a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009b0c:	4b0a      	ldr	r3, [pc, #40]	; (8009b38 <prvAddNewTaskToReadyList+0xc8>)
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b16:	429a      	cmp	r2, r3
 8009b18:	d207      	bcs.n	8009b2a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009b1a:	4b0c      	ldr	r3, [pc, #48]	; (8009b4c <prvAddNewTaskToReadyList+0xdc>)
 8009b1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b20:	601a      	str	r2, [r3, #0]
 8009b22:	f3bf 8f4f 	dsb	sy
 8009b26:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b2a:	bf00      	nop
 8009b2c:	3708      	adds	r7, #8
 8009b2e:	46bd      	mov	sp, r7
 8009b30:	bd80      	pop	{r7, pc}
 8009b32:	bf00      	nop
 8009b34:	20000f84 	.word	0x20000f84
 8009b38:	20000ab0 	.word	0x20000ab0
 8009b3c:	20000f90 	.word	0x20000f90
 8009b40:	20000fa0 	.word	0x20000fa0
 8009b44:	20000f8c 	.word	0x20000f8c
 8009b48:	20000ab4 	.word	0x20000ab4
 8009b4c:	e000ed04 	.word	0xe000ed04

08009b50 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009b50:	b580      	push	{r7, lr}
 8009b52:	b084      	sub	sp, #16
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	d017      	beq.n	8009b92 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009b62:	4b13      	ldr	r3, [pc, #76]	; (8009bb0 <vTaskDelay+0x60>)
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	2b00      	cmp	r3, #0
 8009b68:	d00a      	beq.n	8009b80 <vTaskDelay+0x30>
	__asm volatile
 8009b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b6e:	f383 8811 	msr	BASEPRI, r3
 8009b72:	f3bf 8f6f 	isb	sy
 8009b76:	f3bf 8f4f 	dsb	sy
 8009b7a:	60bb      	str	r3, [r7, #8]
}
 8009b7c:	bf00      	nop
 8009b7e:	e7fe      	b.n	8009b7e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009b80:	f000 f88a 	bl	8009c98 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009b84:	2100      	movs	r1, #0
 8009b86:	6878      	ldr	r0, [r7, #4]
 8009b88:	f000 fcfe 	bl	800a588 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009b8c:	f000 f892 	bl	8009cb4 <xTaskResumeAll>
 8009b90:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d107      	bne.n	8009ba8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009b98:	4b06      	ldr	r3, [pc, #24]	; (8009bb4 <vTaskDelay+0x64>)
 8009b9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b9e:	601a      	str	r2, [r3, #0]
 8009ba0:	f3bf 8f4f 	dsb	sy
 8009ba4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009ba8:	bf00      	nop
 8009baa:	3710      	adds	r7, #16
 8009bac:	46bd      	mov	sp, r7
 8009bae:	bd80      	pop	{r7, pc}
 8009bb0:	20000fac 	.word	0x20000fac
 8009bb4:	e000ed04 	.word	0xe000ed04

08009bb8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b08a      	sub	sp, #40	; 0x28
 8009bbc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009bc6:	463a      	mov	r2, r7
 8009bc8:	1d39      	adds	r1, r7, #4
 8009bca:	f107 0308 	add.w	r3, r7, #8
 8009bce:	4618      	mov	r0, r3
 8009bd0:	f7fe ff78 	bl	8008ac4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009bd4:	6839      	ldr	r1, [r7, #0]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	68ba      	ldr	r2, [r7, #8]
 8009bda:	9202      	str	r2, [sp, #8]
 8009bdc:	9301      	str	r3, [sp, #4]
 8009bde:	2300      	movs	r3, #0
 8009be0:	9300      	str	r3, [sp, #0]
 8009be2:	2300      	movs	r3, #0
 8009be4:	460a      	mov	r2, r1
 8009be6:	4924      	ldr	r1, [pc, #144]	; (8009c78 <vTaskStartScheduler+0xc0>)
 8009be8:	4824      	ldr	r0, [pc, #144]	; (8009c7c <vTaskStartScheduler+0xc4>)
 8009bea:	f7ff fdf9 	bl	80097e0 <xTaskCreateStatic>
 8009bee:	4603      	mov	r3, r0
 8009bf0:	4a23      	ldr	r2, [pc, #140]	; (8009c80 <vTaskStartScheduler+0xc8>)
 8009bf2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009bf4:	4b22      	ldr	r3, [pc, #136]	; (8009c80 <vTaskStartScheduler+0xc8>)
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d002      	beq.n	8009c02 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009bfc:	2301      	movs	r3, #1
 8009bfe:	617b      	str	r3, [r7, #20]
 8009c00:	e001      	b.n	8009c06 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009c02:	2300      	movs	r3, #0
 8009c04:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009c06:	697b      	ldr	r3, [r7, #20]
 8009c08:	2b01      	cmp	r3, #1
 8009c0a:	d102      	bne.n	8009c12 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009c0c:	f000 fd10 	bl	800a630 <xTimerCreateTimerTask>
 8009c10:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d11b      	bne.n	8009c50 <vTaskStartScheduler+0x98>
	__asm volatile
 8009c18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c1c:	f383 8811 	msr	BASEPRI, r3
 8009c20:	f3bf 8f6f 	isb	sy
 8009c24:	f3bf 8f4f 	dsb	sy
 8009c28:	613b      	str	r3, [r7, #16]
}
 8009c2a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009c2c:	4b15      	ldr	r3, [pc, #84]	; (8009c84 <vTaskStartScheduler+0xcc>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	3354      	adds	r3, #84	; 0x54
 8009c32:	4a15      	ldr	r2, [pc, #84]	; (8009c88 <vTaskStartScheduler+0xd0>)
 8009c34:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009c36:	4b15      	ldr	r3, [pc, #84]	; (8009c8c <vTaskStartScheduler+0xd4>)
 8009c38:	f04f 32ff 	mov.w	r2, #4294967295
 8009c3c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009c3e:	4b14      	ldr	r3, [pc, #80]	; (8009c90 <vTaskStartScheduler+0xd8>)
 8009c40:	2201      	movs	r2, #1
 8009c42:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009c44:	4b13      	ldr	r3, [pc, #76]	; (8009c94 <vTaskStartScheduler+0xdc>)
 8009c46:	2200      	movs	r2, #0
 8009c48:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009c4a:	f001 f8c9 	bl	800ade0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009c4e:	e00e      	b.n	8009c6e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c56:	d10a      	bne.n	8009c6e <vTaskStartScheduler+0xb6>
	__asm volatile
 8009c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5c:	f383 8811 	msr	BASEPRI, r3
 8009c60:	f3bf 8f6f 	isb	sy
 8009c64:	f3bf 8f4f 	dsb	sy
 8009c68:	60fb      	str	r3, [r7, #12]
}
 8009c6a:	bf00      	nop
 8009c6c:	e7fe      	b.n	8009c6c <vTaskStartScheduler+0xb4>
}
 8009c6e:	bf00      	nop
 8009c70:	3718      	adds	r7, #24
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}
 8009c76:	bf00      	nop
 8009c78:	0800ff80 	.word	0x0800ff80
 8009c7c:	0800a2bd 	.word	0x0800a2bd
 8009c80:	20000fa8 	.word	0x20000fa8
 8009c84:	20000ab0 	.word	0x20000ab0
 8009c88:	2000012c 	.word	0x2000012c
 8009c8c:	20000fa4 	.word	0x20000fa4
 8009c90:	20000f90 	.word	0x20000f90
 8009c94:	20000f88 	.word	0x20000f88

08009c98 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009c98:	b480      	push	{r7}
 8009c9a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009c9c:	4b04      	ldr	r3, [pc, #16]	; (8009cb0 <vTaskSuspendAll+0x18>)
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	3301      	adds	r3, #1
 8009ca2:	4a03      	ldr	r2, [pc, #12]	; (8009cb0 <vTaskSuspendAll+0x18>)
 8009ca4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009ca6:	bf00      	nop
 8009ca8:	46bd      	mov	sp, r7
 8009caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cae:	4770      	bx	lr
 8009cb0:	20000fac 	.word	0x20000fac

08009cb4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b084      	sub	sp, #16
 8009cb8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009cc2:	4b42      	ldr	r3, [pc, #264]	; (8009dcc <xTaskResumeAll+0x118>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d10a      	bne.n	8009ce0 <xTaskResumeAll+0x2c>
	__asm volatile
 8009cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cce:	f383 8811 	msr	BASEPRI, r3
 8009cd2:	f3bf 8f6f 	isb	sy
 8009cd6:	f3bf 8f4f 	dsb	sy
 8009cda:	603b      	str	r3, [r7, #0]
}
 8009cdc:	bf00      	nop
 8009cde:	e7fe      	b.n	8009cde <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009ce0:	f001 f920 	bl	800af24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009ce4:	4b39      	ldr	r3, [pc, #228]	; (8009dcc <xTaskResumeAll+0x118>)
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	3b01      	subs	r3, #1
 8009cea:	4a38      	ldr	r2, [pc, #224]	; (8009dcc <xTaskResumeAll+0x118>)
 8009cec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cee:	4b37      	ldr	r3, [pc, #220]	; (8009dcc <xTaskResumeAll+0x118>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d162      	bne.n	8009dbc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009cf6:	4b36      	ldr	r3, [pc, #216]	; (8009dd0 <xTaskResumeAll+0x11c>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d05e      	beq.n	8009dbc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009cfe:	e02f      	b.n	8009d60 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009d00:	4b34      	ldr	r3, [pc, #208]	; (8009dd4 <xTaskResumeAll+0x120>)
 8009d02:	68db      	ldr	r3, [r3, #12]
 8009d04:	68db      	ldr	r3, [r3, #12]
 8009d06:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	3318      	adds	r3, #24
 8009d0c:	4618      	mov	r0, r3
 8009d0e:	f7fe ff97 	bl	8008c40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	3304      	adds	r3, #4
 8009d16:	4618      	mov	r0, r3
 8009d18:	f7fe ff92 	bl	8008c40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d20:	4b2d      	ldr	r3, [pc, #180]	; (8009dd8 <xTaskResumeAll+0x124>)
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d903      	bls.n	8009d30 <xTaskResumeAll+0x7c>
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d2c:	4a2a      	ldr	r2, [pc, #168]	; (8009dd8 <xTaskResumeAll+0x124>)
 8009d2e:	6013      	str	r3, [r2, #0]
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d34:	4613      	mov	r3, r2
 8009d36:	009b      	lsls	r3, r3, #2
 8009d38:	4413      	add	r3, r2
 8009d3a:	009b      	lsls	r3, r3, #2
 8009d3c:	4a27      	ldr	r2, [pc, #156]	; (8009ddc <xTaskResumeAll+0x128>)
 8009d3e:	441a      	add	r2, r3
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	3304      	adds	r3, #4
 8009d44:	4619      	mov	r1, r3
 8009d46:	4610      	mov	r0, r2
 8009d48:	f7fe ff1d 	bl	8008b86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d50:	4b23      	ldr	r3, [pc, #140]	; (8009de0 <xTaskResumeAll+0x12c>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d56:	429a      	cmp	r2, r3
 8009d58:	d302      	bcc.n	8009d60 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009d5a:	4b22      	ldr	r3, [pc, #136]	; (8009de4 <xTaskResumeAll+0x130>)
 8009d5c:	2201      	movs	r2, #1
 8009d5e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d60:	4b1c      	ldr	r3, [pc, #112]	; (8009dd4 <xTaskResumeAll+0x120>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2b00      	cmp	r3, #0
 8009d66:	d1cb      	bne.n	8009d00 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d001      	beq.n	8009d72 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009d6e:	f000 fb5f 	bl	800a430 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009d72:	4b1d      	ldr	r3, [pc, #116]	; (8009de8 <xTaskResumeAll+0x134>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d010      	beq.n	8009da0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009d7e:	f000 f847 	bl	8009e10 <xTaskIncrementTick>
 8009d82:	4603      	mov	r3, r0
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d002      	beq.n	8009d8e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009d88:	4b16      	ldr	r3, [pc, #88]	; (8009de4 <xTaskResumeAll+0x130>)
 8009d8a:	2201      	movs	r2, #1
 8009d8c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	3b01      	subs	r3, #1
 8009d92:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d1f1      	bne.n	8009d7e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009d9a:	4b13      	ldr	r3, [pc, #76]	; (8009de8 <xTaskResumeAll+0x134>)
 8009d9c:	2200      	movs	r2, #0
 8009d9e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009da0:	4b10      	ldr	r3, [pc, #64]	; (8009de4 <xTaskResumeAll+0x130>)
 8009da2:	681b      	ldr	r3, [r3, #0]
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d009      	beq.n	8009dbc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009da8:	2301      	movs	r3, #1
 8009daa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009dac:	4b0f      	ldr	r3, [pc, #60]	; (8009dec <xTaskResumeAll+0x138>)
 8009dae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009db2:	601a      	str	r2, [r3, #0]
 8009db4:	f3bf 8f4f 	dsb	sy
 8009db8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009dbc:	f001 f8e2 	bl	800af84 <vPortExitCritical>

	return xAlreadyYielded;
 8009dc0:	68bb      	ldr	r3, [r7, #8]
}
 8009dc2:	4618      	mov	r0, r3
 8009dc4:	3710      	adds	r7, #16
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}
 8009dca:	bf00      	nop
 8009dcc:	20000fac 	.word	0x20000fac
 8009dd0:	20000f84 	.word	0x20000f84
 8009dd4:	20000f44 	.word	0x20000f44
 8009dd8:	20000f8c 	.word	0x20000f8c
 8009ddc:	20000ab4 	.word	0x20000ab4
 8009de0:	20000ab0 	.word	0x20000ab0
 8009de4:	20000f98 	.word	0x20000f98
 8009de8:	20000f94 	.word	0x20000f94
 8009dec:	e000ed04 	.word	0xe000ed04

08009df0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009df6:	4b05      	ldr	r3, [pc, #20]	; (8009e0c <xTaskGetTickCount+0x1c>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009dfc:	687b      	ldr	r3, [r7, #4]
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	370c      	adds	r7, #12
 8009e02:	46bd      	mov	sp, r7
 8009e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e08:	4770      	bx	lr
 8009e0a:	bf00      	nop
 8009e0c:	20000f88 	.word	0x20000f88

08009e10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b086      	sub	sp, #24
 8009e14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009e16:	2300      	movs	r3, #0
 8009e18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009e1a:	4b4f      	ldr	r3, [pc, #316]	; (8009f58 <xTaskIncrementTick+0x148>)
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	f040 808f 	bne.w	8009f42 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009e24:	4b4d      	ldr	r3, [pc, #308]	; (8009f5c <xTaskIncrementTick+0x14c>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	3301      	adds	r3, #1
 8009e2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009e2c:	4a4b      	ldr	r2, [pc, #300]	; (8009f5c <xTaskIncrementTick+0x14c>)
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009e32:	693b      	ldr	r3, [r7, #16]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d120      	bne.n	8009e7a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009e38:	4b49      	ldr	r3, [pc, #292]	; (8009f60 <xTaskIncrementTick+0x150>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	681b      	ldr	r3, [r3, #0]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d00a      	beq.n	8009e58 <xTaskIncrementTick+0x48>
	__asm volatile
 8009e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e46:	f383 8811 	msr	BASEPRI, r3
 8009e4a:	f3bf 8f6f 	isb	sy
 8009e4e:	f3bf 8f4f 	dsb	sy
 8009e52:	603b      	str	r3, [r7, #0]
}
 8009e54:	bf00      	nop
 8009e56:	e7fe      	b.n	8009e56 <xTaskIncrementTick+0x46>
 8009e58:	4b41      	ldr	r3, [pc, #260]	; (8009f60 <xTaskIncrementTick+0x150>)
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	60fb      	str	r3, [r7, #12]
 8009e5e:	4b41      	ldr	r3, [pc, #260]	; (8009f64 <xTaskIncrementTick+0x154>)
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	4a3f      	ldr	r2, [pc, #252]	; (8009f60 <xTaskIncrementTick+0x150>)
 8009e64:	6013      	str	r3, [r2, #0]
 8009e66:	4a3f      	ldr	r2, [pc, #252]	; (8009f64 <xTaskIncrementTick+0x154>)
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	6013      	str	r3, [r2, #0]
 8009e6c:	4b3e      	ldr	r3, [pc, #248]	; (8009f68 <xTaskIncrementTick+0x158>)
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	3301      	adds	r3, #1
 8009e72:	4a3d      	ldr	r2, [pc, #244]	; (8009f68 <xTaskIncrementTick+0x158>)
 8009e74:	6013      	str	r3, [r2, #0]
 8009e76:	f000 fadb 	bl	800a430 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009e7a:	4b3c      	ldr	r3, [pc, #240]	; (8009f6c <xTaskIncrementTick+0x15c>)
 8009e7c:	681b      	ldr	r3, [r3, #0]
 8009e7e:	693a      	ldr	r2, [r7, #16]
 8009e80:	429a      	cmp	r2, r3
 8009e82:	d349      	bcc.n	8009f18 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e84:	4b36      	ldr	r3, [pc, #216]	; (8009f60 <xTaskIncrementTick+0x150>)
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d104      	bne.n	8009e98 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e8e:	4b37      	ldr	r3, [pc, #220]	; (8009f6c <xTaskIncrementTick+0x15c>)
 8009e90:	f04f 32ff 	mov.w	r2, #4294967295
 8009e94:	601a      	str	r2, [r3, #0]
					break;
 8009e96:	e03f      	b.n	8009f18 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e98:	4b31      	ldr	r3, [pc, #196]	; (8009f60 <xTaskIncrementTick+0x150>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	68db      	ldr	r3, [r3, #12]
 8009e9e:	68db      	ldr	r3, [r3, #12]
 8009ea0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009ea2:	68bb      	ldr	r3, [r7, #8]
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009ea8:	693a      	ldr	r2, [r7, #16]
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	429a      	cmp	r2, r3
 8009eae:	d203      	bcs.n	8009eb8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009eb0:	4a2e      	ldr	r2, [pc, #184]	; (8009f6c <xTaskIncrementTick+0x15c>)
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009eb6:	e02f      	b.n	8009f18 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009eb8:	68bb      	ldr	r3, [r7, #8]
 8009eba:	3304      	adds	r3, #4
 8009ebc:	4618      	mov	r0, r3
 8009ebe:	f7fe febf 	bl	8008c40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009ec2:	68bb      	ldr	r3, [r7, #8]
 8009ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d004      	beq.n	8009ed4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	3318      	adds	r3, #24
 8009ece:	4618      	mov	r0, r3
 8009ed0:	f7fe feb6 	bl	8008c40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009ed4:	68bb      	ldr	r3, [r7, #8]
 8009ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ed8:	4b25      	ldr	r3, [pc, #148]	; (8009f70 <xTaskIncrementTick+0x160>)
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d903      	bls.n	8009ee8 <xTaskIncrementTick+0xd8>
 8009ee0:	68bb      	ldr	r3, [r7, #8]
 8009ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ee4:	4a22      	ldr	r2, [pc, #136]	; (8009f70 <xTaskIncrementTick+0x160>)
 8009ee6:	6013      	str	r3, [r2, #0]
 8009ee8:	68bb      	ldr	r3, [r7, #8]
 8009eea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eec:	4613      	mov	r3, r2
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	4413      	add	r3, r2
 8009ef2:	009b      	lsls	r3, r3, #2
 8009ef4:	4a1f      	ldr	r2, [pc, #124]	; (8009f74 <xTaskIncrementTick+0x164>)
 8009ef6:	441a      	add	r2, r3
 8009ef8:	68bb      	ldr	r3, [r7, #8]
 8009efa:	3304      	adds	r3, #4
 8009efc:	4619      	mov	r1, r3
 8009efe:	4610      	mov	r0, r2
 8009f00:	f7fe fe41 	bl	8008b86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f08:	4b1b      	ldr	r3, [pc, #108]	; (8009f78 <xTaskIncrementTick+0x168>)
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f0e:	429a      	cmp	r2, r3
 8009f10:	d3b8      	bcc.n	8009e84 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009f12:	2301      	movs	r3, #1
 8009f14:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009f16:	e7b5      	b.n	8009e84 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009f18:	4b17      	ldr	r3, [pc, #92]	; (8009f78 <xTaskIncrementTick+0x168>)
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009f1e:	4915      	ldr	r1, [pc, #84]	; (8009f74 <xTaskIncrementTick+0x164>)
 8009f20:	4613      	mov	r3, r2
 8009f22:	009b      	lsls	r3, r3, #2
 8009f24:	4413      	add	r3, r2
 8009f26:	009b      	lsls	r3, r3, #2
 8009f28:	440b      	add	r3, r1
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	2b01      	cmp	r3, #1
 8009f2e:	d901      	bls.n	8009f34 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009f30:	2301      	movs	r3, #1
 8009f32:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009f34:	4b11      	ldr	r3, [pc, #68]	; (8009f7c <xTaskIncrementTick+0x16c>)
 8009f36:	681b      	ldr	r3, [r3, #0]
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d007      	beq.n	8009f4c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009f3c:	2301      	movs	r3, #1
 8009f3e:	617b      	str	r3, [r7, #20]
 8009f40:	e004      	b.n	8009f4c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009f42:	4b0f      	ldr	r3, [pc, #60]	; (8009f80 <xTaskIncrementTick+0x170>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	3301      	adds	r3, #1
 8009f48:	4a0d      	ldr	r2, [pc, #52]	; (8009f80 <xTaskIncrementTick+0x170>)
 8009f4a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009f4c:	697b      	ldr	r3, [r7, #20]
}
 8009f4e:	4618      	mov	r0, r3
 8009f50:	3718      	adds	r7, #24
 8009f52:	46bd      	mov	sp, r7
 8009f54:	bd80      	pop	{r7, pc}
 8009f56:	bf00      	nop
 8009f58:	20000fac 	.word	0x20000fac
 8009f5c:	20000f88 	.word	0x20000f88
 8009f60:	20000f3c 	.word	0x20000f3c
 8009f64:	20000f40 	.word	0x20000f40
 8009f68:	20000f9c 	.word	0x20000f9c
 8009f6c:	20000fa4 	.word	0x20000fa4
 8009f70:	20000f8c 	.word	0x20000f8c
 8009f74:	20000ab4 	.word	0x20000ab4
 8009f78:	20000ab0 	.word	0x20000ab0
 8009f7c:	20000f98 	.word	0x20000f98
 8009f80:	20000f94 	.word	0x20000f94

08009f84 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009f84:	b480      	push	{r7}
 8009f86:	b085      	sub	sp, #20
 8009f88:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009f8a:	4b2a      	ldr	r3, [pc, #168]	; (800a034 <vTaskSwitchContext+0xb0>)
 8009f8c:	681b      	ldr	r3, [r3, #0]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d003      	beq.n	8009f9a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009f92:	4b29      	ldr	r3, [pc, #164]	; (800a038 <vTaskSwitchContext+0xb4>)
 8009f94:	2201      	movs	r2, #1
 8009f96:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009f98:	e046      	b.n	800a028 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009f9a:	4b27      	ldr	r3, [pc, #156]	; (800a038 <vTaskSwitchContext+0xb4>)
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009fa0:	4b26      	ldr	r3, [pc, #152]	; (800a03c <vTaskSwitchContext+0xb8>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	60fb      	str	r3, [r7, #12]
 8009fa6:	e010      	b.n	8009fca <vTaskSwitchContext+0x46>
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d10a      	bne.n	8009fc4 <vTaskSwitchContext+0x40>
	__asm volatile
 8009fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fb2:	f383 8811 	msr	BASEPRI, r3
 8009fb6:	f3bf 8f6f 	isb	sy
 8009fba:	f3bf 8f4f 	dsb	sy
 8009fbe:	607b      	str	r3, [r7, #4]
}
 8009fc0:	bf00      	nop
 8009fc2:	e7fe      	b.n	8009fc2 <vTaskSwitchContext+0x3e>
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	3b01      	subs	r3, #1
 8009fc8:	60fb      	str	r3, [r7, #12]
 8009fca:	491d      	ldr	r1, [pc, #116]	; (800a040 <vTaskSwitchContext+0xbc>)
 8009fcc:	68fa      	ldr	r2, [r7, #12]
 8009fce:	4613      	mov	r3, r2
 8009fd0:	009b      	lsls	r3, r3, #2
 8009fd2:	4413      	add	r3, r2
 8009fd4:	009b      	lsls	r3, r3, #2
 8009fd6:	440b      	add	r3, r1
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d0e4      	beq.n	8009fa8 <vTaskSwitchContext+0x24>
 8009fde:	68fa      	ldr	r2, [r7, #12]
 8009fe0:	4613      	mov	r3, r2
 8009fe2:	009b      	lsls	r3, r3, #2
 8009fe4:	4413      	add	r3, r2
 8009fe6:	009b      	lsls	r3, r3, #2
 8009fe8:	4a15      	ldr	r2, [pc, #84]	; (800a040 <vTaskSwitchContext+0xbc>)
 8009fea:	4413      	add	r3, r2
 8009fec:	60bb      	str	r3, [r7, #8]
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	685a      	ldr	r2, [r3, #4]
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	605a      	str	r2, [r3, #4]
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	685a      	ldr	r2, [r3, #4]
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	3308      	adds	r3, #8
 800a000:	429a      	cmp	r2, r3
 800a002:	d104      	bne.n	800a00e <vTaskSwitchContext+0x8a>
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	685a      	ldr	r2, [r3, #4]
 800a00a:	68bb      	ldr	r3, [r7, #8]
 800a00c:	605a      	str	r2, [r3, #4]
 800a00e:	68bb      	ldr	r3, [r7, #8]
 800a010:	685b      	ldr	r3, [r3, #4]
 800a012:	68db      	ldr	r3, [r3, #12]
 800a014:	4a0b      	ldr	r2, [pc, #44]	; (800a044 <vTaskSwitchContext+0xc0>)
 800a016:	6013      	str	r3, [r2, #0]
 800a018:	4a08      	ldr	r2, [pc, #32]	; (800a03c <vTaskSwitchContext+0xb8>)
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a01e:	4b09      	ldr	r3, [pc, #36]	; (800a044 <vTaskSwitchContext+0xc0>)
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	3354      	adds	r3, #84	; 0x54
 800a024:	4a08      	ldr	r2, [pc, #32]	; (800a048 <vTaskSwitchContext+0xc4>)
 800a026:	6013      	str	r3, [r2, #0]
}
 800a028:	bf00      	nop
 800a02a:	3714      	adds	r7, #20
 800a02c:	46bd      	mov	sp, r7
 800a02e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a032:	4770      	bx	lr
 800a034:	20000fac 	.word	0x20000fac
 800a038:	20000f98 	.word	0x20000f98
 800a03c:	20000f8c 	.word	0x20000f8c
 800a040:	20000ab4 	.word	0x20000ab4
 800a044:	20000ab0 	.word	0x20000ab0
 800a048:	2000012c 	.word	0x2000012c

0800a04c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a04c:	b580      	push	{r7, lr}
 800a04e:	b084      	sub	sp, #16
 800a050:	af00      	add	r7, sp, #0
 800a052:	6078      	str	r0, [r7, #4]
 800a054:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d10a      	bne.n	800a072 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a05c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a060:	f383 8811 	msr	BASEPRI, r3
 800a064:	f3bf 8f6f 	isb	sy
 800a068:	f3bf 8f4f 	dsb	sy
 800a06c:	60fb      	str	r3, [r7, #12]
}
 800a06e:	bf00      	nop
 800a070:	e7fe      	b.n	800a070 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a072:	4b07      	ldr	r3, [pc, #28]	; (800a090 <vTaskPlaceOnEventList+0x44>)
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	3318      	adds	r3, #24
 800a078:	4619      	mov	r1, r3
 800a07a:	6878      	ldr	r0, [r7, #4]
 800a07c:	f7fe fda7 	bl	8008bce <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a080:	2101      	movs	r1, #1
 800a082:	6838      	ldr	r0, [r7, #0]
 800a084:	f000 fa80 	bl	800a588 <prvAddCurrentTaskToDelayedList>
}
 800a088:	bf00      	nop
 800a08a:	3710      	adds	r7, #16
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}
 800a090:	20000ab0 	.word	0x20000ab0

0800a094 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a094:	b580      	push	{r7, lr}
 800a096:	b086      	sub	sp, #24
 800a098:	af00      	add	r7, sp, #0
 800a09a:	60f8      	str	r0, [r7, #12]
 800a09c:	60b9      	str	r1, [r7, #8]
 800a09e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d10a      	bne.n	800a0bc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a0a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0aa:	f383 8811 	msr	BASEPRI, r3
 800a0ae:	f3bf 8f6f 	isb	sy
 800a0b2:	f3bf 8f4f 	dsb	sy
 800a0b6:	617b      	str	r3, [r7, #20]
}
 800a0b8:	bf00      	nop
 800a0ba:	e7fe      	b.n	800a0ba <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a0bc:	4b0a      	ldr	r3, [pc, #40]	; (800a0e8 <vTaskPlaceOnEventListRestricted+0x54>)
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	3318      	adds	r3, #24
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	68f8      	ldr	r0, [r7, #12]
 800a0c6:	f7fe fd5e 	bl	8008b86 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d002      	beq.n	800a0d6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a0d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a0d4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a0d6:	6879      	ldr	r1, [r7, #4]
 800a0d8:	68b8      	ldr	r0, [r7, #8]
 800a0da:	f000 fa55 	bl	800a588 <prvAddCurrentTaskToDelayedList>
	}
 800a0de:	bf00      	nop
 800a0e0:	3718      	adds	r7, #24
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}
 800a0e6:	bf00      	nop
 800a0e8:	20000ab0 	.word	0x20000ab0

0800a0ec <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a0ec:	b580      	push	{r7, lr}
 800a0ee:	b086      	sub	sp, #24
 800a0f0:	af00      	add	r7, sp, #0
 800a0f2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	68db      	ldr	r3, [r3, #12]
 800a0f8:	68db      	ldr	r3, [r3, #12]
 800a0fa:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a0fc:	693b      	ldr	r3, [r7, #16]
 800a0fe:	2b00      	cmp	r3, #0
 800a100:	d10a      	bne.n	800a118 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a102:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a106:	f383 8811 	msr	BASEPRI, r3
 800a10a:	f3bf 8f6f 	isb	sy
 800a10e:	f3bf 8f4f 	dsb	sy
 800a112:	60fb      	str	r3, [r7, #12]
}
 800a114:	bf00      	nop
 800a116:	e7fe      	b.n	800a116 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a118:	693b      	ldr	r3, [r7, #16]
 800a11a:	3318      	adds	r3, #24
 800a11c:	4618      	mov	r0, r3
 800a11e:	f7fe fd8f 	bl	8008c40 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a122:	4b1e      	ldr	r3, [pc, #120]	; (800a19c <xTaskRemoveFromEventList+0xb0>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	2b00      	cmp	r3, #0
 800a128:	d11d      	bne.n	800a166 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a12a:	693b      	ldr	r3, [r7, #16]
 800a12c:	3304      	adds	r3, #4
 800a12e:	4618      	mov	r0, r3
 800a130:	f7fe fd86 	bl	8008c40 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a134:	693b      	ldr	r3, [r7, #16]
 800a136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a138:	4b19      	ldr	r3, [pc, #100]	; (800a1a0 <xTaskRemoveFromEventList+0xb4>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	429a      	cmp	r2, r3
 800a13e:	d903      	bls.n	800a148 <xTaskRemoveFromEventList+0x5c>
 800a140:	693b      	ldr	r3, [r7, #16]
 800a142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a144:	4a16      	ldr	r2, [pc, #88]	; (800a1a0 <xTaskRemoveFromEventList+0xb4>)
 800a146:	6013      	str	r3, [r2, #0]
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a14c:	4613      	mov	r3, r2
 800a14e:	009b      	lsls	r3, r3, #2
 800a150:	4413      	add	r3, r2
 800a152:	009b      	lsls	r3, r3, #2
 800a154:	4a13      	ldr	r2, [pc, #76]	; (800a1a4 <xTaskRemoveFromEventList+0xb8>)
 800a156:	441a      	add	r2, r3
 800a158:	693b      	ldr	r3, [r7, #16]
 800a15a:	3304      	adds	r3, #4
 800a15c:	4619      	mov	r1, r3
 800a15e:	4610      	mov	r0, r2
 800a160:	f7fe fd11 	bl	8008b86 <vListInsertEnd>
 800a164:	e005      	b.n	800a172 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a166:	693b      	ldr	r3, [r7, #16]
 800a168:	3318      	adds	r3, #24
 800a16a:	4619      	mov	r1, r3
 800a16c:	480e      	ldr	r0, [pc, #56]	; (800a1a8 <xTaskRemoveFromEventList+0xbc>)
 800a16e:	f7fe fd0a 	bl	8008b86 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a176:	4b0d      	ldr	r3, [pc, #52]	; (800a1ac <xTaskRemoveFromEventList+0xc0>)
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a17c:	429a      	cmp	r2, r3
 800a17e:	d905      	bls.n	800a18c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a180:	2301      	movs	r3, #1
 800a182:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a184:	4b0a      	ldr	r3, [pc, #40]	; (800a1b0 <xTaskRemoveFromEventList+0xc4>)
 800a186:	2201      	movs	r2, #1
 800a188:	601a      	str	r2, [r3, #0]
 800a18a:	e001      	b.n	800a190 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a18c:	2300      	movs	r3, #0
 800a18e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a190:	697b      	ldr	r3, [r7, #20]
}
 800a192:	4618      	mov	r0, r3
 800a194:	3718      	adds	r7, #24
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}
 800a19a:	bf00      	nop
 800a19c:	20000fac 	.word	0x20000fac
 800a1a0:	20000f8c 	.word	0x20000f8c
 800a1a4:	20000ab4 	.word	0x20000ab4
 800a1a8:	20000f44 	.word	0x20000f44
 800a1ac:	20000ab0 	.word	0x20000ab0
 800a1b0:	20000f98 	.word	0x20000f98

0800a1b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a1b4:	b480      	push	{r7}
 800a1b6:	b083      	sub	sp, #12
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a1bc:	4b06      	ldr	r3, [pc, #24]	; (800a1d8 <vTaskInternalSetTimeOutState+0x24>)
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a1c4:	4b05      	ldr	r3, [pc, #20]	; (800a1dc <vTaskInternalSetTimeOutState+0x28>)
 800a1c6:	681a      	ldr	r2, [r3, #0]
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	605a      	str	r2, [r3, #4]
}
 800a1cc:	bf00      	nop
 800a1ce:	370c      	adds	r7, #12
 800a1d0:	46bd      	mov	sp, r7
 800a1d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1d6:	4770      	bx	lr
 800a1d8:	20000f9c 	.word	0x20000f9c
 800a1dc:	20000f88 	.word	0x20000f88

0800a1e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b088      	sub	sp, #32
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
 800a1e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d10a      	bne.n	800a206 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1f4:	f383 8811 	msr	BASEPRI, r3
 800a1f8:	f3bf 8f6f 	isb	sy
 800a1fc:	f3bf 8f4f 	dsb	sy
 800a200:	613b      	str	r3, [r7, #16]
}
 800a202:	bf00      	nop
 800a204:	e7fe      	b.n	800a204 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a206:	683b      	ldr	r3, [r7, #0]
 800a208:	2b00      	cmp	r3, #0
 800a20a:	d10a      	bne.n	800a222 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a210:	f383 8811 	msr	BASEPRI, r3
 800a214:	f3bf 8f6f 	isb	sy
 800a218:	f3bf 8f4f 	dsb	sy
 800a21c:	60fb      	str	r3, [r7, #12]
}
 800a21e:	bf00      	nop
 800a220:	e7fe      	b.n	800a220 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a222:	f000 fe7f 	bl	800af24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a226:	4b1d      	ldr	r3, [pc, #116]	; (800a29c <xTaskCheckForTimeOut+0xbc>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	685b      	ldr	r3, [r3, #4]
 800a230:	69ba      	ldr	r2, [r7, #24]
 800a232:	1ad3      	subs	r3, r2, r3
 800a234:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a236:	683b      	ldr	r3, [r7, #0]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a23e:	d102      	bne.n	800a246 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a240:	2300      	movs	r3, #0
 800a242:	61fb      	str	r3, [r7, #28]
 800a244:	e023      	b.n	800a28e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	681a      	ldr	r2, [r3, #0]
 800a24a:	4b15      	ldr	r3, [pc, #84]	; (800a2a0 <xTaskCheckForTimeOut+0xc0>)
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	429a      	cmp	r2, r3
 800a250:	d007      	beq.n	800a262 <xTaskCheckForTimeOut+0x82>
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	685b      	ldr	r3, [r3, #4]
 800a256:	69ba      	ldr	r2, [r7, #24]
 800a258:	429a      	cmp	r2, r3
 800a25a:	d302      	bcc.n	800a262 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a25c:	2301      	movs	r3, #1
 800a25e:	61fb      	str	r3, [r7, #28]
 800a260:	e015      	b.n	800a28e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a262:	683b      	ldr	r3, [r7, #0]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	697a      	ldr	r2, [r7, #20]
 800a268:	429a      	cmp	r2, r3
 800a26a:	d20b      	bcs.n	800a284 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	681a      	ldr	r2, [r3, #0]
 800a270:	697b      	ldr	r3, [r7, #20]
 800a272:	1ad2      	subs	r2, r2, r3
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a278:	6878      	ldr	r0, [r7, #4]
 800a27a:	f7ff ff9b 	bl	800a1b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a27e:	2300      	movs	r3, #0
 800a280:	61fb      	str	r3, [r7, #28]
 800a282:	e004      	b.n	800a28e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	2200      	movs	r2, #0
 800a288:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a28a:	2301      	movs	r3, #1
 800a28c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a28e:	f000 fe79 	bl	800af84 <vPortExitCritical>

	return xReturn;
 800a292:	69fb      	ldr	r3, [r7, #28]
}
 800a294:	4618      	mov	r0, r3
 800a296:	3720      	adds	r7, #32
 800a298:	46bd      	mov	sp, r7
 800a29a:	bd80      	pop	{r7, pc}
 800a29c:	20000f88 	.word	0x20000f88
 800a2a0:	20000f9c 	.word	0x20000f9c

0800a2a4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a2a8:	4b03      	ldr	r3, [pc, #12]	; (800a2b8 <vTaskMissedYield+0x14>)
 800a2aa:	2201      	movs	r2, #1
 800a2ac:	601a      	str	r2, [r3, #0]
}
 800a2ae:	bf00      	nop
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr
 800a2b8:	20000f98 	.word	0x20000f98

0800a2bc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a2bc:	b580      	push	{r7, lr}
 800a2be:	b082      	sub	sp, #8
 800a2c0:	af00      	add	r7, sp, #0
 800a2c2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a2c4:	f000 f852 	bl	800a36c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a2c8:	4b06      	ldr	r3, [pc, #24]	; (800a2e4 <prvIdleTask+0x28>)
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	d9f9      	bls.n	800a2c4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a2d0:	4b05      	ldr	r3, [pc, #20]	; (800a2e8 <prvIdleTask+0x2c>)
 800a2d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2d6:	601a      	str	r2, [r3, #0]
 800a2d8:	f3bf 8f4f 	dsb	sy
 800a2dc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a2e0:	e7f0      	b.n	800a2c4 <prvIdleTask+0x8>
 800a2e2:	bf00      	nop
 800a2e4:	20000ab4 	.word	0x20000ab4
 800a2e8:	e000ed04 	.word	0xe000ed04

0800a2ec <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a2ec:	b580      	push	{r7, lr}
 800a2ee:	b082      	sub	sp, #8
 800a2f0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a2f2:	2300      	movs	r3, #0
 800a2f4:	607b      	str	r3, [r7, #4]
 800a2f6:	e00c      	b.n	800a312 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a2f8:	687a      	ldr	r2, [r7, #4]
 800a2fa:	4613      	mov	r3, r2
 800a2fc:	009b      	lsls	r3, r3, #2
 800a2fe:	4413      	add	r3, r2
 800a300:	009b      	lsls	r3, r3, #2
 800a302:	4a12      	ldr	r2, [pc, #72]	; (800a34c <prvInitialiseTaskLists+0x60>)
 800a304:	4413      	add	r3, r2
 800a306:	4618      	mov	r0, r3
 800a308:	f7fe fc10 	bl	8008b2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	3301      	adds	r3, #1
 800a310:	607b      	str	r3, [r7, #4]
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	2b37      	cmp	r3, #55	; 0x37
 800a316:	d9ef      	bls.n	800a2f8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a318:	480d      	ldr	r0, [pc, #52]	; (800a350 <prvInitialiseTaskLists+0x64>)
 800a31a:	f7fe fc07 	bl	8008b2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a31e:	480d      	ldr	r0, [pc, #52]	; (800a354 <prvInitialiseTaskLists+0x68>)
 800a320:	f7fe fc04 	bl	8008b2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a324:	480c      	ldr	r0, [pc, #48]	; (800a358 <prvInitialiseTaskLists+0x6c>)
 800a326:	f7fe fc01 	bl	8008b2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a32a:	480c      	ldr	r0, [pc, #48]	; (800a35c <prvInitialiseTaskLists+0x70>)
 800a32c:	f7fe fbfe 	bl	8008b2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a330:	480b      	ldr	r0, [pc, #44]	; (800a360 <prvInitialiseTaskLists+0x74>)
 800a332:	f7fe fbfb 	bl	8008b2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a336:	4b0b      	ldr	r3, [pc, #44]	; (800a364 <prvInitialiseTaskLists+0x78>)
 800a338:	4a05      	ldr	r2, [pc, #20]	; (800a350 <prvInitialiseTaskLists+0x64>)
 800a33a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a33c:	4b0a      	ldr	r3, [pc, #40]	; (800a368 <prvInitialiseTaskLists+0x7c>)
 800a33e:	4a05      	ldr	r2, [pc, #20]	; (800a354 <prvInitialiseTaskLists+0x68>)
 800a340:	601a      	str	r2, [r3, #0]
}
 800a342:	bf00      	nop
 800a344:	3708      	adds	r7, #8
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}
 800a34a:	bf00      	nop
 800a34c:	20000ab4 	.word	0x20000ab4
 800a350:	20000f14 	.word	0x20000f14
 800a354:	20000f28 	.word	0x20000f28
 800a358:	20000f44 	.word	0x20000f44
 800a35c:	20000f58 	.word	0x20000f58
 800a360:	20000f70 	.word	0x20000f70
 800a364:	20000f3c 	.word	0x20000f3c
 800a368:	20000f40 	.word	0x20000f40

0800a36c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a36c:	b580      	push	{r7, lr}
 800a36e:	b082      	sub	sp, #8
 800a370:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a372:	e019      	b.n	800a3a8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a374:	f000 fdd6 	bl	800af24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a378:	4b10      	ldr	r3, [pc, #64]	; (800a3bc <prvCheckTasksWaitingTermination+0x50>)
 800a37a:	68db      	ldr	r3, [r3, #12]
 800a37c:	68db      	ldr	r3, [r3, #12]
 800a37e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	3304      	adds	r3, #4
 800a384:	4618      	mov	r0, r3
 800a386:	f7fe fc5b 	bl	8008c40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a38a:	4b0d      	ldr	r3, [pc, #52]	; (800a3c0 <prvCheckTasksWaitingTermination+0x54>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	3b01      	subs	r3, #1
 800a390:	4a0b      	ldr	r2, [pc, #44]	; (800a3c0 <prvCheckTasksWaitingTermination+0x54>)
 800a392:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a394:	4b0b      	ldr	r3, [pc, #44]	; (800a3c4 <prvCheckTasksWaitingTermination+0x58>)
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	3b01      	subs	r3, #1
 800a39a:	4a0a      	ldr	r2, [pc, #40]	; (800a3c4 <prvCheckTasksWaitingTermination+0x58>)
 800a39c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a39e:	f000 fdf1 	bl	800af84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a3a2:	6878      	ldr	r0, [r7, #4]
 800a3a4:	f000 f810 	bl	800a3c8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a3a8:	4b06      	ldr	r3, [pc, #24]	; (800a3c4 <prvCheckTasksWaitingTermination+0x58>)
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d1e1      	bne.n	800a374 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a3b0:	bf00      	nop
 800a3b2:	bf00      	nop
 800a3b4:	3708      	adds	r7, #8
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}
 800a3ba:	bf00      	nop
 800a3bc:	20000f58 	.word	0x20000f58
 800a3c0:	20000f84 	.word	0x20000f84
 800a3c4:	20000f6c 	.word	0x20000f6c

0800a3c8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a3c8:	b580      	push	{r7, lr}
 800a3ca:	b084      	sub	sp, #16
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	3354      	adds	r3, #84	; 0x54
 800a3d4:	4618      	mov	r0, r3
 800a3d6:	f002 f8cd 	bl	800c574 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d108      	bne.n	800a3f6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f000 ff89 	bl	800b300 <vPortFree>
				vPortFree( pxTCB );
 800a3ee:	6878      	ldr	r0, [r7, #4]
 800a3f0:	f000 ff86 	bl	800b300 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a3f4:	e018      	b.n	800a428 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a3fc:	2b01      	cmp	r3, #1
 800a3fe:	d103      	bne.n	800a408 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	f000 ff7d 	bl	800b300 <vPortFree>
	}
 800a406:	e00f      	b.n	800a428 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a40e:	2b02      	cmp	r3, #2
 800a410:	d00a      	beq.n	800a428 <prvDeleteTCB+0x60>
	__asm volatile
 800a412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a416:	f383 8811 	msr	BASEPRI, r3
 800a41a:	f3bf 8f6f 	isb	sy
 800a41e:	f3bf 8f4f 	dsb	sy
 800a422:	60fb      	str	r3, [r7, #12]
}
 800a424:	bf00      	nop
 800a426:	e7fe      	b.n	800a426 <prvDeleteTCB+0x5e>
	}
 800a428:	bf00      	nop
 800a42a:	3710      	adds	r7, #16
 800a42c:	46bd      	mov	sp, r7
 800a42e:	bd80      	pop	{r7, pc}

0800a430 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a430:	b480      	push	{r7}
 800a432:	b083      	sub	sp, #12
 800a434:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a436:	4b0c      	ldr	r3, [pc, #48]	; (800a468 <prvResetNextTaskUnblockTime+0x38>)
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d104      	bne.n	800a44a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a440:	4b0a      	ldr	r3, [pc, #40]	; (800a46c <prvResetNextTaskUnblockTime+0x3c>)
 800a442:	f04f 32ff 	mov.w	r2, #4294967295
 800a446:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a448:	e008      	b.n	800a45c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a44a:	4b07      	ldr	r3, [pc, #28]	; (800a468 <prvResetNextTaskUnblockTime+0x38>)
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	68db      	ldr	r3, [r3, #12]
 800a450:	68db      	ldr	r3, [r3, #12]
 800a452:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	685b      	ldr	r3, [r3, #4]
 800a458:	4a04      	ldr	r2, [pc, #16]	; (800a46c <prvResetNextTaskUnblockTime+0x3c>)
 800a45a:	6013      	str	r3, [r2, #0]
}
 800a45c:	bf00      	nop
 800a45e:	370c      	adds	r7, #12
 800a460:	46bd      	mov	sp, r7
 800a462:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a466:	4770      	bx	lr
 800a468:	20000f3c 	.word	0x20000f3c
 800a46c:	20000fa4 	.word	0x20000fa4

0800a470 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a470:	b480      	push	{r7}
 800a472:	b083      	sub	sp, #12
 800a474:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a476:	4b0b      	ldr	r3, [pc, #44]	; (800a4a4 <xTaskGetSchedulerState+0x34>)
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d102      	bne.n	800a484 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a47e:	2301      	movs	r3, #1
 800a480:	607b      	str	r3, [r7, #4]
 800a482:	e008      	b.n	800a496 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a484:	4b08      	ldr	r3, [pc, #32]	; (800a4a8 <xTaskGetSchedulerState+0x38>)
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d102      	bne.n	800a492 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a48c:	2302      	movs	r3, #2
 800a48e:	607b      	str	r3, [r7, #4]
 800a490:	e001      	b.n	800a496 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a492:	2300      	movs	r3, #0
 800a494:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a496:	687b      	ldr	r3, [r7, #4]
	}
 800a498:	4618      	mov	r0, r3
 800a49a:	370c      	adds	r7, #12
 800a49c:	46bd      	mov	sp, r7
 800a49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a2:	4770      	bx	lr
 800a4a4:	20000f90 	.word	0x20000f90
 800a4a8:	20000fac 	.word	0x20000fac

0800a4ac <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b086      	sub	sp, #24
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a4b8:	2300      	movs	r3, #0
 800a4ba:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2b00      	cmp	r3, #0
 800a4c0:	d056      	beq.n	800a570 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a4c2:	4b2e      	ldr	r3, [pc, #184]	; (800a57c <xTaskPriorityDisinherit+0xd0>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	693a      	ldr	r2, [r7, #16]
 800a4c8:	429a      	cmp	r2, r3
 800a4ca:	d00a      	beq.n	800a4e2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a4cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4d0:	f383 8811 	msr	BASEPRI, r3
 800a4d4:	f3bf 8f6f 	isb	sy
 800a4d8:	f3bf 8f4f 	dsb	sy
 800a4dc:	60fb      	str	r3, [r7, #12]
}
 800a4de:	bf00      	nop
 800a4e0:	e7fe      	b.n	800a4e0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d10a      	bne.n	800a500 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a4ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ee:	f383 8811 	msr	BASEPRI, r3
 800a4f2:	f3bf 8f6f 	isb	sy
 800a4f6:	f3bf 8f4f 	dsb	sy
 800a4fa:	60bb      	str	r3, [r7, #8]
}
 800a4fc:	bf00      	nop
 800a4fe:	e7fe      	b.n	800a4fe <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a500:	693b      	ldr	r3, [r7, #16]
 800a502:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a504:	1e5a      	subs	r2, r3, #1
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a50e:	693b      	ldr	r3, [r7, #16]
 800a510:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a512:	429a      	cmp	r2, r3
 800a514:	d02c      	beq.n	800a570 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a516:	693b      	ldr	r3, [r7, #16]
 800a518:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a51a:	2b00      	cmp	r3, #0
 800a51c:	d128      	bne.n	800a570 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a51e:	693b      	ldr	r3, [r7, #16]
 800a520:	3304      	adds	r3, #4
 800a522:	4618      	mov	r0, r3
 800a524:	f7fe fb8c 	bl	8008c40 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a528:	693b      	ldr	r3, [r7, #16]
 800a52a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a530:	693b      	ldr	r3, [r7, #16]
 800a532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a534:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a538:	693b      	ldr	r3, [r7, #16]
 800a53a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a53c:	693b      	ldr	r3, [r7, #16]
 800a53e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a540:	4b0f      	ldr	r3, [pc, #60]	; (800a580 <xTaskPriorityDisinherit+0xd4>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	429a      	cmp	r2, r3
 800a546:	d903      	bls.n	800a550 <xTaskPriorityDisinherit+0xa4>
 800a548:	693b      	ldr	r3, [r7, #16]
 800a54a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a54c:	4a0c      	ldr	r2, [pc, #48]	; (800a580 <xTaskPriorityDisinherit+0xd4>)
 800a54e:	6013      	str	r3, [r2, #0]
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a554:	4613      	mov	r3, r2
 800a556:	009b      	lsls	r3, r3, #2
 800a558:	4413      	add	r3, r2
 800a55a:	009b      	lsls	r3, r3, #2
 800a55c:	4a09      	ldr	r2, [pc, #36]	; (800a584 <xTaskPriorityDisinherit+0xd8>)
 800a55e:	441a      	add	r2, r3
 800a560:	693b      	ldr	r3, [r7, #16]
 800a562:	3304      	adds	r3, #4
 800a564:	4619      	mov	r1, r3
 800a566:	4610      	mov	r0, r2
 800a568:	f7fe fb0d 	bl	8008b86 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a56c:	2301      	movs	r3, #1
 800a56e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a570:	697b      	ldr	r3, [r7, #20]
	}
 800a572:	4618      	mov	r0, r3
 800a574:	3718      	adds	r7, #24
 800a576:	46bd      	mov	sp, r7
 800a578:	bd80      	pop	{r7, pc}
 800a57a:	bf00      	nop
 800a57c:	20000ab0 	.word	0x20000ab0
 800a580:	20000f8c 	.word	0x20000f8c
 800a584:	20000ab4 	.word	0x20000ab4

0800a588 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a588:	b580      	push	{r7, lr}
 800a58a:	b084      	sub	sp, #16
 800a58c:	af00      	add	r7, sp, #0
 800a58e:	6078      	str	r0, [r7, #4]
 800a590:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a592:	4b21      	ldr	r3, [pc, #132]	; (800a618 <prvAddCurrentTaskToDelayedList+0x90>)
 800a594:	681b      	ldr	r3, [r3, #0]
 800a596:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a598:	4b20      	ldr	r3, [pc, #128]	; (800a61c <prvAddCurrentTaskToDelayedList+0x94>)
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	3304      	adds	r3, #4
 800a59e:	4618      	mov	r0, r3
 800a5a0:	f7fe fb4e 	bl	8008c40 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5aa:	d10a      	bne.n	800a5c2 <prvAddCurrentTaskToDelayedList+0x3a>
 800a5ac:	683b      	ldr	r3, [r7, #0]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d007      	beq.n	800a5c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a5b2:	4b1a      	ldr	r3, [pc, #104]	; (800a61c <prvAddCurrentTaskToDelayedList+0x94>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	3304      	adds	r3, #4
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	4819      	ldr	r0, [pc, #100]	; (800a620 <prvAddCurrentTaskToDelayedList+0x98>)
 800a5bc:	f7fe fae3 	bl	8008b86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a5c0:	e026      	b.n	800a610 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a5c2:	68fa      	ldr	r2, [r7, #12]
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	4413      	add	r3, r2
 800a5c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a5ca:	4b14      	ldr	r3, [pc, #80]	; (800a61c <prvAddCurrentTaskToDelayedList+0x94>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	68ba      	ldr	r2, [r7, #8]
 800a5d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a5d2:	68ba      	ldr	r2, [r7, #8]
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	429a      	cmp	r2, r3
 800a5d8:	d209      	bcs.n	800a5ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a5da:	4b12      	ldr	r3, [pc, #72]	; (800a624 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a5dc:	681a      	ldr	r2, [r3, #0]
 800a5de:	4b0f      	ldr	r3, [pc, #60]	; (800a61c <prvAddCurrentTaskToDelayedList+0x94>)
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	3304      	adds	r3, #4
 800a5e4:	4619      	mov	r1, r3
 800a5e6:	4610      	mov	r0, r2
 800a5e8:	f7fe faf1 	bl	8008bce <vListInsert>
}
 800a5ec:	e010      	b.n	800a610 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a5ee:	4b0e      	ldr	r3, [pc, #56]	; (800a628 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a5f0:	681a      	ldr	r2, [r3, #0]
 800a5f2:	4b0a      	ldr	r3, [pc, #40]	; (800a61c <prvAddCurrentTaskToDelayedList+0x94>)
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	3304      	adds	r3, #4
 800a5f8:	4619      	mov	r1, r3
 800a5fa:	4610      	mov	r0, r2
 800a5fc:	f7fe fae7 	bl	8008bce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a600:	4b0a      	ldr	r3, [pc, #40]	; (800a62c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	68ba      	ldr	r2, [r7, #8]
 800a606:	429a      	cmp	r2, r3
 800a608:	d202      	bcs.n	800a610 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a60a:	4a08      	ldr	r2, [pc, #32]	; (800a62c <prvAddCurrentTaskToDelayedList+0xa4>)
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	6013      	str	r3, [r2, #0]
}
 800a610:	bf00      	nop
 800a612:	3710      	adds	r7, #16
 800a614:	46bd      	mov	sp, r7
 800a616:	bd80      	pop	{r7, pc}
 800a618:	20000f88 	.word	0x20000f88
 800a61c:	20000ab0 	.word	0x20000ab0
 800a620:	20000f70 	.word	0x20000f70
 800a624:	20000f40 	.word	0x20000f40
 800a628:	20000f3c 	.word	0x20000f3c
 800a62c:	20000fa4 	.word	0x20000fa4

0800a630 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b08a      	sub	sp, #40	; 0x28
 800a634:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a636:	2300      	movs	r3, #0
 800a638:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a63a:	f000 fb07 	bl	800ac4c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a63e:	4b1c      	ldr	r3, [pc, #112]	; (800a6b0 <xTimerCreateTimerTask+0x80>)
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	2b00      	cmp	r3, #0
 800a644:	d021      	beq.n	800a68a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a646:	2300      	movs	r3, #0
 800a648:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a64a:	2300      	movs	r3, #0
 800a64c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a64e:	1d3a      	adds	r2, r7, #4
 800a650:	f107 0108 	add.w	r1, r7, #8
 800a654:	f107 030c 	add.w	r3, r7, #12
 800a658:	4618      	mov	r0, r3
 800a65a:	f7fe fa4d 	bl	8008af8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a65e:	6879      	ldr	r1, [r7, #4]
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	68fa      	ldr	r2, [r7, #12]
 800a664:	9202      	str	r2, [sp, #8]
 800a666:	9301      	str	r3, [sp, #4]
 800a668:	2302      	movs	r3, #2
 800a66a:	9300      	str	r3, [sp, #0]
 800a66c:	2300      	movs	r3, #0
 800a66e:	460a      	mov	r2, r1
 800a670:	4910      	ldr	r1, [pc, #64]	; (800a6b4 <xTimerCreateTimerTask+0x84>)
 800a672:	4811      	ldr	r0, [pc, #68]	; (800a6b8 <xTimerCreateTimerTask+0x88>)
 800a674:	f7ff f8b4 	bl	80097e0 <xTaskCreateStatic>
 800a678:	4603      	mov	r3, r0
 800a67a:	4a10      	ldr	r2, [pc, #64]	; (800a6bc <xTimerCreateTimerTask+0x8c>)
 800a67c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a67e:	4b0f      	ldr	r3, [pc, #60]	; (800a6bc <xTimerCreateTimerTask+0x8c>)
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d001      	beq.n	800a68a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a686:	2301      	movs	r3, #1
 800a688:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a68a:	697b      	ldr	r3, [r7, #20]
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d10a      	bne.n	800a6a6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a694:	f383 8811 	msr	BASEPRI, r3
 800a698:	f3bf 8f6f 	isb	sy
 800a69c:	f3bf 8f4f 	dsb	sy
 800a6a0:	613b      	str	r3, [r7, #16]
}
 800a6a2:	bf00      	nop
 800a6a4:	e7fe      	b.n	800a6a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a6a6:	697b      	ldr	r3, [r7, #20]
}
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	3718      	adds	r7, #24
 800a6ac:	46bd      	mov	sp, r7
 800a6ae:	bd80      	pop	{r7, pc}
 800a6b0:	20000fe0 	.word	0x20000fe0
 800a6b4:	0800ff88 	.word	0x0800ff88
 800a6b8:	0800a7f5 	.word	0x0800a7f5
 800a6bc:	20000fe4 	.word	0x20000fe4

0800a6c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a6c0:	b580      	push	{r7, lr}
 800a6c2:	b08a      	sub	sp, #40	; 0x28
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	60f8      	str	r0, [r7, #12]
 800a6c8:	60b9      	str	r1, [r7, #8]
 800a6ca:	607a      	str	r2, [r7, #4]
 800a6cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a6ce:	2300      	movs	r3, #0
 800a6d0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a6d2:	68fb      	ldr	r3, [r7, #12]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d10a      	bne.n	800a6ee <xTimerGenericCommand+0x2e>
	__asm volatile
 800a6d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6dc:	f383 8811 	msr	BASEPRI, r3
 800a6e0:	f3bf 8f6f 	isb	sy
 800a6e4:	f3bf 8f4f 	dsb	sy
 800a6e8:	623b      	str	r3, [r7, #32]
}
 800a6ea:	bf00      	nop
 800a6ec:	e7fe      	b.n	800a6ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a6ee:	4b1a      	ldr	r3, [pc, #104]	; (800a758 <xTimerGenericCommand+0x98>)
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d02a      	beq.n	800a74c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a702:	68bb      	ldr	r3, [r7, #8]
 800a704:	2b05      	cmp	r3, #5
 800a706:	dc18      	bgt.n	800a73a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a708:	f7ff feb2 	bl	800a470 <xTaskGetSchedulerState>
 800a70c:	4603      	mov	r3, r0
 800a70e:	2b02      	cmp	r3, #2
 800a710:	d109      	bne.n	800a726 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a712:	4b11      	ldr	r3, [pc, #68]	; (800a758 <xTimerGenericCommand+0x98>)
 800a714:	6818      	ldr	r0, [r3, #0]
 800a716:	f107 0110 	add.w	r1, r7, #16
 800a71a:	2300      	movs	r3, #0
 800a71c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a71e:	f7fe fbf7 	bl	8008f10 <xQueueGenericSend>
 800a722:	6278      	str	r0, [r7, #36]	; 0x24
 800a724:	e012      	b.n	800a74c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a726:	4b0c      	ldr	r3, [pc, #48]	; (800a758 <xTimerGenericCommand+0x98>)
 800a728:	6818      	ldr	r0, [r3, #0]
 800a72a:	f107 0110 	add.w	r1, r7, #16
 800a72e:	2300      	movs	r3, #0
 800a730:	2200      	movs	r2, #0
 800a732:	f7fe fbed 	bl	8008f10 <xQueueGenericSend>
 800a736:	6278      	str	r0, [r7, #36]	; 0x24
 800a738:	e008      	b.n	800a74c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a73a:	4b07      	ldr	r3, [pc, #28]	; (800a758 <xTimerGenericCommand+0x98>)
 800a73c:	6818      	ldr	r0, [r3, #0]
 800a73e:	f107 0110 	add.w	r1, r7, #16
 800a742:	2300      	movs	r3, #0
 800a744:	683a      	ldr	r2, [r7, #0]
 800a746:	f7fe fce1 	bl	800910c <xQueueGenericSendFromISR>
 800a74a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a74c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a74e:	4618      	mov	r0, r3
 800a750:	3728      	adds	r7, #40	; 0x28
 800a752:	46bd      	mov	sp, r7
 800a754:	bd80      	pop	{r7, pc}
 800a756:	bf00      	nop
 800a758:	20000fe0 	.word	0x20000fe0

0800a75c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b088      	sub	sp, #32
 800a760:	af02      	add	r7, sp, #8
 800a762:	6078      	str	r0, [r7, #4]
 800a764:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a766:	4b22      	ldr	r3, [pc, #136]	; (800a7f0 <prvProcessExpiredTimer+0x94>)
 800a768:	681b      	ldr	r3, [r3, #0]
 800a76a:	68db      	ldr	r3, [r3, #12]
 800a76c:	68db      	ldr	r3, [r3, #12]
 800a76e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	3304      	adds	r3, #4
 800a774:	4618      	mov	r0, r3
 800a776:	f7fe fa63 	bl	8008c40 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a77a:	697b      	ldr	r3, [r7, #20]
 800a77c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a780:	f003 0304 	and.w	r3, r3, #4
 800a784:	2b00      	cmp	r3, #0
 800a786:	d022      	beq.n	800a7ce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	699a      	ldr	r2, [r3, #24]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	18d1      	adds	r1, r2, r3
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	683a      	ldr	r2, [r7, #0]
 800a794:	6978      	ldr	r0, [r7, #20]
 800a796:	f000 f8d1 	bl	800a93c <prvInsertTimerInActiveList>
 800a79a:	4603      	mov	r3, r0
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d01f      	beq.n	800a7e0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a7a0:	2300      	movs	r3, #0
 800a7a2:	9300      	str	r3, [sp, #0]
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	687a      	ldr	r2, [r7, #4]
 800a7a8:	2100      	movs	r1, #0
 800a7aa:	6978      	ldr	r0, [r7, #20]
 800a7ac:	f7ff ff88 	bl	800a6c0 <xTimerGenericCommand>
 800a7b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a7b2:	693b      	ldr	r3, [r7, #16]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d113      	bne.n	800a7e0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7bc:	f383 8811 	msr	BASEPRI, r3
 800a7c0:	f3bf 8f6f 	isb	sy
 800a7c4:	f3bf 8f4f 	dsb	sy
 800a7c8:	60fb      	str	r3, [r7, #12]
}
 800a7ca:	bf00      	nop
 800a7cc:	e7fe      	b.n	800a7cc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a7ce:	697b      	ldr	r3, [r7, #20]
 800a7d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7d4:	f023 0301 	bic.w	r3, r3, #1
 800a7d8:	b2da      	uxtb	r2, r3
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a7e0:	697b      	ldr	r3, [r7, #20]
 800a7e2:	6a1b      	ldr	r3, [r3, #32]
 800a7e4:	6978      	ldr	r0, [r7, #20]
 800a7e6:	4798      	blx	r3
}
 800a7e8:	bf00      	nop
 800a7ea:	3718      	adds	r7, #24
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}
 800a7f0:	20000fd8 	.word	0x20000fd8

0800a7f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a7f4:	b580      	push	{r7, lr}
 800a7f6:	b084      	sub	sp, #16
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a7fc:	f107 0308 	add.w	r3, r7, #8
 800a800:	4618      	mov	r0, r3
 800a802:	f000 f857 	bl	800a8b4 <prvGetNextExpireTime>
 800a806:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a808:	68bb      	ldr	r3, [r7, #8]
 800a80a:	4619      	mov	r1, r3
 800a80c:	68f8      	ldr	r0, [r7, #12]
 800a80e:	f000 f803 	bl	800a818 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a812:	f000 f8d5 	bl	800a9c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a816:	e7f1      	b.n	800a7fc <prvTimerTask+0x8>

0800a818 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a818:	b580      	push	{r7, lr}
 800a81a:	b084      	sub	sp, #16
 800a81c:	af00      	add	r7, sp, #0
 800a81e:	6078      	str	r0, [r7, #4]
 800a820:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a822:	f7ff fa39 	bl	8009c98 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a826:	f107 0308 	add.w	r3, r7, #8
 800a82a:	4618      	mov	r0, r3
 800a82c:	f000 f866 	bl	800a8fc <prvSampleTimeNow>
 800a830:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a832:	68bb      	ldr	r3, [r7, #8]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d130      	bne.n	800a89a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a838:	683b      	ldr	r3, [r7, #0]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d10a      	bne.n	800a854 <prvProcessTimerOrBlockTask+0x3c>
 800a83e:	687a      	ldr	r2, [r7, #4]
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	429a      	cmp	r2, r3
 800a844:	d806      	bhi.n	800a854 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a846:	f7ff fa35 	bl	8009cb4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a84a:	68f9      	ldr	r1, [r7, #12]
 800a84c:	6878      	ldr	r0, [r7, #4]
 800a84e:	f7ff ff85 	bl	800a75c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a852:	e024      	b.n	800a89e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a854:	683b      	ldr	r3, [r7, #0]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d008      	beq.n	800a86c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a85a:	4b13      	ldr	r3, [pc, #76]	; (800a8a8 <prvProcessTimerOrBlockTask+0x90>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	681b      	ldr	r3, [r3, #0]
 800a860:	2b00      	cmp	r3, #0
 800a862:	d101      	bne.n	800a868 <prvProcessTimerOrBlockTask+0x50>
 800a864:	2301      	movs	r3, #1
 800a866:	e000      	b.n	800a86a <prvProcessTimerOrBlockTask+0x52>
 800a868:	2300      	movs	r3, #0
 800a86a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a86c:	4b0f      	ldr	r3, [pc, #60]	; (800a8ac <prvProcessTimerOrBlockTask+0x94>)
 800a86e:	6818      	ldr	r0, [r3, #0]
 800a870:	687a      	ldr	r2, [r7, #4]
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	1ad3      	subs	r3, r2, r3
 800a876:	683a      	ldr	r2, [r7, #0]
 800a878:	4619      	mov	r1, r3
 800a87a:	f7fe ff7d 	bl	8009778 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a87e:	f7ff fa19 	bl	8009cb4 <xTaskResumeAll>
 800a882:	4603      	mov	r3, r0
 800a884:	2b00      	cmp	r3, #0
 800a886:	d10a      	bne.n	800a89e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a888:	4b09      	ldr	r3, [pc, #36]	; (800a8b0 <prvProcessTimerOrBlockTask+0x98>)
 800a88a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a88e:	601a      	str	r2, [r3, #0]
 800a890:	f3bf 8f4f 	dsb	sy
 800a894:	f3bf 8f6f 	isb	sy
}
 800a898:	e001      	b.n	800a89e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a89a:	f7ff fa0b 	bl	8009cb4 <xTaskResumeAll>
}
 800a89e:	bf00      	nop
 800a8a0:	3710      	adds	r7, #16
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	20000fdc 	.word	0x20000fdc
 800a8ac:	20000fe0 	.word	0x20000fe0
 800a8b0:	e000ed04 	.word	0xe000ed04

0800a8b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a8b4:	b480      	push	{r7}
 800a8b6:	b085      	sub	sp, #20
 800a8b8:	af00      	add	r7, sp, #0
 800a8ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a8bc:	4b0e      	ldr	r3, [pc, #56]	; (800a8f8 <prvGetNextExpireTime+0x44>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	681b      	ldr	r3, [r3, #0]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d101      	bne.n	800a8ca <prvGetNextExpireTime+0x16>
 800a8c6:	2201      	movs	r2, #1
 800a8c8:	e000      	b.n	800a8cc <prvGetNextExpireTime+0x18>
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d105      	bne.n	800a8e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a8d8:	4b07      	ldr	r3, [pc, #28]	; (800a8f8 <prvGetNextExpireTime+0x44>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	68db      	ldr	r3, [r3, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	60fb      	str	r3, [r7, #12]
 800a8e2:	e001      	b.n	800a8e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a8e4:	2300      	movs	r3, #0
 800a8e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3714      	adds	r7, #20
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f4:	4770      	bx	lr
 800a8f6:	bf00      	nop
 800a8f8:	20000fd8 	.word	0x20000fd8

0800a8fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a8fc:	b580      	push	{r7, lr}
 800a8fe:	b084      	sub	sp, #16
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a904:	f7ff fa74 	bl	8009df0 <xTaskGetTickCount>
 800a908:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a90a:	4b0b      	ldr	r3, [pc, #44]	; (800a938 <prvSampleTimeNow+0x3c>)
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	68fa      	ldr	r2, [r7, #12]
 800a910:	429a      	cmp	r2, r3
 800a912:	d205      	bcs.n	800a920 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a914:	f000 f936 	bl	800ab84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	2201      	movs	r2, #1
 800a91c:	601a      	str	r2, [r3, #0]
 800a91e:	e002      	b.n	800a926 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2200      	movs	r2, #0
 800a924:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a926:	4a04      	ldr	r2, [pc, #16]	; (800a938 <prvSampleTimeNow+0x3c>)
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a92c:	68fb      	ldr	r3, [r7, #12]
}
 800a92e:	4618      	mov	r0, r3
 800a930:	3710      	adds	r7, #16
 800a932:	46bd      	mov	sp, r7
 800a934:	bd80      	pop	{r7, pc}
 800a936:	bf00      	nop
 800a938:	20000fe8 	.word	0x20000fe8

0800a93c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a93c:	b580      	push	{r7, lr}
 800a93e:	b086      	sub	sp, #24
 800a940:	af00      	add	r7, sp, #0
 800a942:	60f8      	str	r0, [r7, #12]
 800a944:	60b9      	str	r1, [r7, #8]
 800a946:	607a      	str	r2, [r7, #4]
 800a948:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a94a:	2300      	movs	r3, #0
 800a94c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	68ba      	ldr	r2, [r7, #8]
 800a952:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a954:	68fb      	ldr	r3, [r7, #12]
 800a956:	68fa      	ldr	r2, [r7, #12]
 800a958:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a95a:	68ba      	ldr	r2, [r7, #8]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	429a      	cmp	r2, r3
 800a960:	d812      	bhi.n	800a988 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a962:	687a      	ldr	r2, [r7, #4]
 800a964:	683b      	ldr	r3, [r7, #0]
 800a966:	1ad2      	subs	r2, r2, r3
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	699b      	ldr	r3, [r3, #24]
 800a96c:	429a      	cmp	r2, r3
 800a96e:	d302      	bcc.n	800a976 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a970:	2301      	movs	r3, #1
 800a972:	617b      	str	r3, [r7, #20]
 800a974:	e01b      	b.n	800a9ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a976:	4b10      	ldr	r3, [pc, #64]	; (800a9b8 <prvInsertTimerInActiveList+0x7c>)
 800a978:	681a      	ldr	r2, [r3, #0]
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	3304      	adds	r3, #4
 800a97e:	4619      	mov	r1, r3
 800a980:	4610      	mov	r0, r2
 800a982:	f7fe f924 	bl	8008bce <vListInsert>
 800a986:	e012      	b.n	800a9ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a988:	687a      	ldr	r2, [r7, #4]
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	429a      	cmp	r2, r3
 800a98e:	d206      	bcs.n	800a99e <prvInsertTimerInActiveList+0x62>
 800a990:	68ba      	ldr	r2, [r7, #8]
 800a992:	683b      	ldr	r3, [r7, #0]
 800a994:	429a      	cmp	r2, r3
 800a996:	d302      	bcc.n	800a99e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a998:	2301      	movs	r3, #1
 800a99a:	617b      	str	r3, [r7, #20]
 800a99c:	e007      	b.n	800a9ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a99e:	4b07      	ldr	r3, [pc, #28]	; (800a9bc <prvInsertTimerInActiveList+0x80>)
 800a9a0:	681a      	ldr	r2, [r3, #0]
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	3304      	adds	r3, #4
 800a9a6:	4619      	mov	r1, r3
 800a9a8:	4610      	mov	r0, r2
 800a9aa:	f7fe f910 	bl	8008bce <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a9ae:	697b      	ldr	r3, [r7, #20]
}
 800a9b0:	4618      	mov	r0, r3
 800a9b2:	3718      	adds	r7, #24
 800a9b4:	46bd      	mov	sp, r7
 800a9b6:	bd80      	pop	{r7, pc}
 800a9b8:	20000fdc 	.word	0x20000fdc
 800a9bc:	20000fd8 	.word	0x20000fd8

0800a9c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a9c0:	b580      	push	{r7, lr}
 800a9c2:	b08e      	sub	sp, #56	; 0x38
 800a9c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a9c6:	e0ca      	b.n	800ab5e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	da18      	bge.n	800aa00 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a9ce:	1d3b      	adds	r3, r7, #4
 800a9d0:	3304      	adds	r3, #4
 800a9d2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a9d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d10a      	bne.n	800a9f0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a9da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9de:	f383 8811 	msr	BASEPRI, r3
 800a9e2:	f3bf 8f6f 	isb	sy
 800a9e6:	f3bf 8f4f 	dsb	sy
 800a9ea:	61fb      	str	r3, [r7, #28]
}
 800a9ec:	bf00      	nop
 800a9ee:	e7fe      	b.n	800a9ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9f6:	6850      	ldr	r0, [r2, #4]
 800a9f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9fa:	6892      	ldr	r2, [r2, #8]
 800a9fc:	4611      	mov	r1, r2
 800a9fe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800aa00:	687b      	ldr	r3, [r7, #4]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	f2c0 80aa 	blt.w	800ab5c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800aa0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa0e:	695b      	ldr	r3, [r3, #20]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d004      	beq.n	800aa1e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aa14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa16:	3304      	adds	r3, #4
 800aa18:	4618      	mov	r0, r3
 800aa1a:	f7fe f911 	bl	8008c40 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800aa1e:	463b      	mov	r3, r7
 800aa20:	4618      	mov	r0, r3
 800aa22:	f7ff ff6b 	bl	800a8fc <prvSampleTimeNow>
 800aa26:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	2b09      	cmp	r3, #9
 800aa2c:	f200 8097 	bhi.w	800ab5e <prvProcessReceivedCommands+0x19e>
 800aa30:	a201      	add	r2, pc, #4	; (adr r2, 800aa38 <prvProcessReceivedCommands+0x78>)
 800aa32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa36:	bf00      	nop
 800aa38:	0800aa61 	.word	0x0800aa61
 800aa3c:	0800aa61 	.word	0x0800aa61
 800aa40:	0800aa61 	.word	0x0800aa61
 800aa44:	0800aad5 	.word	0x0800aad5
 800aa48:	0800aae9 	.word	0x0800aae9
 800aa4c:	0800ab33 	.word	0x0800ab33
 800aa50:	0800aa61 	.word	0x0800aa61
 800aa54:	0800aa61 	.word	0x0800aa61
 800aa58:	0800aad5 	.word	0x0800aad5
 800aa5c:	0800aae9 	.word	0x0800aae9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aa60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa66:	f043 0301 	orr.w	r3, r3, #1
 800aa6a:	b2da      	uxtb	r2, r3
 800aa6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aa72:	68ba      	ldr	r2, [r7, #8]
 800aa74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa76:	699b      	ldr	r3, [r3, #24]
 800aa78:	18d1      	adds	r1, r2, r3
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa80:	f7ff ff5c 	bl	800a93c <prvInsertTimerInActiveList>
 800aa84:	4603      	mov	r3, r0
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d069      	beq.n	800ab5e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa8c:	6a1b      	ldr	r3, [r3, #32]
 800aa8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa90:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa98:	f003 0304 	and.w	r3, r3, #4
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d05e      	beq.n	800ab5e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aaa0:	68ba      	ldr	r2, [r7, #8]
 800aaa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa4:	699b      	ldr	r3, [r3, #24]
 800aaa6:	441a      	add	r2, r3
 800aaa8:	2300      	movs	r3, #0
 800aaaa:	9300      	str	r3, [sp, #0]
 800aaac:	2300      	movs	r3, #0
 800aaae:	2100      	movs	r1, #0
 800aab0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aab2:	f7ff fe05 	bl	800a6c0 <xTimerGenericCommand>
 800aab6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800aab8:	6a3b      	ldr	r3, [r7, #32]
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d14f      	bne.n	800ab5e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800aabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac2:	f383 8811 	msr	BASEPRI, r3
 800aac6:	f3bf 8f6f 	isb	sy
 800aaca:	f3bf 8f4f 	dsb	sy
 800aace:	61bb      	str	r3, [r7, #24]
}
 800aad0:	bf00      	nop
 800aad2:	e7fe      	b.n	800aad2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aad4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aad6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aada:	f023 0301 	bic.w	r3, r3, #1
 800aade:	b2da      	uxtb	r2, r3
 800aae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aae2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800aae6:	e03a      	b.n	800ab5e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aaee:	f043 0301 	orr.w	r3, r3, #1
 800aaf2:	b2da      	uxtb	r2, r3
 800aaf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aafa:	68ba      	ldr	r2, [r7, #8]
 800aafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aafe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800ab00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab02:	699b      	ldr	r3, [r3, #24]
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	d10a      	bne.n	800ab1e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800ab08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab0c:	f383 8811 	msr	BASEPRI, r3
 800ab10:	f3bf 8f6f 	isb	sy
 800ab14:	f3bf 8f4f 	dsb	sy
 800ab18:	617b      	str	r3, [r7, #20]
}
 800ab1a:	bf00      	nop
 800ab1c:	e7fe      	b.n	800ab1c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800ab1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab20:	699a      	ldr	r2, [r3, #24]
 800ab22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab24:	18d1      	adds	r1, r2, r3
 800ab26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab2c:	f7ff ff06 	bl	800a93c <prvInsertTimerInActiveList>
					break;
 800ab30:	e015      	b.n	800ab5e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800ab32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab38:	f003 0302 	and.w	r3, r3, #2
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d103      	bne.n	800ab48 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ab40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab42:	f000 fbdd 	bl	800b300 <vPortFree>
 800ab46:	e00a      	b.n	800ab5e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab4e:	f023 0301 	bic.w	r3, r3, #1
 800ab52:	b2da      	uxtb	r2, r3
 800ab54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ab5a:	e000      	b.n	800ab5e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ab5c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ab5e:	4b08      	ldr	r3, [pc, #32]	; (800ab80 <prvProcessReceivedCommands+0x1c0>)
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	1d39      	adds	r1, r7, #4
 800ab64:	2200      	movs	r2, #0
 800ab66:	4618      	mov	r0, r3
 800ab68:	f7fe fb6c 	bl	8009244 <xQueueReceive>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	f47f af2a 	bne.w	800a9c8 <prvProcessReceivedCommands+0x8>
	}
}
 800ab74:	bf00      	nop
 800ab76:	bf00      	nop
 800ab78:	3730      	adds	r7, #48	; 0x30
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}
 800ab7e:	bf00      	nop
 800ab80:	20000fe0 	.word	0x20000fe0

0800ab84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b088      	sub	sp, #32
 800ab88:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ab8a:	e048      	b.n	800ac1e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ab8c:	4b2d      	ldr	r3, [pc, #180]	; (800ac44 <prvSwitchTimerLists+0xc0>)
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	68db      	ldr	r3, [r3, #12]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab96:	4b2b      	ldr	r3, [pc, #172]	; (800ac44 <prvSwitchTimerLists+0xc0>)
 800ab98:	681b      	ldr	r3, [r3, #0]
 800ab9a:	68db      	ldr	r3, [r3, #12]
 800ab9c:	68db      	ldr	r3, [r3, #12]
 800ab9e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	3304      	adds	r3, #4
 800aba4:	4618      	mov	r0, r3
 800aba6:	f7fe f84b 	bl	8008c40 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	6a1b      	ldr	r3, [r3, #32]
 800abae:	68f8      	ldr	r0, [r7, #12]
 800abb0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800abb8:	f003 0304 	and.w	r3, r3, #4
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d02e      	beq.n	800ac1e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	699b      	ldr	r3, [r3, #24]
 800abc4:	693a      	ldr	r2, [r7, #16]
 800abc6:	4413      	add	r3, r2
 800abc8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800abca:	68ba      	ldr	r2, [r7, #8]
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	429a      	cmp	r2, r3
 800abd0:	d90e      	bls.n	800abf0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	68ba      	ldr	r2, [r7, #8]
 800abd6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	68fa      	ldr	r2, [r7, #12]
 800abdc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800abde:	4b19      	ldr	r3, [pc, #100]	; (800ac44 <prvSwitchTimerLists+0xc0>)
 800abe0:	681a      	ldr	r2, [r3, #0]
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	3304      	adds	r3, #4
 800abe6:	4619      	mov	r1, r3
 800abe8:	4610      	mov	r0, r2
 800abea:	f7fd fff0 	bl	8008bce <vListInsert>
 800abee:	e016      	b.n	800ac1e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800abf0:	2300      	movs	r3, #0
 800abf2:	9300      	str	r3, [sp, #0]
 800abf4:	2300      	movs	r3, #0
 800abf6:	693a      	ldr	r2, [r7, #16]
 800abf8:	2100      	movs	r1, #0
 800abfa:	68f8      	ldr	r0, [r7, #12]
 800abfc:	f7ff fd60 	bl	800a6c0 <xTimerGenericCommand>
 800ac00:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d10a      	bne.n	800ac1e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800ac08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac0c:	f383 8811 	msr	BASEPRI, r3
 800ac10:	f3bf 8f6f 	isb	sy
 800ac14:	f3bf 8f4f 	dsb	sy
 800ac18:	603b      	str	r3, [r7, #0]
}
 800ac1a:	bf00      	nop
 800ac1c:	e7fe      	b.n	800ac1c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ac1e:	4b09      	ldr	r3, [pc, #36]	; (800ac44 <prvSwitchTimerLists+0xc0>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d1b1      	bne.n	800ab8c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800ac28:	4b06      	ldr	r3, [pc, #24]	; (800ac44 <prvSwitchTimerLists+0xc0>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800ac2e:	4b06      	ldr	r3, [pc, #24]	; (800ac48 <prvSwitchTimerLists+0xc4>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	4a04      	ldr	r2, [pc, #16]	; (800ac44 <prvSwitchTimerLists+0xc0>)
 800ac34:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ac36:	4a04      	ldr	r2, [pc, #16]	; (800ac48 <prvSwitchTimerLists+0xc4>)
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	6013      	str	r3, [r2, #0]
}
 800ac3c:	bf00      	nop
 800ac3e:	3718      	adds	r7, #24
 800ac40:	46bd      	mov	sp, r7
 800ac42:	bd80      	pop	{r7, pc}
 800ac44:	20000fd8 	.word	0x20000fd8
 800ac48:	20000fdc 	.word	0x20000fdc

0800ac4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ac4c:	b580      	push	{r7, lr}
 800ac4e:	b082      	sub	sp, #8
 800ac50:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ac52:	f000 f967 	bl	800af24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ac56:	4b15      	ldr	r3, [pc, #84]	; (800acac <prvCheckForValidListAndQueue+0x60>)
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d120      	bne.n	800aca0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ac5e:	4814      	ldr	r0, [pc, #80]	; (800acb0 <prvCheckForValidListAndQueue+0x64>)
 800ac60:	f7fd ff64 	bl	8008b2c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ac64:	4813      	ldr	r0, [pc, #76]	; (800acb4 <prvCheckForValidListAndQueue+0x68>)
 800ac66:	f7fd ff61 	bl	8008b2c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ac6a:	4b13      	ldr	r3, [pc, #76]	; (800acb8 <prvCheckForValidListAndQueue+0x6c>)
 800ac6c:	4a10      	ldr	r2, [pc, #64]	; (800acb0 <prvCheckForValidListAndQueue+0x64>)
 800ac6e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ac70:	4b12      	ldr	r3, [pc, #72]	; (800acbc <prvCheckForValidListAndQueue+0x70>)
 800ac72:	4a10      	ldr	r2, [pc, #64]	; (800acb4 <prvCheckForValidListAndQueue+0x68>)
 800ac74:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ac76:	2300      	movs	r3, #0
 800ac78:	9300      	str	r3, [sp, #0]
 800ac7a:	4b11      	ldr	r3, [pc, #68]	; (800acc0 <prvCheckForValidListAndQueue+0x74>)
 800ac7c:	4a11      	ldr	r2, [pc, #68]	; (800acc4 <prvCheckForValidListAndQueue+0x78>)
 800ac7e:	2110      	movs	r1, #16
 800ac80:	200a      	movs	r0, #10
 800ac82:	f7fe f86f 	bl	8008d64 <xQueueGenericCreateStatic>
 800ac86:	4603      	mov	r3, r0
 800ac88:	4a08      	ldr	r2, [pc, #32]	; (800acac <prvCheckForValidListAndQueue+0x60>)
 800ac8a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ac8c:	4b07      	ldr	r3, [pc, #28]	; (800acac <prvCheckForValidListAndQueue+0x60>)
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d005      	beq.n	800aca0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ac94:	4b05      	ldr	r3, [pc, #20]	; (800acac <prvCheckForValidListAndQueue+0x60>)
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	490b      	ldr	r1, [pc, #44]	; (800acc8 <prvCheckForValidListAndQueue+0x7c>)
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f7fe fd42 	bl	8009724 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800aca0:	f000 f970 	bl	800af84 <vPortExitCritical>
}
 800aca4:	bf00      	nop
 800aca6:	46bd      	mov	sp, r7
 800aca8:	bd80      	pop	{r7, pc}
 800acaa:	bf00      	nop
 800acac:	20000fe0 	.word	0x20000fe0
 800acb0:	20000fb0 	.word	0x20000fb0
 800acb4:	20000fc4 	.word	0x20000fc4
 800acb8:	20000fd8 	.word	0x20000fd8
 800acbc:	20000fdc 	.word	0x20000fdc
 800acc0:	2000108c 	.word	0x2000108c
 800acc4:	20000fec 	.word	0x20000fec
 800acc8:	0800ff90 	.word	0x0800ff90

0800accc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800accc:	b480      	push	{r7}
 800acce:	b085      	sub	sp, #20
 800acd0:	af00      	add	r7, sp, #0
 800acd2:	60f8      	str	r0, [r7, #12]
 800acd4:	60b9      	str	r1, [r7, #8]
 800acd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	3b04      	subs	r3, #4
 800acdc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ace4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	3b04      	subs	r3, #4
 800acea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800acec:	68bb      	ldr	r3, [r7, #8]
 800acee:	f023 0201 	bic.w	r2, r3, #1
 800acf2:	68fb      	ldr	r3, [r7, #12]
 800acf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	3b04      	subs	r3, #4
 800acfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800acfc:	4a0c      	ldr	r2, [pc, #48]	; (800ad30 <pxPortInitialiseStack+0x64>)
 800acfe:	68fb      	ldr	r3, [r7, #12]
 800ad00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	3b14      	subs	r3, #20
 800ad06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ad08:	687a      	ldr	r2, [r7, #4]
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	3b04      	subs	r3, #4
 800ad12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f06f 0202 	mvn.w	r2, #2
 800ad1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ad1c:	68fb      	ldr	r3, [r7, #12]
 800ad1e:	3b20      	subs	r3, #32
 800ad20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ad22:	68fb      	ldr	r3, [r7, #12]
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3714      	adds	r7, #20
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad2e:	4770      	bx	lr
 800ad30:	0800ad35 	.word	0x0800ad35

0800ad34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ad34:	b480      	push	{r7}
 800ad36:	b085      	sub	sp, #20
 800ad38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ad3a:	2300      	movs	r3, #0
 800ad3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ad3e:	4b12      	ldr	r3, [pc, #72]	; (800ad88 <prvTaskExitError+0x54>)
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad46:	d00a      	beq.n	800ad5e <prvTaskExitError+0x2a>
	__asm volatile
 800ad48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad4c:	f383 8811 	msr	BASEPRI, r3
 800ad50:	f3bf 8f6f 	isb	sy
 800ad54:	f3bf 8f4f 	dsb	sy
 800ad58:	60fb      	str	r3, [r7, #12]
}
 800ad5a:	bf00      	nop
 800ad5c:	e7fe      	b.n	800ad5c <prvTaskExitError+0x28>
	__asm volatile
 800ad5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad62:	f383 8811 	msr	BASEPRI, r3
 800ad66:	f3bf 8f6f 	isb	sy
 800ad6a:	f3bf 8f4f 	dsb	sy
 800ad6e:	60bb      	str	r3, [r7, #8]
}
 800ad70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ad72:	bf00      	nop
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d0fc      	beq.n	800ad74 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ad7a:	bf00      	nop
 800ad7c:	bf00      	nop
 800ad7e:	3714      	adds	r7, #20
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr
 800ad88:	20000128 	.word	0x20000128
 800ad8c:	00000000 	.word	0x00000000

0800ad90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ad90:	4b07      	ldr	r3, [pc, #28]	; (800adb0 <pxCurrentTCBConst2>)
 800ad92:	6819      	ldr	r1, [r3, #0]
 800ad94:	6808      	ldr	r0, [r1, #0]
 800ad96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad9a:	f380 8809 	msr	PSP, r0
 800ad9e:	f3bf 8f6f 	isb	sy
 800ada2:	f04f 0000 	mov.w	r0, #0
 800ada6:	f380 8811 	msr	BASEPRI, r0
 800adaa:	4770      	bx	lr
 800adac:	f3af 8000 	nop.w

0800adb0 <pxCurrentTCBConst2>:
 800adb0:	20000ab0 	.word	0x20000ab0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800adb4:	bf00      	nop
 800adb6:	bf00      	nop

0800adb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800adb8:	4808      	ldr	r0, [pc, #32]	; (800addc <prvPortStartFirstTask+0x24>)
 800adba:	6800      	ldr	r0, [r0, #0]
 800adbc:	6800      	ldr	r0, [r0, #0]
 800adbe:	f380 8808 	msr	MSP, r0
 800adc2:	f04f 0000 	mov.w	r0, #0
 800adc6:	f380 8814 	msr	CONTROL, r0
 800adca:	b662      	cpsie	i
 800adcc:	b661      	cpsie	f
 800adce:	f3bf 8f4f 	dsb	sy
 800add2:	f3bf 8f6f 	isb	sy
 800add6:	df00      	svc	0
 800add8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800adda:	bf00      	nop
 800addc:	e000ed08 	.word	0xe000ed08

0800ade0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ade0:	b580      	push	{r7, lr}
 800ade2:	b086      	sub	sp, #24
 800ade4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800ade6:	4b46      	ldr	r3, [pc, #280]	; (800af00 <xPortStartScheduler+0x120>)
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	4a46      	ldr	r2, [pc, #280]	; (800af04 <xPortStartScheduler+0x124>)
 800adec:	4293      	cmp	r3, r2
 800adee:	d10a      	bne.n	800ae06 <xPortStartScheduler+0x26>
	__asm volatile
 800adf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adf4:	f383 8811 	msr	BASEPRI, r3
 800adf8:	f3bf 8f6f 	isb	sy
 800adfc:	f3bf 8f4f 	dsb	sy
 800ae00:	613b      	str	r3, [r7, #16]
}
 800ae02:	bf00      	nop
 800ae04:	e7fe      	b.n	800ae04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800ae06:	4b3e      	ldr	r3, [pc, #248]	; (800af00 <xPortStartScheduler+0x120>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	4a3f      	ldr	r2, [pc, #252]	; (800af08 <xPortStartScheduler+0x128>)
 800ae0c:	4293      	cmp	r3, r2
 800ae0e:	d10a      	bne.n	800ae26 <xPortStartScheduler+0x46>
	__asm volatile
 800ae10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae14:	f383 8811 	msr	BASEPRI, r3
 800ae18:	f3bf 8f6f 	isb	sy
 800ae1c:	f3bf 8f4f 	dsb	sy
 800ae20:	60fb      	str	r3, [r7, #12]
}
 800ae22:	bf00      	nop
 800ae24:	e7fe      	b.n	800ae24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ae26:	4b39      	ldr	r3, [pc, #228]	; (800af0c <xPortStartScheduler+0x12c>)
 800ae28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ae2a:	697b      	ldr	r3, [r7, #20]
 800ae2c:	781b      	ldrb	r3, [r3, #0]
 800ae2e:	b2db      	uxtb	r3, r3
 800ae30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ae32:	697b      	ldr	r3, [r7, #20]
 800ae34:	22ff      	movs	r2, #255	; 0xff
 800ae36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	781b      	ldrb	r3, [r3, #0]
 800ae3c:	b2db      	uxtb	r3, r3
 800ae3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ae40:	78fb      	ldrb	r3, [r7, #3]
 800ae42:	b2db      	uxtb	r3, r3
 800ae44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ae48:	b2da      	uxtb	r2, r3
 800ae4a:	4b31      	ldr	r3, [pc, #196]	; (800af10 <xPortStartScheduler+0x130>)
 800ae4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ae4e:	4b31      	ldr	r3, [pc, #196]	; (800af14 <xPortStartScheduler+0x134>)
 800ae50:	2207      	movs	r2, #7
 800ae52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae54:	e009      	b.n	800ae6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ae56:	4b2f      	ldr	r3, [pc, #188]	; (800af14 <xPortStartScheduler+0x134>)
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	3b01      	subs	r3, #1
 800ae5c:	4a2d      	ldr	r2, [pc, #180]	; (800af14 <xPortStartScheduler+0x134>)
 800ae5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ae60:	78fb      	ldrb	r3, [r7, #3]
 800ae62:	b2db      	uxtb	r3, r3
 800ae64:	005b      	lsls	r3, r3, #1
 800ae66:	b2db      	uxtb	r3, r3
 800ae68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae6a:	78fb      	ldrb	r3, [r7, #3]
 800ae6c:	b2db      	uxtb	r3, r3
 800ae6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae72:	2b80      	cmp	r3, #128	; 0x80
 800ae74:	d0ef      	beq.n	800ae56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ae76:	4b27      	ldr	r3, [pc, #156]	; (800af14 <xPortStartScheduler+0x134>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f1c3 0307 	rsb	r3, r3, #7
 800ae7e:	2b04      	cmp	r3, #4
 800ae80:	d00a      	beq.n	800ae98 <xPortStartScheduler+0xb8>
	__asm volatile
 800ae82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae86:	f383 8811 	msr	BASEPRI, r3
 800ae8a:	f3bf 8f6f 	isb	sy
 800ae8e:	f3bf 8f4f 	dsb	sy
 800ae92:	60bb      	str	r3, [r7, #8]
}
 800ae94:	bf00      	nop
 800ae96:	e7fe      	b.n	800ae96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ae98:	4b1e      	ldr	r3, [pc, #120]	; (800af14 <xPortStartScheduler+0x134>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	021b      	lsls	r3, r3, #8
 800ae9e:	4a1d      	ldr	r2, [pc, #116]	; (800af14 <xPortStartScheduler+0x134>)
 800aea0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800aea2:	4b1c      	ldr	r3, [pc, #112]	; (800af14 <xPortStartScheduler+0x134>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aeaa:	4a1a      	ldr	r2, [pc, #104]	; (800af14 <xPortStartScheduler+0x134>)
 800aeac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	b2da      	uxtb	r2, r3
 800aeb2:	697b      	ldr	r3, [r7, #20]
 800aeb4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800aeb6:	4b18      	ldr	r3, [pc, #96]	; (800af18 <xPortStartScheduler+0x138>)
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	4a17      	ldr	r2, [pc, #92]	; (800af18 <xPortStartScheduler+0x138>)
 800aebc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aec0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800aec2:	4b15      	ldr	r3, [pc, #84]	; (800af18 <xPortStartScheduler+0x138>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	4a14      	ldr	r2, [pc, #80]	; (800af18 <xPortStartScheduler+0x138>)
 800aec8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800aecc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800aece:	f000 f8dd 	bl	800b08c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aed2:	4b12      	ldr	r3, [pc, #72]	; (800af1c <xPortStartScheduler+0x13c>)
 800aed4:	2200      	movs	r2, #0
 800aed6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aed8:	f000 f8fc 	bl	800b0d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aedc:	4b10      	ldr	r3, [pc, #64]	; (800af20 <xPortStartScheduler+0x140>)
 800aede:	681b      	ldr	r3, [r3, #0]
 800aee0:	4a0f      	ldr	r2, [pc, #60]	; (800af20 <xPortStartScheduler+0x140>)
 800aee2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800aee6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aee8:	f7ff ff66 	bl	800adb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aeec:	f7ff f84a 	bl	8009f84 <vTaskSwitchContext>
	prvTaskExitError();
 800aef0:	f7ff ff20 	bl	800ad34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aef4:	2300      	movs	r3, #0
}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3718      	adds	r7, #24
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	bf00      	nop
 800af00:	e000ed00 	.word	0xe000ed00
 800af04:	410fc271 	.word	0x410fc271
 800af08:	410fc270 	.word	0x410fc270
 800af0c:	e000e400 	.word	0xe000e400
 800af10:	200010dc 	.word	0x200010dc
 800af14:	200010e0 	.word	0x200010e0
 800af18:	e000ed20 	.word	0xe000ed20
 800af1c:	20000128 	.word	0x20000128
 800af20:	e000ef34 	.word	0xe000ef34

0800af24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800af24:	b480      	push	{r7}
 800af26:	b083      	sub	sp, #12
 800af28:	af00      	add	r7, sp, #0
	__asm volatile
 800af2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af2e:	f383 8811 	msr	BASEPRI, r3
 800af32:	f3bf 8f6f 	isb	sy
 800af36:	f3bf 8f4f 	dsb	sy
 800af3a:	607b      	str	r3, [r7, #4]
}
 800af3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800af3e:	4b0f      	ldr	r3, [pc, #60]	; (800af7c <vPortEnterCritical+0x58>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	3301      	adds	r3, #1
 800af44:	4a0d      	ldr	r2, [pc, #52]	; (800af7c <vPortEnterCritical+0x58>)
 800af46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800af48:	4b0c      	ldr	r3, [pc, #48]	; (800af7c <vPortEnterCritical+0x58>)
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	2b01      	cmp	r3, #1
 800af4e:	d10f      	bne.n	800af70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800af50:	4b0b      	ldr	r3, [pc, #44]	; (800af80 <vPortEnterCritical+0x5c>)
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	b2db      	uxtb	r3, r3
 800af56:	2b00      	cmp	r3, #0
 800af58:	d00a      	beq.n	800af70 <vPortEnterCritical+0x4c>
	__asm volatile
 800af5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af5e:	f383 8811 	msr	BASEPRI, r3
 800af62:	f3bf 8f6f 	isb	sy
 800af66:	f3bf 8f4f 	dsb	sy
 800af6a:	603b      	str	r3, [r7, #0]
}
 800af6c:	bf00      	nop
 800af6e:	e7fe      	b.n	800af6e <vPortEnterCritical+0x4a>
	}
}
 800af70:	bf00      	nop
 800af72:	370c      	adds	r7, #12
 800af74:	46bd      	mov	sp, r7
 800af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7a:	4770      	bx	lr
 800af7c:	20000128 	.word	0x20000128
 800af80:	e000ed04 	.word	0xe000ed04

0800af84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800af84:	b480      	push	{r7}
 800af86:	b083      	sub	sp, #12
 800af88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800af8a:	4b12      	ldr	r3, [pc, #72]	; (800afd4 <vPortExitCritical+0x50>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d10a      	bne.n	800afa8 <vPortExitCritical+0x24>
	__asm volatile
 800af92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af96:	f383 8811 	msr	BASEPRI, r3
 800af9a:	f3bf 8f6f 	isb	sy
 800af9e:	f3bf 8f4f 	dsb	sy
 800afa2:	607b      	str	r3, [r7, #4]
}
 800afa4:	bf00      	nop
 800afa6:	e7fe      	b.n	800afa6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800afa8:	4b0a      	ldr	r3, [pc, #40]	; (800afd4 <vPortExitCritical+0x50>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	3b01      	subs	r3, #1
 800afae:	4a09      	ldr	r2, [pc, #36]	; (800afd4 <vPortExitCritical+0x50>)
 800afb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800afb2:	4b08      	ldr	r3, [pc, #32]	; (800afd4 <vPortExitCritical+0x50>)
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	2b00      	cmp	r3, #0
 800afb8:	d105      	bne.n	800afc6 <vPortExitCritical+0x42>
 800afba:	2300      	movs	r3, #0
 800afbc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800afbe:	683b      	ldr	r3, [r7, #0]
 800afc0:	f383 8811 	msr	BASEPRI, r3
}
 800afc4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800afc6:	bf00      	nop
 800afc8:	370c      	adds	r7, #12
 800afca:	46bd      	mov	sp, r7
 800afcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd0:	4770      	bx	lr
 800afd2:	bf00      	nop
 800afd4:	20000128 	.word	0x20000128
	...

0800afe0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800afe0:	f3ef 8009 	mrs	r0, PSP
 800afe4:	f3bf 8f6f 	isb	sy
 800afe8:	4b15      	ldr	r3, [pc, #84]	; (800b040 <pxCurrentTCBConst>)
 800afea:	681a      	ldr	r2, [r3, #0]
 800afec:	f01e 0f10 	tst.w	lr, #16
 800aff0:	bf08      	it	eq
 800aff2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800aff6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800affa:	6010      	str	r0, [r2, #0]
 800affc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800b000:	f04f 0050 	mov.w	r0, #80	; 0x50
 800b004:	f380 8811 	msr	BASEPRI, r0
 800b008:	f3bf 8f4f 	dsb	sy
 800b00c:	f3bf 8f6f 	isb	sy
 800b010:	f7fe ffb8 	bl	8009f84 <vTaskSwitchContext>
 800b014:	f04f 0000 	mov.w	r0, #0
 800b018:	f380 8811 	msr	BASEPRI, r0
 800b01c:	bc09      	pop	{r0, r3}
 800b01e:	6819      	ldr	r1, [r3, #0]
 800b020:	6808      	ldr	r0, [r1, #0]
 800b022:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b026:	f01e 0f10 	tst.w	lr, #16
 800b02a:	bf08      	it	eq
 800b02c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b030:	f380 8809 	msr	PSP, r0
 800b034:	f3bf 8f6f 	isb	sy
 800b038:	4770      	bx	lr
 800b03a:	bf00      	nop
 800b03c:	f3af 8000 	nop.w

0800b040 <pxCurrentTCBConst>:
 800b040:	20000ab0 	.word	0x20000ab0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b044:	bf00      	nop
 800b046:	bf00      	nop

0800b048 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b082      	sub	sp, #8
 800b04c:	af00      	add	r7, sp, #0
	__asm volatile
 800b04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b052:	f383 8811 	msr	BASEPRI, r3
 800b056:	f3bf 8f6f 	isb	sy
 800b05a:	f3bf 8f4f 	dsb	sy
 800b05e:	607b      	str	r3, [r7, #4]
}
 800b060:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b062:	f7fe fed5 	bl	8009e10 <xTaskIncrementTick>
 800b066:	4603      	mov	r3, r0
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d003      	beq.n	800b074 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b06c:	4b06      	ldr	r3, [pc, #24]	; (800b088 <xPortSysTickHandler+0x40>)
 800b06e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b072:	601a      	str	r2, [r3, #0]
 800b074:	2300      	movs	r3, #0
 800b076:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b078:	683b      	ldr	r3, [r7, #0]
 800b07a:	f383 8811 	msr	BASEPRI, r3
}
 800b07e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b080:	bf00      	nop
 800b082:	3708      	adds	r7, #8
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}
 800b088:	e000ed04 	.word	0xe000ed04

0800b08c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b08c:	b480      	push	{r7}
 800b08e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b090:	4b0b      	ldr	r3, [pc, #44]	; (800b0c0 <vPortSetupTimerInterrupt+0x34>)
 800b092:	2200      	movs	r2, #0
 800b094:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b096:	4b0b      	ldr	r3, [pc, #44]	; (800b0c4 <vPortSetupTimerInterrupt+0x38>)
 800b098:	2200      	movs	r2, #0
 800b09a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b09c:	4b0a      	ldr	r3, [pc, #40]	; (800b0c8 <vPortSetupTimerInterrupt+0x3c>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	4a0a      	ldr	r2, [pc, #40]	; (800b0cc <vPortSetupTimerInterrupt+0x40>)
 800b0a2:	fba2 2303 	umull	r2, r3, r2, r3
 800b0a6:	099b      	lsrs	r3, r3, #6
 800b0a8:	4a09      	ldr	r2, [pc, #36]	; (800b0d0 <vPortSetupTimerInterrupt+0x44>)
 800b0aa:	3b01      	subs	r3, #1
 800b0ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b0ae:	4b04      	ldr	r3, [pc, #16]	; (800b0c0 <vPortSetupTimerInterrupt+0x34>)
 800b0b0:	2207      	movs	r2, #7
 800b0b2:	601a      	str	r2, [r3, #0]
}
 800b0b4:	bf00      	nop
 800b0b6:	46bd      	mov	sp, r7
 800b0b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0bc:	4770      	bx	lr
 800b0be:	bf00      	nop
 800b0c0:	e000e010 	.word	0xe000e010
 800b0c4:	e000e018 	.word	0xe000e018
 800b0c8:	2000011c 	.word	0x2000011c
 800b0cc:	10624dd3 	.word	0x10624dd3
 800b0d0:	e000e014 	.word	0xe000e014

0800b0d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b0d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b0e4 <vPortEnableVFP+0x10>
 800b0d8:	6801      	ldr	r1, [r0, #0]
 800b0da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b0de:	6001      	str	r1, [r0, #0]
 800b0e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b0e2:	bf00      	nop
 800b0e4:	e000ed88 	.word	0xe000ed88

0800b0e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b085      	sub	sp, #20
 800b0ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b0ee:	f3ef 8305 	mrs	r3, IPSR
 800b0f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	2b0f      	cmp	r3, #15
 800b0f8:	d914      	bls.n	800b124 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b0fa:	4a17      	ldr	r2, [pc, #92]	; (800b158 <vPortValidateInterruptPriority+0x70>)
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	4413      	add	r3, r2
 800b100:	781b      	ldrb	r3, [r3, #0]
 800b102:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b104:	4b15      	ldr	r3, [pc, #84]	; (800b15c <vPortValidateInterruptPriority+0x74>)
 800b106:	781b      	ldrb	r3, [r3, #0]
 800b108:	7afa      	ldrb	r2, [r7, #11]
 800b10a:	429a      	cmp	r2, r3
 800b10c:	d20a      	bcs.n	800b124 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b112:	f383 8811 	msr	BASEPRI, r3
 800b116:	f3bf 8f6f 	isb	sy
 800b11a:	f3bf 8f4f 	dsb	sy
 800b11e:	607b      	str	r3, [r7, #4]
}
 800b120:	bf00      	nop
 800b122:	e7fe      	b.n	800b122 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b124:	4b0e      	ldr	r3, [pc, #56]	; (800b160 <vPortValidateInterruptPriority+0x78>)
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b12c:	4b0d      	ldr	r3, [pc, #52]	; (800b164 <vPortValidateInterruptPriority+0x7c>)
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	429a      	cmp	r2, r3
 800b132:	d90a      	bls.n	800b14a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b138:	f383 8811 	msr	BASEPRI, r3
 800b13c:	f3bf 8f6f 	isb	sy
 800b140:	f3bf 8f4f 	dsb	sy
 800b144:	603b      	str	r3, [r7, #0]
}
 800b146:	bf00      	nop
 800b148:	e7fe      	b.n	800b148 <vPortValidateInterruptPriority+0x60>
	}
 800b14a:	bf00      	nop
 800b14c:	3714      	adds	r7, #20
 800b14e:	46bd      	mov	sp, r7
 800b150:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b154:	4770      	bx	lr
 800b156:	bf00      	nop
 800b158:	e000e3f0 	.word	0xe000e3f0
 800b15c:	200010dc 	.word	0x200010dc
 800b160:	e000ed0c 	.word	0xe000ed0c
 800b164:	200010e0 	.word	0x200010e0

0800b168 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b168:	b580      	push	{r7, lr}
 800b16a:	b08a      	sub	sp, #40	; 0x28
 800b16c:	af00      	add	r7, sp, #0
 800b16e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b170:	2300      	movs	r3, #0
 800b172:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b174:	f7fe fd90 	bl	8009c98 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b178:	4b5b      	ldr	r3, [pc, #364]	; (800b2e8 <pvPortMalloc+0x180>)
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d101      	bne.n	800b184 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b180:	f000 f920 	bl	800b3c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b184:	4b59      	ldr	r3, [pc, #356]	; (800b2ec <pvPortMalloc+0x184>)
 800b186:	681a      	ldr	r2, [r3, #0]
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	4013      	ands	r3, r2
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	f040 8093 	bne.w	800b2b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d01d      	beq.n	800b1d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b198:	2208      	movs	r2, #8
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	4413      	add	r3, r2
 800b19e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	f003 0307 	and.w	r3, r3, #7
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d014      	beq.n	800b1d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f023 0307 	bic.w	r3, r3, #7
 800b1b0:	3308      	adds	r3, #8
 800b1b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f003 0307 	and.w	r3, r3, #7
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d00a      	beq.n	800b1d4 <pvPortMalloc+0x6c>
	__asm volatile
 800b1be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1c2:	f383 8811 	msr	BASEPRI, r3
 800b1c6:	f3bf 8f6f 	isb	sy
 800b1ca:	f3bf 8f4f 	dsb	sy
 800b1ce:	617b      	str	r3, [r7, #20]
}
 800b1d0:	bf00      	nop
 800b1d2:	e7fe      	b.n	800b1d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	2b00      	cmp	r3, #0
 800b1d8:	d06e      	beq.n	800b2b8 <pvPortMalloc+0x150>
 800b1da:	4b45      	ldr	r3, [pc, #276]	; (800b2f0 <pvPortMalloc+0x188>)
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	687a      	ldr	r2, [r7, #4]
 800b1e0:	429a      	cmp	r2, r3
 800b1e2:	d869      	bhi.n	800b2b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b1e4:	4b43      	ldr	r3, [pc, #268]	; (800b2f4 <pvPortMalloc+0x18c>)
 800b1e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b1e8:	4b42      	ldr	r3, [pc, #264]	; (800b2f4 <pvPortMalloc+0x18c>)
 800b1ea:	681b      	ldr	r3, [r3, #0]
 800b1ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b1ee:	e004      	b.n	800b1fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f6:	681b      	ldr	r3, [r3, #0]
 800b1f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1fc:	685b      	ldr	r3, [r3, #4]
 800b1fe:	687a      	ldr	r2, [r7, #4]
 800b200:	429a      	cmp	r2, r3
 800b202:	d903      	bls.n	800b20c <pvPortMalloc+0xa4>
 800b204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d1f1      	bne.n	800b1f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b20c:	4b36      	ldr	r3, [pc, #216]	; (800b2e8 <pvPortMalloc+0x180>)
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b212:	429a      	cmp	r2, r3
 800b214:	d050      	beq.n	800b2b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b216:	6a3b      	ldr	r3, [r7, #32]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	2208      	movs	r2, #8
 800b21c:	4413      	add	r3, r2
 800b21e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b222:	681a      	ldr	r2, [r3, #0]
 800b224:	6a3b      	ldr	r3, [r7, #32]
 800b226:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b22a:	685a      	ldr	r2, [r3, #4]
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	1ad2      	subs	r2, r2, r3
 800b230:	2308      	movs	r3, #8
 800b232:	005b      	lsls	r3, r3, #1
 800b234:	429a      	cmp	r2, r3
 800b236:	d91f      	bls.n	800b278 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b238:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	4413      	add	r3, r2
 800b23e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b240:	69bb      	ldr	r3, [r7, #24]
 800b242:	f003 0307 	and.w	r3, r3, #7
 800b246:	2b00      	cmp	r3, #0
 800b248:	d00a      	beq.n	800b260 <pvPortMalloc+0xf8>
	__asm volatile
 800b24a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b24e:	f383 8811 	msr	BASEPRI, r3
 800b252:	f3bf 8f6f 	isb	sy
 800b256:	f3bf 8f4f 	dsb	sy
 800b25a:	613b      	str	r3, [r7, #16]
}
 800b25c:	bf00      	nop
 800b25e:	e7fe      	b.n	800b25e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b260:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b262:	685a      	ldr	r2, [r3, #4]
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	1ad2      	subs	r2, r2, r3
 800b268:	69bb      	ldr	r3, [r7, #24]
 800b26a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b26c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b26e:	687a      	ldr	r2, [r7, #4]
 800b270:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b272:	69b8      	ldr	r0, [r7, #24]
 800b274:	f000 f908 	bl	800b488 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b278:	4b1d      	ldr	r3, [pc, #116]	; (800b2f0 <pvPortMalloc+0x188>)
 800b27a:	681a      	ldr	r2, [r3, #0]
 800b27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b27e:	685b      	ldr	r3, [r3, #4]
 800b280:	1ad3      	subs	r3, r2, r3
 800b282:	4a1b      	ldr	r2, [pc, #108]	; (800b2f0 <pvPortMalloc+0x188>)
 800b284:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b286:	4b1a      	ldr	r3, [pc, #104]	; (800b2f0 <pvPortMalloc+0x188>)
 800b288:	681a      	ldr	r2, [r3, #0]
 800b28a:	4b1b      	ldr	r3, [pc, #108]	; (800b2f8 <pvPortMalloc+0x190>)
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	429a      	cmp	r2, r3
 800b290:	d203      	bcs.n	800b29a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b292:	4b17      	ldr	r3, [pc, #92]	; (800b2f0 <pvPortMalloc+0x188>)
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	4a18      	ldr	r2, [pc, #96]	; (800b2f8 <pvPortMalloc+0x190>)
 800b298:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b29c:	685a      	ldr	r2, [r3, #4]
 800b29e:	4b13      	ldr	r3, [pc, #76]	; (800b2ec <pvPortMalloc+0x184>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	431a      	orrs	r2, r3
 800b2a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b2ae:	4b13      	ldr	r3, [pc, #76]	; (800b2fc <pvPortMalloc+0x194>)
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	3301      	adds	r3, #1
 800b2b4:	4a11      	ldr	r2, [pc, #68]	; (800b2fc <pvPortMalloc+0x194>)
 800b2b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b2b8:	f7fe fcfc 	bl	8009cb4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b2bc:	69fb      	ldr	r3, [r7, #28]
 800b2be:	f003 0307 	and.w	r3, r3, #7
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d00a      	beq.n	800b2dc <pvPortMalloc+0x174>
	__asm volatile
 800b2c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ca:	f383 8811 	msr	BASEPRI, r3
 800b2ce:	f3bf 8f6f 	isb	sy
 800b2d2:	f3bf 8f4f 	dsb	sy
 800b2d6:	60fb      	str	r3, [r7, #12]
}
 800b2d8:	bf00      	nop
 800b2da:	e7fe      	b.n	800b2da <pvPortMalloc+0x172>
	return pvReturn;
 800b2dc:	69fb      	ldr	r3, [r7, #28]
}
 800b2de:	4618      	mov	r0, r3
 800b2e0:	3728      	adds	r7, #40	; 0x28
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}
 800b2e6:	bf00      	nop
 800b2e8:	2000285c 	.word	0x2000285c
 800b2ec:	20002870 	.word	0x20002870
 800b2f0:	20002860 	.word	0x20002860
 800b2f4:	20002854 	.word	0x20002854
 800b2f8:	20002864 	.word	0x20002864
 800b2fc:	20002868 	.word	0x20002868

0800b300 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b086      	sub	sp, #24
 800b304:	af00      	add	r7, sp, #0
 800b306:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	2b00      	cmp	r3, #0
 800b310:	d04d      	beq.n	800b3ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b312:	2308      	movs	r3, #8
 800b314:	425b      	negs	r3, r3
 800b316:	697a      	ldr	r2, [r7, #20]
 800b318:	4413      	add	r3, r2
 800b31a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b31c:	697b      	ldr	r3, [r7, #20]
 800b31e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b320:	693b      	ldr	r3, [r7, #16]
 800b322:	685a      	ldr	r2, [r3, #4]
 800b324:	4b24      	ldr	r3, [pc, #144]	; (800b3b8 <vPortFree+0xb8>)
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	4013      	ands	r3, r2
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d10a      	bne.n	800b344 <vPortFree+0x44>
	__asm volatile
 800b32e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b332:	f383 8811 	msr	BASEPRI, r3
 800b336:	f3bf 8f6f 	isb	sy
 800b33a:	f3bf 8f4f 	dsb	sy
 800b33e:	60fb      	str	r3, [r7, #12]
}
 800b340:	bf00      	nop
 800b342:	e7fe      	b.n	800b342 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d00a      	beq.n	800b362 <vPortFree+0x62>
	__asm volatile
 800b34c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b350:	f383 8811 	msr	BASEPRI, r3
 800b354:	f3bf 8f6f 	isb	sy
 800b358:	f3bf 8f4f 	dsb	sy
 800b35c:	60bb      	str	r3, [r7, #8]
}
 800b35e:	bf00      	nop
 800b360:	e7fe      	b.n	800b360 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b362:	693b      	ldr	r3, [r7, #16]
 800b364:	685a      	ldr	r2, [r3, #4]
 800b366:	4b14      	ldr	r3, [pc, #80]	; (800b3b8 <vPortFree+0xb8>)
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	4013      	ands	r3, r2
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d01e      	beq.n	800b3ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b370:	693b      	ldr	r3, [r7, #16]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d11a      	bne.n	800b3ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b378:	693b      	ldr	r3, [r7, #16]
 800b37a:	685a      	ldr	r2, [r3, #4]
 800b37c:	4b0e      	ldr	r3, [pc, #56]	; (800b3b8 <vPortFree+0xb8>)
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	43db      	mvns	r3, r3
 800b382:	401a      	ands	r2, r3
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b388:	f7fe fc86 	bl	8009c98 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b38c:	693b      	ldr	r3, [r7, #16]
 800b38e:	685a      	ldr	r2, [r3, #4]
 800b390:	4b0a      	ldr	r3, [pc, #40]	; (800b3bc <vPortFree+0xbc>)
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	4413      	add	r3, r2
 800b396:	4a09      	ldr	r2, [pc, #36]	; (800b3bc <vPortFree+0xbc>)
 800b398:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b39a:	6938      	ldr	r0, [r7, #16]
 800b39c:	f000 f874 	bl	800b488 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b3a0:	4b07      	ldr	r3, [pc, #28]	; (800b3c0 <vPortFree+0xc0>)
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	3301      	adds	r3, #1
 800b3a6:	4a06      	ldr	r2, [pc, #24]	; (800b3c0 <vPortFree+0xc0>)
 800b3a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b3aa:	f7fe fc83 	bl	8009cb4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b3ae:	bf00      	nop
 800b3b0:	3718      	adds	r7, #24
 800b3b2:	46bd      	mov	sp, r7
 800b3b4:	bd80      	pop	{r7, pc}
 800b3b6:	bf00      	nop
 800b3b8:	20002870 	.word	0x20002870
 800b3bc:	20002860 	.word	0x20002860
 800b3c0:	2000286c 	.word	0x2000286c

0800b3c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b3c4:	b480      	push	{r7}
 800b3c6:	b085      	sub	sp, #20
 800b3c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b3ca:	f241 7370 	movw	r3, #6000	; 0x1770
 800b3ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b3d0:	4b27      	ldr	r3, [pc, #156]	; (800b470 <prvHeapInit+0xac>)
 800b3d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	f003 0307 	and.w	r3, r3, #7
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d00c      	beq.n	800b3f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b3de:	68fb      	ldr	r3, [r7, #12]
 800b3e0:	3307      	adds	r3, #7
 800b3e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	f023 0307 	bic.w	r3, r3, #7
 800b3ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b3ec:	68ba      	ldr	r2, [r7, #8]
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	1ad3      	subs	r3, r2, r3
 800b3f2:	4a1f      	ldr	r2, [pc, #124]	; (800b470 <prvHeapInit+0xac>)
 800b3f4:	4413      	add	r3, r2
 800b3f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b3f8:	68fb      	ldr	r3, [r7, #12]
 800b3fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b3fc:	4a1d      	ldr	r2, [pc, #116]	; (800b474 <prvHeapInit+0xb0>)
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b402:	4b1c      	ldr	r3, [pc, #112]	; (800b474 <prvHeapInit+0xb0>)
 800b404:	2200      	movs	r2, #0
 800b406:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	68ba      	ldr	r2, [r7, #8]
 800b40c:	4413      	add	r3, r2
 800b40e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b410:	2208      	movs	r2, #8
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	1a9b      	subs	r3, r3, r2
 800b416:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	f023 0307 	bic.w	r3, r3, #7
 800b41e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	4a15      	ldr	r2, [pc, #84]	; (800b478 <prvHeapInit+0xb4>)
 800b424:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b426:	4b14      	ldr	r3, [pc, #80]	; (800b478 <prvHeapInit+0xb4>)
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	2200      	movs	r2, #0
 800b42c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b42e:	4b12      	ldr	r3, [pc, #72]	; (800b478 <prvHeapInit+0xb4>)
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	2200      	movs	r2, #0
 800b434:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	68fa      	ldr	r2, [r7, #12]
 800b43e:	1ad2      	subs	r2, r2, r3
 800b440:	683b      	ldr	r3, [r7, #0]
 800b442:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b444:	4b0c      	ldr	r3, [pc, #48]	; (800b478 <prvHeapInit+0xb4>)
 800b446:	681a      	ldr	r2, [r3, #0]
 800b448:	683b      	ldr	r3, [r7, #0]
 800b44a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b44c:	683b      	ldr	r3, [r7, #0]
 800b44e:	685b      	ldr	r3, [r3, #4]
 800b450:	4a0a      	ldr	r2, [pc, #40]	; (800b47c <prvHeapInit+0xb8>)
 800b452:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b454:	683b      	ldr	r3, [r7, #0]
 800b456:	685b      	ldr	r3, [r3, #4]
 800b458:	4a09      	ldr	r2, [pc, #36]	; (800b480 <prvHeapInit+0xbc>)
 800b45a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b45c:	4b09      	ldr	r3, [pc, #36]	; (800b484 <prvHeapInit+0xc0>)
 800b45e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b462:	601a      	str	r2, [r3, #0]
}
 800b464:	bf00      	nop
 800b466:	3714      	adds	r7, #20
 800b468:	46bd      	mov	sp, r7
 800b46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46e:	4770      	bx	lr
 800b470:	200010e4 	.word	0x200010e4
 800b474:	20002854 	.word	0x20002854
 800b478:	2000285c 	.word	0x2000285c
 800b47c:	20002864 	.word	0x20002864
 800b480:	20002860 	.word	0x20002860
 800b484:	20002870 	.word	0x20002870

0800b488 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b488:	b480      	push	{r7}
 800b48a:	b085      	sub	sp, #20
 800b48c:	af00      	add	r7, sp, #0
 800b48e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b490:	4b28      	ldr	r3, [pc, #160]	; (800b534 <prvInsertBlockIntoFreeList+0xac>)
 800b492:	60fb      	str	r3, [r7, #12]
 800b494:	e002      	b.n	800b49c <prvInsertBlockIntoFreeList+0x14>
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	60fb      	str	r3, [r7, #12]
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	687a      	ldr	r2, [r7, #4]
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d8f7      	bhi.n	800b496 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	685b      	ldr	r3, [r3, #4]
 800b4ae:	68ba      	ldr	r2, [r7, #8]
 800b4b0:	4413      	add	r3, r2
 800b4b2:	687a      	ldr	r2, [r7, #4]
 800b4b4:	429a      	cmp	r2, r3
 800b4b6:	d108      	bne.n	800b4ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	685a      	ldr	r2, [r3, #4]
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	685b      	ldr	r3, [r3, #4]
 800b4c0:	441a      	add	r2, r3
 800b4c2:	68fb      	ldr	r3, [r7, #12]
 800b4c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	685b      	ldr	r3, [r3, #4]
 800b4d2:	68ba      	ldr	r2, [r7, #8]
 800b4d4:	441a      	add	r2, r3
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	429a      	cmp	r2, r3
 800b4dc:	d118      	bne.n	800b510 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	681a      	ldr	r2, [r3, #0]
 800b4e2:	4b15      	ldr	r3, [pc, #84]	; (800b538 <prvInsertBlockIntoFreeList+0xb0>)
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	429a      	cmp	r2, r3
 800b4e8:	d00d      	beq.n	800b506 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	685a      	ldr	r2, [r3, #4]
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	685b      	ldr	r3, [r3, #4]
 800b4f4:	441a      	add	r2, r3
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	681a      	ldr	r2, [r3, #0]
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	601a      	str	r2, [r3, #0]
 800b504:	e008      	b.n	800b518 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b506:	4b0c      	ldr	r3, [pc, #48]	; (800b538 <prvInsertBlockIntoFreeList+0xb0>)
 800b508:	681a      	ldr	r2, [r3, #0]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	601a      	str	r2, [r3, #0]
 800b50e:	e003      	b.n	800b518 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	681a      	ldr	r2, [r3, #0]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b518:	68fa      	ldr	r2, [r7, #12]
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	429a      	cmp	r2, r3
 800b51e:	d002      	beq.n	800b526 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	687a      	ldr	r2, [r7, #4]
 800b524:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b526:	bf00      	nop
 800b528:	3714      	adds	r7, #20
 800b52a:	46bd      	mov	sp, r7
 800b52c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b530:	4770      	bx	lr
 800b532:	bf00      	nop
 800b534:	20002854 	.word	0x20002854
 800b538:	2000285c 	.word	0x2000285c

0800b53c <__errno>:
 800b53c:	4b01      	ldr	r3, [pc, #4]	; (800b544 <__errno+0x8>)
 800b53e:	6818      	ldr	r0, [r3, #0]
 800b540:	4770      	bx	lr
 800b542:	bf00      	nop
 800b544:	2000012c 	.word	0x2000012c

0800b548 <std>:
 800b548:	2300      	movs	r3, #0
 800b54a:	b510      	push	{r4, lr}
 800b54c:	4604      	mov	r4, r0
 800b54e:	e9c0 3300 	strd	r3, r3, [r0]
 800b552:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b556:	6083      	str	r3, [r0, #8]
 800b558:	8181      	strh	r1, [r0, #12]
 800b55a:	6643      	str	r3, [r0, #100]	; 0x64
 800b55c:	81c2      	strh	r2, [r0, #14]
 800b55e:	6183      	str	r3, [r0, #24]
 800b560:	4619      	mov	r1, r3
 800b562:	2208      	movs	r2, #8
 800b564:	305c      	adds	r0, #92	; 0x5c
 800b566:	f000 f91a 	bl	800b79e <memset>
 800b56a:	4b05      	ldr	r3, [pc, #20]	; (800b580 <std+0x38>)
 800b56c:	6263      	str	r3, [r4, #36]	; 0x24
 800b56e:	4b05      	ldr	r3, [pc, #20]	; (800b584 <std+0x3c>)
 800b570:	62a3      	str	r3, [r4, #40]	; 0x28
 800b572:	4b05      	ldr	r3, [pc, #20]	; (800b588 <std+0x40>)
 800b574:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b576:	4b05      	ldr	r3, [pc, #20]	; (800b58c <std+0x44>)
 800b578:	6224      	str	r4, [r4, #32]
 800b57a:	6323      	str	r3, [r4, #48]	; 0x30
 800b57c:	bd10      	pop	{r4, pc}
 800b57e:	bf00      	nop
 800b580:	0800c699 	.word	0x0800c699
 800b584:	0800c6bb 	.word	0x0800c6bb
 800b588:	0800c6f3 	.word	0x0800c6f3
 800b58c:	0800c717 	.word	0x0800c717

0800b590 <_cleanup_r>:
 800b590:	4901      	ldr	r1, [pc, #4]	; (800b598 <_cleanup_r+0x8>)
 800b592:	f000 b8af 	b.w	800b6f4 <_fwalk_reent>
 800b596:	bf00      	nop
 800b598:	0800e2c5 	.word	0x0800e2c5

0800b59c <__sfmoreglue>:
 800b59c:	b570      	push	{r4, r5, r6, lr}
 800b59e:	1e4a      	subs	r2, r1, #1
 800b5a0:	2568      	movs	r5, #104	; 0x68
 800b5a2:	4355      	muls	r5, r2
 800b5a4:	460e      	mov	r6, r1
 800b5a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800b5aa:	f000 f901 	bl	800b7b0 <_malloc_r>
 800b5ae:	4604      	mov	r4, r0
 800b5b0:	b140      	cbz	r0, 800b5c4 <__sfmoreglue+0x28>
 800b5b2:	2100      	movs	r1, #0
 800b5b4:	e9c0 1600 	strd	r1, r6, [r0]
 800b5b8:	300c      	adds	r0, #12
 800b5ba:	60a0      	str	r0, [r4, #8]
 800b5bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800b5c0:	f000 f8ed 	bl	800b79e <memset>
 800b5c4:	4620      	mov	r0, r4
 800b5c6:	bd70      	pop	{r4, r5, r6, pc}

0800b5c8 <__sfp_lock_acquire>:
 800b5c8:	4801      	ldr	r0, [pc, #4]	; (800b5d0 <__sfp_lock_acquire+0x8>)
 800b5ca:	f000 b8d8 	b.w	800b77e <__retarget_lock_acquire_recursive>
 800b5ce:	bf00      	nop
 800b5d0:	20002b40 	.word	0x20002b40

0800b5d4 <__sfp_lock_release>:
 800b5d4:	4801      	ldr	r0, [pc, #4]	; (800b5dc <__sfp_lock_release+0x8>)
 800b5d6:	f000 b8d3 	b.w	800b780 <__retarget_lock_release_recursive>
 800b5da:	bf00      	nop
 800b5dc:	20002b40 	.word	0x20002b40

0800b5e0 <__sinit_lock_acquire>:
 800b5e0:	4801      	ldr	r0, [pc, #4]	; (800b5e8 <__sinit_lock_acquire+0x8>)
 800b5e2:	f000 b8cc 	b.w	800b77e <__retarget_lock_acquire_recursive>
 800b5e6:	bf00      	nop
 800b5e8:	20002b3b 	.word	0x20002b3b

0800b5ec <__sinit_lock_release>:
 800b5ec:	4801      	ldr	r0, [pc, #4]	; (800b5f4 <__sinit_lock_release+0x8>)
 800b5ee:	f000 b8c7 	b.w	800b780 <__retarget_lock_release_recursive>
 800b5f2:	bf00      	nop
 800b5f4:	20002b3b 	.word	0x20002b3b

0800b5f8 <__sinit>:
 800b5f8:	b510      	push	{r4, lr}
 800b5fa:	4604      	mov	r4, r0
 800b5fc:	f7ff fff0 	bl	800b5e0 <__sinit_lock_acquire>
 800b600:	69a3      	ldr	r3, [r4, #24]
 800b602:	b11b      	cbz	r3, 800b60c <__sinit+0x14>
 800b604:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b608:	f7ff bff0 	b.w	800b5ec <__sinit_lock_release>
 800b60c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800b610:	6523      	str	r3, [r4, #80]	; 0x50
 800b612:	4b13      	ldr	r3, [pc, #76]	; (800b660 <__sinit+0x68>)
 800b614:	4a13      	ldr	r2, [pc, #76]	; (800b664 <__sinit+0x6c>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	62a2      	str	r2, [r4, #40]	; 0x28
 800b61a:	42a3      	cmp	r3, r4
 800b61c:	bf04      	itt	eq
 800b61e:	2301      	moveq	r3, #1
 800b620:	61a3      	streq	r3, [r4, #24]
 800b622:	4620      	mov	r0, r4
 800b624:	f000 f820 	bl	800b668 <__sfp>
 800b628:	6060      	str	r0, [r4, #4]
 800b62a:	4620      	mov	r0, r4
 800b62c:	f000 f81c 	bl	800b668 <__sfp>
 800b630:	60a0      	str	r0, [r4, #8]
 800b632:	4620      	mov	r0, r4
 800b634:	f000 f818 	bl	800b668 <__sfp>
 800b638:	2200      	movs	r2, #0
 800b63a:	60e0      	str	r0, [r4, #12]
 800b63c:	2104      	movs	r1, #4
 800b63e:	6860      	ldr	r0, [r4, #4]
 800b640:	f7ff ff82 	bl	800b548 <std>
 800b644:	68a0      	ldr	r0, [r4, #8]
 800b646:	2201      	movs	r2, #1
 800b648:	2109      	movs	r1, #9
 800b64a:	f7ff ff7d 	bl	800b548 <std>
 800b64e:	68e0      	ldr	r0, [r4, #12]
 800b650:	2202      	movs	r2, #2
 800b652:	2112      	movs	r1, #18
 800b654:	f7ff ff78 	bl	800b548 <std>
 800b658:	2301      	movs	r3, #1
 800b65a:	61a3      	str	r3, [r4, #24]
 800b65c:	e7d2      	b.n	800b604 <__sinit+0xc>
 800b65e:	bf00      	nop
 800b660:	08010310 	.word	0x08010310
 800b664:	0800b591 	.word	0x0800b591

0800b668 <__sfp>:
 800b668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b66a:	4607      	mov	r7, r0
 800b66c:	f7ff ffac 	bl	800b5c8 <__sfp_lock_acquire>
 800b670:	4b1e      	ldr	r3, [pc, #120]	; (800b6ec <__sfp+0x84>)
 800b672:	681e      	ldr	r6, [r3, #0]
 800b674:	69b3      	ldr	r3, [r6, #24]
 800b676:	b913      	cbnz	r3, 800b67e <__sfp+0x16>
 800b678:	4630      	mov	r0, r6
 800b67a:	f7ff ffbd 	bl	800b5f8 <__sinit>
 800b67e:	3648      	adds	r6, #72	; 0x48
 800b680:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800b684:	3b01      	subs	r3, #1
 800b686:	d503      	bpl.n	800b690 <__sfp+0x28>
 800b688:	6833      	ldr	r3, [r6, #0]
 800b68a:	b30b      	cbz	r3, 800b6d0 <__sfp+0x68>
 800b68c:	6836      	ldr	r6, [r6, #0]
 800b68e:	e7f7      	b.n	800b680 <__sfp+0x18>
 800b690:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800b694:	b9d5      	cbnz	r5, 800b6cc <__sfp+0x64>
 800b696:	4b16      	ldr	r3, [pc, #88]	; (800b6f0 <__sfp+0x88>)
 800b698:	60e3      	str	r3, [r4, #12]
 800b69a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b69e:	6665      	str	r5, [r4, #100]	; 0x64
 800b6a0:	f000 f86c 	bl	800b77c <__retarget_lock_init_recursive>
 800b6a4:	f7ff ff96 	bl	800b5d4 <__sfp_lock_release>
 800b6a8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800b6ac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800b6b0:	6025      	str	r5, [r4, #0]
 800b6b2:	61a5      	str	r5, [r4, #24]
 800b6b4:	2208      	movs	r2, #8
 800b6b6:	4629      	mov	r1, r5
 800b6b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800b6bc:	f000 f86f 	bl	800b79e <memset>
 800b6c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800b6c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800b6c8:	4620      	mov	r0, r4
 800b6ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b6cc:	3468      	adds	r4, #104	; 0x68
 800b6ce:	e7d9      	b.n	800b684 <__sfp+0x1c>
 800b6d0:	2104      	movs	r1, #4
 800b6d2:	4638      	mov	r0, r7
 800b6d4:	f7ff ff62 	bl	800b59c <__sfmoreglue>
 800b6d8:	4604      	mov	r4, r0
 800b6da:	6030      	str	r0, [r6, #0]
 800b6dc:	2800      	cmp	r0, #0
 800b6de:	d1d5      	bne.n	800b68c <__sfp+0x24>
 800b6e0:	f7ff ff78 	bl	800b5d4 <__sfp_lock_release>
 800b6e4:	230c      	movs	r3, #12
 800b6e6:	603b      	str	r3, [r7, #0]
 800b6e8:	e7ee      	b.n	800b6c8 <__sfp+0x60>
 800b6ea:	bf00      	nop
 800b6ec:	08010310 	.word	0x08010310
 800b6f0:	ffff0001 	.word	0xffff0001

0800b6f4 <_fwalk_reent>:
 800b6f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6f8:	4606      	mov	r6, r0
 800b6fa:	4688      	mov	r8, r1
 800b6fc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800b700:	2700      	movs	r7, #0
 800b702:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b706:	f1b9 0901 	subs.w	r9, r9, #1
 800b70a:	d505      	bpl.n	800b718 <_fwalk_reent+0x24>
 800b70c:	6824      	ldr	r4, [r4, #0]
 800b70e:	2c00      	cmp	r4, #0
 800b710:	d1f7      	bne.n	800b702 <_fwalk_reent+0xe>
 800b712:	4638      	mov	r0, r7
 800b714:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b718:	89ab      	ldrh	r3, [r5, #12]
 800b71a:	2b01      	cmp	r3, #1
 800b71c:	d907      	bls.n	800b72e <_fwalk_reent+0x3a>
 800b71e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b722:	3301      	adds	r3, #1
 800b724:	d003      	beq.n	800b72e <_fwalk_reent+0x3a>
 800b726:	4629      	mov	r1, r5
 800b728:	4630      	mov	r0, r6
 800b72a:	47c0      	blx	r8
 800b72c:	4307      	orrs	r7, r0
 800b72e:	3568      	adds	r5, #104	; 0x68
 800b730:	e7e9      	b.n	800b706 <_fwalk_reent+0x12>
	...

0800b734 <__libc_init_array>:
 800b734:	b570      	push	{r4, r5, r6, lr}
 800b736:	4d0d      	ldr	r5, [pc, #52]	; (800b76c <__libc_init_array+0x38>)
 800b738:	4c0d      	ldr	r4, [pc, #52]	; (800b770 <__libc_init_array+0x3c>)
 800b73a:	1b64      	subs	r4, r4, r5
 800b73c:	10a4      	asrs	r4, r4, #2
 800b73e:	2600      	movs	r6, #0
 800b740:	42a6      	cmp	r6, r4
 800b742:	d109      	bne.n	800b758 <__libc_init_array+0x24>
 800b744:	4d0b      	ldr	r5, [pc, #44]	; (800b774 <__libc_init_array+0x40>)
 800b746:	4c0c      	ldr	r4, [pc, #48]	; (800b778 <__libc_init_array+0x44>)
 800b748:	f004 fbba 	bl	800fec0 <_init>
 800b74c:	1b64      	subs	r4, r4, r5
 800b74e:	10a4      	asrs	r4, r4, #2
 800b750:	2600      	movs	r6, #0
 800b752:	42a6      	cmp	r6, r4
 800b754:	d105      	bne.n	800b762 <__libc_init_array+0x2e>
 800b756:	bd70      	pop	{r4, r5, r6, pc}
 800b758:	f855 3b04 	ldr.w	r3, [r5], #4
 800b75c:	4798      	blx	r3
 800b75e:	3601      	adds	r6, #1
 800b760:	e7ee      	b.n	800b740 <__libc_init_array+0xc>
 800b762:	f855 3b04 	ldr.w	r3, [r5], #4
 800b766:	4798      	blx	r3
 800b768:	3601      	adds	r6, #1
 800b76a:	e7f2      	b.n	800b752 <__libc_init_array+0x1e>
 800b76c:	0801076c 	.word	0x0801076c
 800b770:	0801076c 	.word	0x0801076c
 800b774:	0801076c 	.word	0x0801076c
 800b778:	08010770 	.word	0x08010770

0800b77c <__retarget_lock_init_recursive>:
 800b77c:	4770      	bx	lr

0800b77e <__retarget_lock_acquire_recursive>:
 800b77e:	4770      	bx	lr

0800b780 <__retarget_lock_release_recursive>:
 800b780:	4770      	bx	lr

0800b782 <memcpy>:
 800b782:	440a      	add	r2, r1
 800b784:	4291      	cmp	r1, r2
 800b786:	f100 33ff 	add.w	r3, r0, #4294967295
 800b78a:	d100      	bne.n	800b78e <memcpy+0xc>
 800b78c:	4770      	bx	lr
 800b78e:	b510      	push	{r4, lr}
 800b790:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b794:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b798:	4291      	cmp	r1, r2
 800b79a:	d1f9      	bne.n	800b790 <memcpy+0xe>
 800b79c:	bd10      	pop	{r4, pc}

0800b79e <memset>:
 800b79e:	4402      	add	r2, r0
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	4293      	cmp	r3, r2
 800b7a4:	d100      	bne.n	800b7a8 <memset+0xa>
 800b7a6:	4770      	bx	lr
 800b7a8:	f803 1b01 	strb.w	r1, [r3], #1
 800b7ac:	e7f9      	b.n	800b7a2 <memset+0x4>
	...

0800b7b0 <_malloc_r>:
 800b7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b7b2:	1ccd      	adds	r5, r1, #3
 800b7b4:	f025 0503 	bic.w	r5, r5, #3
 800b7b8:	3508      	adds	r5, #8
 800b7ba:	2d0c      	cmp	r5, #12
 800b7bc:	bf38      	it	cc
 800b7be:	250c      	movcc	r5, #12
 800b7c0:	2d00      	cmp	r5, #0
 800b7c2:	4606      	mov	r6, r0
 800b7c4:	db01      	blt.n	800b7ca <_malloc_r+0x1a>
 800b7c6:	42a9      	cmp	r1, r5
 800b7c8:	d903      	bls.n	800b7d2 <_malloc_r+0x22>
 800b7ca:	230c      	movs	r3, #12
 800b7cc:	6033      	str	r3, [r6, #0]
 800b7ce:	2000      	movs	r0, #0
 800b7d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7d2:	f003 f953 	bl	800ea7c <__malloc_lock>
 800b7d6:	4921      	ldr	r1, [pc, #132]	; (800b85c <_malloc_r+0xac>)
 800b7d8:	680a      	ldr	r2, [r1, #0]
 800b7da:	4614      	mov	r4, r2
 800b7dc:	b99c      	cbnz	r4, 800b806 <_malloc_r+0x56>
 800b7de:	4f20      	ldr	r7, [pc, #128]	; (800b860 <_malloc_r+0xb0>)
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	b923      	cbnz	r3, 800b7ee <_malloc_r+0x3e>
 800b7e4:	4621      	mov	r1, r4
 800b7e6:	4630      	mov	r0, r6
 800b7e8:	f000 ff20 	bl	800c62c <_sbrk_r>
 800b7ec:	6038      	str	r0, [r7, #0]
 800b7ee:	4629      	mov	r1, r5
 800b7f0:	4630      	mov	r0, r6
 800b7f2:	f000 ff1b 	bl	800c62c <_sbrk_r>
 800b7f6:	1c43      	adds	r3, r0, #1
 800b7f8:	d123      	bne.n	800b842 <_malloc_r+0x92>
 800b7fa:	230c      	movs	r3, #12
 800b7fc:	6033      	str	r3, [r6, #0]
 800b7fe:	4630      	mov	r0, r6
 800b800:	f003 f942 	bl	800ea88 <__malloc_unlock>
 800b804:	e7e3      	b.n	800b7ce <_malloc_r+0x1e>
 800b806:	6823      	ldr	r3, [r4, #0]
 800b808:	1b5b      	subs	r3, r3, r5
 800b80a:	d417      	bmi.n	800b83c <_malloc_r+0x8c>
 800b80c:	2b0b      	cmp	r3, #11
 800b80e:	d903      	bls.n	800b818 <_malloc_r+0x68>
 800b810:	6023      	str	r3, [r4, #0]
 800b812:	441c      	add	r4, r3
 800b814:	6025      	str	r5, [r4, #0]
 800b816:	e004      	b.n	800b822 <_malloc_r+0x72>
 800b818:	6863      	ldr	r3, [r4, #4]
 800b81a:	42a2      	cmp	r2, r4
 800b81c:	bf0c      	ite	eq
 800b81e:	600b      	streq	r3, [r1, #0]
 800b820:	6053      	strne	r3, [r2, #4]
 800b822:	4630      	mov	r0, r6
 800b824:	f003 f930 	bl	800ea88 <__malloc_unlock>
 800b828:	f104 000b 	add.w	r0, r4, #11
 800b82c:	1d23      	adds	r3, r4, #4
 800b82e:	f020 0007 	bic.w	r0, r0, #7
 800b832:	1ac2      	subs	r2, r0, r3
 800b834:	d0cc      	beq.n	800b7d0 <_malloc_r+0x20>
 800b836:	1a1b      	subs	r3, r3, r0
 800b838:	50a3      	str	r3, [r4, r2]
 800b83a:	e7c9      	b.n	800b7d0 <_malloc_r+0x20>
 800b83c:	4622      	mov	r2, r4
 800b83e:	6864      	ldr	r4, [r4, #4]
 800b840:	e7cc      	b.n	800b7dc <_malloc_r+0x2c>
 800b842:	1cc4      	adds	r4, r0, #3
 800b844:	f024 0403 	bic.w	r4, r4, #3
 800b848:	42a0      	cmp	r0, r4
 800b84a:	d0e3      	beq.n	800b814 <_malloc_r+0x64>
 800b84c:	1a21      	subs	r1, r4, r0
 800b84e:	4630      	mov	r0, r6
 800b850:	f000 feec 	bl	800c62c <_sbrk_r>
 800b854:	3001      	adds	r0, #1
 800b856:	d1dd      	bne.n	800b814 <_malloc_r+0x64>
 800b858:	e7cf      	b.n	800b7fa <_malloc_r+0x4a>
 800b85a:	bf00      	nop
 800b85c:	20002874 	.word	0x20002874
 800b860:	20002878 	.word	0x20002878

0800b864 <__cvt>:
 800b864:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b868:	ec55 4b10 	vmov	r4, r5, d0
 800b86c:	2d00      	cmp	r5, #0
 800b86e:	460e      	mov	r6, r1
 800b870:	4619      	mov	r1, r3
 800b872:	462b      	mov	r3, r5
 800b874:	bfbb      	ittet	lt
 800b876:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800b87a:	461d      	movlt	r5, r3
 800b87c:	2300      	movge	r3, #0
 800b87e:	232d      	movlt	r3, #45	; 0x2d
 800b880:	700b      	strb	r3, [r1, #0]
 800b882:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b884:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800b888:	4691      	mov	r9, r2
 800b88a:	f023 0820 	bic.w	r8, r3, #32
 800b88e:	bfbc      	itt	lt
 800b890:	4622      	movlt	r2, r4
 800b892:	4614      	movlt	r4, r2
 800b894:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b898:	d005      	beq.n	800b8a6 <__cvt+0x42>
 800b89a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800b89e:	d100      	bne.n	800b8a2 <__cvt+0x3e>
 800b8a0:	3601      	adds	r6, #1
 800b8a2:	2102      	movs	r1, #2
 800b8a4:	e000      	b.n	800b8a8 <__cvt+0x44>
 800b8a6:	2103      	movs	r1, #3
 800b8a8:	ab03      	add	r3, sp, #12
 800b8aa:	9301      	str	r3, [sp, #4]
 800b8ac:	ab02      	add	r3, sp, #8
 800b8ae:	9300      	str	r3, [sp, #0]
 800b8b0:	ec45 4b10 	vmov	d0, r4, r5
 800b8b4:	4653      	mov	r3, sl
 800b8b6:	4632      	mov	r2, r6
 800b8b8:	f001 fe92 	bl	800d5e0 <_dtoa_r>
 800b8bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800b8c0:	4607      	mov	r7, r0
 800b8c2:	d102      	bne.n	800b8ca <__cvt+0x66>
 800b8c4:	f019 0f01 	tst.w	r9, #1
 800b8c8:	d022      	beq.n	800b910 <__cvt+0xac>
 800b8ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800b8ce:	eb07 0906 	add.w	r9, r7, r6
 800b8d2:	d110      	bne.n	800b8f6 <__cvt+0x92>
 800b8d4:	783b      	ldrb	r3, [r7, #0]
 800b8d6:	2b30      	cmp	r3, #48	; 0x30
 800b8d8:	d10a      	bne.n	800b8f0 <__cvt+0x8c>
 800b8da:	2200      	movs	r2, #0
 800b8dc:	2300      	movs	r3, #0
 800b8de:	4620      	mov	r0, r4
 800b8e0:	4629      	mov	r1, r5
 800b8e2:	f7f5 f8f1 	bl	8000ac8 <__aeabi_dcmpeq>
 800b8e6:	b918      	cbnz	r0, 800b8f0 <__cvt+0x8c>
 800b8e8:	f1c6 0601 	rsb	r6, r6, #1
 800b8ec:	f8ca 6000 	str.w	r6, [sl]
 800b8f0:	f8da 3000 	ldr.w	r3, [sl]
 800b8f4:	4499      	add	r9, r3
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	4620      	mov	r0, r4
 800b8fc:	4629      	mov	r1, r5
 800b8fe:	f7f5 f8e3 	bl	8000ac8 <__aeabi_dcmpeq>
 800b902:	b108      	cbz	r0, 800b908 <__cvt+0xa4>
 800b904:	f8cd 900c 	str.w	r9, [sp, #12]
 800b908:	2230      	movs	r2, #48	; 0x30
 800b90a:	9b03      	ldr	r3, [sp, #12]
 800b90c:	454b      	cmp	r3, r9
 800b90e:	d307      	bcc.n	800b920 <__cvt+0xbc>
 800b910:	9b03      	ldr	r3, [sp, #12]
 800b912:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b914:	1bdb      	subs	r3, r3, r7
 800b916:	4638      	mov	r0, r7
 800b918:	6013      	str	r3, [r2, #0]
 800b91a:	b004      	add	sp, #16
 800b91c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b920:	1c59      	adds	r1, r3, #1
 800b922:	9103      	str	r1, [sp, #12]
 800b924:	701a      	strb	r2, [r3, #0]
 800b926:	e7f0      	b.n	800b90a <__cvt+0xa6>

0800b928 <__exponent>:
 800b928:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b92a:	4603      	mov	r3, r0
 800b92c:	2900      	cmp	r1, #0
 800b92e:	bfb8      	it	lt
 800b930:	4249      	neglt	r1, r1
 800b932:	f803 2b02 	strb.w	r2, [r3], #2
 800b936:	bfb4      	ite	lt
 800b938:	222d      	movlt	r2, #45	; 0x2d
 800b93a:	222b      	movge	r2, #43	; 0x2b
 800b93c:	2909      	cmp	r1, #9
 800b93e:	7042      	strb	r2, [r0, #1]
 800b940:	dd2a      	ble.n	800b998 <__exponent+0x70>
 800b942:	f10d 0407 	add.w	r4, sp, #7
 800b946:	46a4      	mov	ip, r4
 800b948:	270a      	movs	r7, #10
 800b94a:	46a6      	mov	lr, r4
 800b94c:	460a      	mov	r2, r1
 800b94e:	fb91 f6f7 	sdiv	r6, r1, r7
 800b952:	fb07 1516 	mls	r5, r7, r6, r1
 800b956:	3530      	adds	r5, #48	; 0x30
 800b958:	2a63      	cmp	r2, #99	; 0x63
 800b95a:	f104 34ff 	add.w	r4, r4, #4294967295
 800b95e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800b962:	4631      	mov	r1, r6
 800b964:	dcf1      	bgt.n	800b94a <__exponent+0x22>
 800b966:	3130      	adds	r1, #48	; 0x30
 800b968:	f1ae 0502 	sub.w	r5, lr, #2
 800b96c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800b970:	1c44      	adds	r4, r0, #1
 800b972:	4629      	mov	r1, r5
 800b974:	4561      	cmp	r1, ip
 800b976:	d30a      	bcc.n	800b98e <__exponent+0x66>
 800b978:	f10d 0209 	add.w	r2, sp, #9
 800b97c:	eba2 020e 	sub.w	r2, r2, lr
 800b980:	4565      	cmp	r5, ip
 800b982:	bf88      	it	hi
 800b984:	2200      	movhi	r2, #0
 800b986:	4413      	add	r3, r2
 800b988:	1a18      	subs	r0, r3, r0
 800b98a:	b003      	add	sp, #12
 800b98c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b98e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b992:	f804 2f01 	strb.w	r2, [r4, #1]!
 800b996:	e7ed      	b.n	800b974 <__exponent+0x4c>
 800b998:	2330      	movs	r3, #48	; 0x30
 800b99a:	3130      	adds	r1, #48	; 0x30
 800b99c:	7083      	strb	r3, [r0, #2]
 800b99e:	70c1      	strb	r1, [r0, #3]
 800b9a0:	1d03      	adds	r3, r0, #4
 800b9a2:	e7f1      	b.n	800b988 <__exponent+0x60>

0800b9a4 <_printf_float>:
 800b9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9a8:	ed2d 8b02 	vpush	{d8}
 800b9ac:	b08d      	sub	sp, #52	; 0x34
 800b9ae:	460c      	mov	r4, r1
 800b9b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800b9b4:	4616      	mov	r6, r2
 800b9b6:	461f      	mov	r7, r3
 800b9b8:	4605      	mov	r5, r0
 800b9ba:	f003 f82f 	bl	800ea1c <_localeconv_r>
 800b9be:	f8d0 a000 	ldr.w	sl, [r0]
 800b9c2:	4650      	mov	r0, sl
 800b9c4:	f7f4 fc04 	bl	80001d0 <strlen>
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	930a      	str	r3, [sp, #40]	; 0x28
 800b9cc:	6823      	ldr	r3, [r4, #0]
 800b9ce:	9305      	str	r3, [sp, #20]
 800b9d0:	f8d8 3000 	ldr.w	r3, [r8]
 800b9d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800b9d8:	3307      	adds	r3, #7
 800b9da:	f023 0307 	bic.w	r3, r3, #7
 800b9de:	f103 0208 	add.w	r2, r3, #8
 800b9e2:	f8c8 2000 	str.w	r2, [r8]
 800b9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9ea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800b9ee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800b9f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b9f6:	9307      	str	r3, [sp, #28]
 800b9f8:	f8cd 8018 	str.w	r8, [sp, #24]
 800b9fc:	ee08 0a10 	vmov	s16, r0
 800ba00:	4b9f      	ldr	r3, [pc, #636]	; (800bc80 <_printf_float+0x2dc>)
 800ba02:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba06:	f04f 32ff 	mov.w	r2, #4294967295
 800ba0a:	f7f5 f88f 	bl	8000b2c <__aeabi_dcmpun>
 800ba0e:	bb88      	cbnz	r0, 800ba74 <_printf_float+0xd0>
 800ba10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba14:	4b9a      	ldr	r3, [pc, #616]	; (800bc80 <_printf_float+0x2dc>)
 800ba16:	f04f 32ff 	mov.w	r2, #4294967295
 800ba1a:	f7f5 f869 	bl	8000af0 <__aeabi_dcmple>
 800ba1e:	bb48      	cbnz	r0, 800ba74 <_printf_float+0xd0>
 800ba20:	2200      	movs	r2, #0
 800ba22:	2300      	movs	r3, #0
 800ba24:	4640      	mov	r0, r8
 800ba26:	4649      	mov	r1, r9
 800ba28:	f7f5 f858 	bl	8000adc <__aeabi_dcmplt>
 800ba2c:	b110      	cbz	r0, 800ba34 <_printf_float+0x90>
 800ba2e:	232d      	movs	r3, #45	; 0x2d
 800ba30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ba34:	4b93      	ldr	r3, [pc, #588]	; (800bc84 <_printf_float+0x2e0>)
 800ba36:	4894      	ldr	r0, [pc, #592]	; (800bc88 <_printf_float+0x2e4>)
 800ba38:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ba3c:	bf94      	ite	ls
 800ba3e:	4698      	movls	r8, r3
 800ba40:	4680      	movhi	r8, r0
 800ba42:	2303      	movs	r3, #3
 800ba44:	6123      	str	r3, [r4, #16]
 800ba46:	9b05      	ldr	r3, [sp, #20]
 800ba48:	f023 0204 	bic.w	r2, r3, #4
 800ba4c:	6022      	str	r2, [r4, #0]
 800ba4e:	f04f 0900 	mov.w	r9, #0
 800ba52:	9700      	str	r7, [sp, #0]
 800ba54:	4633      	mov	r3, r6
 800ba56:	aa0b      	add	r2, sp, #44	; 0x2c
 800ba58:	4621      	mov	r1, r4
 800ba5a:	4628      	mov	r0, r5
 800ba5c:	f000 f9d8 	bl	800be10 <_printf_common>
 800ba60:	3001      	adds	r0, #1
 800ba62:	f040 8090 	bne.w	800bb86 <_printf_float+0x1e2>
 800ba66:	f04f 30ff 	mov.w	r0, #4294967295
 800ba6a:	b00d      	add	sp, #52	; 0x34
 800ba6c:	ecbd 8b02 	vpop	{d8}
 800ba70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba74:	4642      	mov	r2, r8
 800ba76:	464b      	mov	r3, r9
 800ba78:	4640      	mov	r0, r8
 800ba7a:	4649      	mov	r1, r9
 800ba7c:	f7f5 f856 	bl	8000b2c <__aeabi_dcmpun>
 800ba80:	b140      	cbz	r0, 800ba94 <_printf_float+0xf0>
 800ba82:	464b      	mov	r3, r9
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	bfbc      	itt	lt
 800ba88:	232d      	movlt	r3, #45	; 0x2d
 800ba8a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800ba8e:	487f      	ldr	r0, [pc, #508]	; (800bc8c <_printf_float+0x2e8>)
 800ba90:	4b7f      	ldr	r3, [pc, #508]	; (800bc90 <_printf_float+0x2ec>)
 800ba92:	e7d1      	b.n	800ba38 <_printf_float+0x94>
 800ba94:	6863      	ldr	r3, [r4, #4]
 800ba96:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800ba9a:	9206      	str	r2, [sp, #24]
 800ba9c:	1c5a      	adds	r2, r3, #1
 800ba9e:	d13f      	bne.n	800bb20 <_printf_float+0x17c>
 800baa0:	2306      	movs	r3, #6
 800baa2:	6063      	str	r3, [r4, #4]
 800baa4:	9b05      	ldr	r3, [sp, #20]
 800baa6:	6861      	ldr	r1, [r4, #4]
 800baa8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800baac:	2300      	movs	r3, #0
 800baae:	9303      	str	r3, [sp, #12]
 800bab0:	ab0a      	add	r3, sp, #40	; 0x28
 800bab2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800bab6:	ab09      	add	r3, sp, #36	; 0x24
 800bab8:	ec49 8b10 	vmov	d0, r8, r9
 800babc:	9300      	str	r3, [sp, #0]
 800babe:	6022      	str	r2, [r4, #0]
 800bac0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800bac4:	4628      	mov	r0, r5
 800bac6:	f7ff fecd 	bl	800b864 <__cvt>
 800baca:	9b06      	ldr	r3, [sp, #24]
 800bacc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bace:	2b47      	cmp	r3, #71	; 0x47
 800bad0:	4680      	mov	r8, r0
 800bad2:	d108      	bne.n	800bae6 <_printf_float+0x142>
 800bad4:	1cc8      	adds	r0, r1, #3
 800bad6:	db02      	blt.n	800bade <_printf_float+0x13a>
 800bad8:	6863      	ldr	r3, [r4, #4]
 800bada:	4299      	cmp	r1, r3
 800badc:	dd41      	ble.n	800bb62 <_printf_float+0x1be>
 800bade:	f1ab 0b02 	sub.w	fp, fp, #2
 800bae2:	fa5f fb8b 	uxtb.w	fp, fp
 800bae6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800baea:	d820      	bhi.n	800bb2e <_printf_float+0x18a>
 800baec:	3901      	subs	r1, #1
 800baee:	465a      	mov	r2, fp
 800baf0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800baf4:	9109      	str	r1, [sp, #36]	; 0x24
 800baf6:	f7ff ff17 	bl	800b928 <__exponent>
 800bafa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bafc:	1813      	adds	r3, r2, r0
 800bafe:	2a01      	cmp	r2, #1
 800bb00:	4681      	mov	r9, r0
 800bb02:	6123      	str	r3, [r4, #16]
 800bb04:	dc02      	bgt.n	800bb0c <_printf_float+0x168>
 800bb06:	6822      	ldr	r2, [r4, #0]
 800bb08:	07d2      	lsls	r2, r2, #31
 800bb0a:	d501      	bpl.n	800bb10 <_printf_float+0x16c>
 800bb0c:	3301      	adds	r3, #1
 800bb0e:	6123      	str	r3, [r4, #16]
 800bb10:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d09c      	beq.n	800ba52 <_printf_float+0xae>
 800bb18:	232d      	movs	r3, #45	; 0x2d
 800bb1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bb1e:	e798      	b.n	800ba52 <_printf_float+0xae>
 800bb20:	9a06      	ldr	r2, [sp, #24]
 800bb22:	2a47      	cmp	r2, #71	; 0x47
 800bb24:	d1be      	bne.n	800baa4 <_printf_float+0x100>
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d1bc      	bne.n	800baa4 <_printf_float+0x100>
 800bb2a:	2301      	movs	r3, #1
 800bb2c:	e7b9      	b.n	800baa2 <_printf_float+0xfe>
 800bb2e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800bb32:	d118      	bne.n	800bb66 <_printf_float+0x1c2>
 800bb34:	2900      	cmp	r1, #0
 800bb36:	6863      	ldr	r3, [r4, #4]
 800bb38:	dd0b      	ble.n	800bb52 <_printf_float+0x1ae>
 800bb3a:	6121      	str	r1, [r4, #16]
 800bb3c:	b913      	cbnz	r3, 800bb44 <_printf_float+0x1a0>
 800bb3e:	6822      	ldr	r2, [r4, #0]
 800bb40:	07d0      	lsls	r0, r2, #31
 800bb42:	d502      	bpl.n	800bb4a <_printf_float+0x1a6>
 800bb44:	3301      	adds	r3, #1
 800bb46:	440b      	add	r3, r1
 800bb48:	6123      	str	r3, [r4, #16]
 800bb4a:	65a1      	str	r1, [r4, #88]	; 0x58
 800bb4c:	f04f 0900 	mov.w	r9, #0
 800bb50:	e7de      	b.n	800bb10 <_printf_float+0x16c>
 800bb52:	b913      	cbnz	r3, 800bb5a <_printf_float+0x1b6>
 800bb54:	6822      	ldr	r2, [r4, #0]
 800bb56:	07d2      	lsls	r2, r2, #31
 800bb58:	d501      	bpl.n	800bb5e <_printf_float+0x1ba>
 800bb5a:	3302      	adds	r3, #2
 800bb5c:	e7f4      	b.n	800bb48 <_printf_float+0x1a4>
 800bb5e:	2301      	movs	r3, #1
 800bb60:	e7f2      	b.n	800bb48 <_printf_float+0x1a4>
 800bb62:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800bb66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb68:	4299      	cmp	r1, r3
 800bb6a:	db05      	blt.n	800bb78 <_printf_float+0x1d4>
 800bb6c:	6823      	ldr	r3, [r4, #0]
 800bb6e:	6121      	str	r1, [r4, #16]
 800bb70:	07d8      	lsls	r0, r3, #31
 800bb72:	d5ea      	bpl.n	800bb4a <_printf_float+0x1a6>
 800bb74:	1c4b      	adds	r3, r1, #1
 800bb76:	e7e7      	b.n	800bb48 <_printf_float+0x1a4>
 800bb78:	2900      	cmp	r1, #0
 800bb7a:	bfd4      	ite	le
 800bb7c:	f1c1 0202 	rsble	r2, r1, #2
 800bb80:	2201      	movgt	r2, #1
 800bb82:	4413      	add	r3, r2
 800bb84:	e7e0      	b.n	800bb48 <_printf_float+0x1a4>
 800bb86:	6823      	ldr	r3, [r4, #0]
 800bb88:	055a      	lsls	r2, r3, #21
 800bb8a:	d407      	bmi.n	800bb9c <_printf_float+0x1f8>
 800bb8c:	6923      	ldr	r3, [r4, #16]
 800bb8e:	4642      	mov	r2, r8
 800bb90:	4631      	mov	r1, r6
 800bb92:	4628      	mov	r0, r5
 800bb94:	47b8      	blx	r7
 800bb96:	3001      	adds	r0, #1
 800bb98:	d12c      	bne.n	800bbf4 <_printf_float+0x250>
 800bb9a:	e764      	b.n	800ba66 <_printf_float+0xc2>
 800bb9c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800bba0:	f240 80e0 	bls.w	800bd64 <_printf_float+0x3c0>
 800bba4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bba8:	2200      	movs	r2, #0
 800bbaa:	2300      	movs	r3, #0
 800bbac:	f7f4 ff8c 	bl	8000ac8 <__aeabi_dcmpeq>
 800bbb0:	2800      	cmp	r0, #0
 800bbb2:	d034      	beq.n	800bc1e <_printf_float+0x27a>
 800bbb4:	4a37      	ldr	r2, [pc, #220]	; (800bc94 <_printf_float+0x2f0>)
 800bbb6:	2301      	movs	r3, #1
 800bbb8:	4631      	mov	r1, r6
 800bbba:	4628      	mov	r0, r5
 800bbbc:	47b8      	blx	r7
 800bbbe:	3001      	adds	r0, #1
 800bbc0:	f43f af51 	beq.w	800ba66 <_printf_float+0xc2>
 800bbc4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bbc8:	429a      	cmp	r2, r3
 800bbca:	db02      	blt.n	800bbd2 <_printf_float+0x22e>
 800bbcc:	6823      	ldr	r3, [r4, #0]
 800bbce:	07d8      	lsls	r0, r3, #31
 800bbd0:	d510      	bpl.n	800bbf4 <_printf_float+0x250>
 800bbd2:	ee18 3a10 	vmov	r3, s16
 800bbd6:	4652      	mov	r2, sl
 800bbd8:	4631      	mov	r1, r6
 800bbda:	4628      	mov	r0, r5
 800bbdc:	47b8      	blx	r7
 800bbde:	3001      	adds	r0, #1
 800bbe0:	f43f af41 	beq.w	800ba66 <_printf_float+0xc2>
 800bbe4:	f04f 0800 	mov.w	r8, #0
 800bbe8:	f104 091a 	add.w	r9, r4, #26
 800bbec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbee:	3b01      	subs	r3, #1
 800bbf0:	4543      	cmp	r3, r8
 800bbf2:	dc09      	bgt.n	800bc08 <_printf_float+0x264>
 800bbf4:	6823      	ldr	r3, [r4, #0]
 800bbf6:	079b      	lsls	r3, r3, #30
 800bbf8:	f100 8105 	bmi.w	800be06 <_printf_float+0x462>
 800bbfc:	68e0      	ldr	r0, [r4, #12]
 800bbfe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc00:	4298      	cmp	r0, r3
 800bc02:	bfb8      	it	lt
 800bc04:	4618      	movlt	r0, r3
 800bc06:	e730      	b.n	800ba6a <_printf_float+0xc6>
 800bc08:	2301      	movs	r3, #1
 800bc0a:	464a      	mov	r2, r9
 800bc0c:	4631      	mov	r1, r6
 800bc0e:	4628      	mov	r0, r5
 800bc10:	47b8      	blx	r7
 800bc12:	3001      	adds	r0, #1
 800bc14:	f43f af27 	beq.w	800ba66 <_printf_float+0xc2>
 800bc18:	f108 0801 	add.w	r8, r8, #1
 800bc1c:	e7e6      	b.n	800bbec <_printf_float+0x248>
 800bc1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	dc39      	bgt.n	800bc98 <_printf_float+0x2f4>
 800bc24:	4a1b      	ldr	r2, [pc, #108]	; (800bc94 <_printf_float+0x2f0>)
 800bc26:	2301      	movs	r3, #1
 800bc28:	4631      	mov	r1, r6
 800bc2a:	4628      	mov	r0, r5
 800bc2c:	47b8      	blx	r7
 800bc2e:	3001      	adds	r0, #1
 800bc30:	f43f af19 	beq.w	800ba66 <_printf_float+0xc2>
 800bc34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bc38:	4313      	orrs	r3, r2
 800bc3a:	d102      	bne.n	800bc42 <_printf_float+0x29e>
 800bc3c:	6823      	ldr	r3, [r4, #0]
 800bc3e:	07d9      	lsls	r1, r3, #31
 800bc40:	d5d8      	bpl.n	800bbf4 <_printf_float+0x250>
 800bc42:	ee18 3a10 	vmov	r3, s16
 800bc46:	4652      	mov	r2, sl
 800bc48:	4631      	mov	r1, r6
 800bc4a:	4628      	mov	r0, r5
 800bc4c:	47b8      	blx	r7
 800bc4e:	3001      	adds	r0, #1
 800bc50:	f43f af09 	beq.w	800ba66 <_printf_float+0xc2>
 800bc54:	f04f 0900 	mov.w	r9, #0
 800bc58:	f104 0a1a 	add.w	sl, r4, #26
 800bc5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc5e:	425b      	negs	r3, r3
 800bc60:	454b      	cmp	r3, r9
 800bc62:	dc01      	bgt.n	800bc68 <_printf_float+0x2c4>
 800bc64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc66:	e792      	b.n	800bb8e <_printf_float+0x1ea>
 800bc68:	2301      	movs	r3, #1
 800bc6a:	4652      	mov	r2, sl
 800bc6c:	4631      	mov	r1, r6
 800bc6e:	4628      	mov	r0, r5
 800bc70:	47b8      	blx	r7
 800bc72:	3001      	adds	r0, #1
 800bc74:	f43f aef7 	beq.w	800ba66 <_printf_float+0xc2>
 800bc78:	f109 0901 	add.w	r9, r9, #1
 800bc7c:	e7ee      	b.n	800bc5c <_printf_float+0x2b8>
 800bc7e:	bf00      	nop
 800bc80:	7fefffff 	.word	0x7fefffff
 800bc84:	08010314 	.word	0x08010314
 800bc88:	08010318 	.word	0x08010318
 800bc8c:	08010320 	.word	0x08010320
 800bc90:	0801031c 	.word	0x0801031c
 800bc94:	08010324 	.word	0x08010324
 800bc98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bc9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bc9c:	429a      	cmp	r2, r3
 800bc9e:	bfa8      	it	ge
 800bca0:	461a      	movge	r2, r3
 800bca2:	2a00      	cmp	r2, #0
 800bca4:	4691      	mov	r9, r2
 800bca6:	dc37      	bgt.n	800bd18 <_printf_float+0x374>
 800bca8:	f04f 0b00 	mov.w	fp, #0
 800bcac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bcb0:	f104 021a 	add.w	r2, r4, #26
 800bcb4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800bcb6:	9305      	str	r3, [sp, #20]
 800bcb8:	eba3 0309 	sub.w	r3, r3, r9
 800bcbc:	455b      	cmp	r3, fp
 800bcbe:	dc33      	bgt.n	800bd28 <_printf_float+0x384>
 800bcc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bcc4:	429a      	cmp	r2, r3
 800bcc6:	db3b      	blt.n	800bd40 <_printf_float+0x39c>
 800bcc8:	6823      	ldr	r3, [r4, #0]
 800bcca:	07da      	lsls	r2, r3, #31
 800bccc:	d438      	bmi.n	800bd40 <_printf_float+0x39c>
 800bcce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bcd0:	9b05      	ldr	r3, [sp, #20]
 800bcd2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bcd4:	1ad3      	subs	r3, r2, r3
 800bcd6:	eba2 0901 	sub.w	r9, r2, r1
 800bcda:	4599      	cmp	r9, r3
 800bcdc:	bfa8      	it	ge
 800bcde:	4699      	movge	r9, r3
 800bce0:	f1b9 0f00 	cmp.w	r9, #0
 800bce4:	dc35      	bgt.n	800bd52 <_printf_float+0x3ae>
 800bce6:	f04f 0800 	mov.w	r8, #0
 800bcea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800bcee:	f104 0a1a 	add.w	sl, r4, #26
 800bcf2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800bcf6:	1a9b      	subs	r3, r3, r2
 800bcf8:	eba3 0309 	sub.w	r3, r3, r9
 800bcfc:	4543      	cmp	r3, r8
 800bcfe:	f77f af79 	ble.w	800bbf4 <_printf_float+0x250>
 800bd02:	2301      	movs	r3, #1
 800bd04:	4652      	mov	r2, sl
 800bd06:	4631      	mov	r1, r6
 800bd08:	4628      	mov	r0, r5
 800bd0a:	47b8      	blx	r7
 800bd0c:	3001      	adds	r0, #1
 800bd0e:	f43f aeaa 	beq.w	800ba66 <_printf_float+0xc2>
 800bd12:	f108 0801 	add.w	r8, r8, #1
 800bd16:	e7ec      	b.n	800bcf2 <_printf_float+0x34e>
 800bd18:	4613      	mov	r3, r2
 800bd1a:	4631      	mov	r1, r6
 800bd1c:	4642      	mov	r2, r8
 800bd1e:	4628      	mov	r0, r5
 800bd20:	47b8      	blx	r7
 800bd22:	3001      	adds	r0, #1
 800bd24:	d1c0      	bne.n	800bca8 <_printf_float+0x304>
 800bd26:	e69e      	b.n	800ba66 <_printf_float+0xc2>
 800bd28:	2301      	movs	r3, #1
 800bd2a:	4631      	mov	r1, r6
 800bd2c:	4628      	mov	r0, r5
 800bd2e:	9205      	str	r2, [sp, #20]
 800bd30:	47b8      	blx	r7
 800bd32:	3001      	adds	r0, #1
 800bd34:	f43f ae97 	beq.w	800ba66 <_printf_float+0xc2>
 800bd38:	9a05      	ldr	r2, [sp, #20]
 800bd3a:	f10b 0b01 	add.w	fp, fp, #1
 800bd3e:	e7b9      	b.n	800bcb4 <_printf_float+0x310>
 800bd40:	ee18 3a10 	vmov	r3, s16
 800bd44:	4652      	mov	r2, sl
 800bd46:	4631      	mov	r1, r6
 800bd48:	4628      	mov	r0, r5
 800bd4a:	47b8      	blx	r7
 800bd4c:	3001      	adds	r0, #1
 800bd4e:	d1be      	bne.n	800bcce <_printf_float+0x32a>
 800bd50:	e689      	b.n	800ba66 <_printf_float+0xc2>
 800bd52:	9a05      	ldr	r2, [sp, #20]
 800bd54:	464b      	mov	r3, r9
 800bd56:	4442      	add	r2, r8
 800bd58:	4631      	mov	r1, r6
 800bd5a:	4628      	mov	r0, r5
 800bd5c:	47b8      	blx	r7
 800bd5e:	3001      	adds	r0, #1
 800bd60:	d1c1      	bne.n	800bce6 <_printf_float+0x342>
 800bd62:	e680      	b.n	800ba66 <_printf_float+0xc2>
 800bd64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd66:	2a01      	cmp	r2, #1
 800bd68:	dc01      	bgt.n	800bd6e <_printf_float+0x3ca>
 800bd6a:	07db      	lsls	r3, r3, #31
 800bd6c:	d538      	bpl.n	800bde0 <_printf_float+0x43c>
 800bd6e:	2301      	movs	r3, #1
 800bd70:	4642      	mov	r2, r8
 800bd72:	4631      	mov	r1, r6
 800bd74:	4628      	mov	r0, r5
 800bd76:	47b8      	blx	r7
 800bd78:	3001      	adds	r0, #1
 800bd7a:	f43f ae74 	beq.w	800ba66 <_printf_float+0xc2>
 800bd7e:	ee18 3a10 	vmov	r3, s16
 800bd82:	4652      	mov	r2, sl
 800bd84:	4631      	mov	r1, r6
 800bd86:	4628      	mov	r0, r5
 800bd88:	47b8      	blx	r7
 800bd8a:	3001      	adds	r0, #1
 800bd8c:	f43f ae6b 	beq.w	800ba66 <_printf_float+0xc2>
 800bd90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800bd94:	2200      	movs	r2, #0
 800bd96:	2300      	movs	r3, #0
 800bd98:	f7f4 fe96 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd9c:	b9d8      	cbnz	r0, 800bdd6 <_printf_float+0x432>
 800bd9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bda0:	f108 0201 	add.w	r2, r8, #1
 800bda4:	3b01      	subs	r3, #1
 800bda6:	4631      	mov	r1, r6
 800bda8:	4628      	mov	r0, r5
 800bdaa:	47b8      	blx	r7
 800bdac:	3001      	adds	r0, #1
 800bdae:	d10e      	bne.n	800bdce <_printf_float+0x42a>
 800bdb0:	e659      	b.n	800ba66 <_printf_float+0xc2>
 800bdb2:	2301      	movs	r3, #1
 800bdb4:	4652      	mov	r2, sl
 800bdb6:	4631      	mov	r1, r6
 800bdb8:	4628      	mov	r0, r5
 800bdba:	47b8      	blx	r7
 800bdbc:	3001      	adds	r0, #1
 800bdbe:	f43f ae52 	beq.w	800ba66 <_printf_float+0xc2>
 800bdc2:	f108 0801 	add.w	r8, r8, #1
 800bdc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bdc8:	3b01      	subs	r3, #1
 800bdca:	4543      	cmp	r3, r8
 800bdcc:	dcf1      	bgt.n	800bdb2 <_printf_float+0x40e>
 800bdce:	464b      	mov	r3, r9
 800bdd0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800bdd4:	e6dc      	b.n	800bb90 <_printf_float+0x1ec>
 800bdd6:	f04f 0800 	mov.w	r8, #0
 800bdda:	f104 0a1a 	add.w	sl, r4, #26
 800bdde:	e7f2      	b.n	800bdc6 <_printf_float+0x422>
 800bde0:	2301      	movs	r3, #1
 800bde2:	4642      	mov	r2, r8
 800bde4:	e7df      	b.n	800bda6 <_printf_float+0x402>
 800bde6:	2301      	movs	r3, #1
 800bde8:	464a      	mov	r2, r9
 800bdea:	4631      	mov	r1, r6
 800bdec:	4628      	mov	r0, r5
 800bdee:	47b8      	blx	r7
 800bdf0:	3001      	adds	r0, #1
 800bdf2:	f43f ae38 	beq.w	800ba66 <_printf_float+0xc2>
 800bdf6:	f108 0801 	add.w	r8, r8, #1
 800bdfa:	68e3      	ldr	r3, [r4, #12]
 800bdfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bdfe:	1a5b      	subs	r3, r3, r1
 800be00:	4543      	cmp	r3, r8
 800be02:	dcf0      	bgt.n	800bde6 <_printf_float+0x442>
 800be04:	e6fa      	b.n	800bbfc <_printf_float+0x258>
 800be06:	f04f 0800 	mov.w	r8, #0
 800be0a:	f104 0919 	add.w	r9, r4, #25
 800be0e:	e7f4      	b.n	800bdfa <_printf_float+0x456>

0800be10 <_printf_common>:
 800be10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800be14:	4616      	mov	r6, r2
 800be16:	4699      	mov	r9, r3
 800be18:	688a      	ldr	r2, [r1, #8]
 800be1a:	690b      	ldr	r3, [r1, #16]
 800be1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800be20:	4293      	cmp	r3, r2
 800be22:	bfb8      	it	lt
 800be24:	4613      	movlt	r3, r2
 800be26:	6033      	str	r3, [r6, #0]
 800be28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800be2c:	4607      	mov	r7, r0
 800be2e:	460c      	mov	r4, r1
 800be30:	b10a      	cbz	r2, 800be36 <_printf_common+0x26>
 800be32:	3301      	adds	r3, #1
 800be34:	6033      	str	r3, [r6, #0]
 800be36:	6823      	ldr	r3, [r4, #0]
 800be38:	0699      	lsls	r1, r3, #26
 800be3a:	bf42      	ittt	mi
 800be3c:	6833      	ldrmi	r3, [r6, #0]
 800be3e:	3302      	addmi	r3, #2
 800be40:	6033      	strmi	r3, [r6, #0]
 800be42:	6825      	ldr	r5, [r4, #0]
 800be44:	f015 0506 	ands.w	r5, r5, #6
 800be48:	d106      	bne.n	800be58 <_printf_common+0x48>
 800be4a:	f104 0a19 	add.w	sl, r4, #25
 800be4e:	68e3      	ldr	r3, [r4, #12]
 800be50:	6832      	ldr	r2, [r6, #0]
 800be52:	1a9b      	subs	r3, r3, r2
 800be54:	42ab      	cmp	r3, r5
 800be56:	dc26      	bgt.n	800bea6 <_printf_common+0x96>
 800be58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800be5c:	1e13      	subs	r3, r2, #0
 800be5e:	6822      	ldr	r2, [r4, #0]
 800be60:	bf18      	it	ne
 800be62:	2301      	movne	r3, #1
 800be64:	0692      	lsls	r2, r2, #26
 800be66:	d42b      	bmi.n	800bec0 <_printf_common+0xb0>
 800be68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800be6c:	4649      	mov	r1, r9
 800be6e:	4638      	mov	r0, r7
 800be70:	47c0      	blx	r8
 800be72:	3001      	adds	r0, #1
 800be74:	d01e      	beq.n	800beb4 <_printf_common+0xa4>
 800be76:	6823      	ldr	r3, [r4, #0]
 800be78:	68e5      	ldr	r5, [r4, #12]
 800be7a:	6832      	ldr	r2, [r6, #0]
 800be7c:	f003 0306 	and.w	r3, r3, #6
 800be80:	2b04      	cmp	r3, #4
 800be82:	bf08      	it	eq
 800be84:	1aad      	subeq	r5, r5, r2
 800be86:	68a3      	ldr	r3, [r4, #8]
 800be88:	6922      	ldr	r2, [r4, #16]
 800be8a:	bf0c      	ite	eq
 800be8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be90:	2500      	movne	r5, #0
 800be92:	4293      	cmp	r3, r2
 800be94:	bfc4      	itt	gt
 800be96:	1a9b      	subgt	r3, r3, r2
 800be98:	18ed      	addgt	r5, r5, r3
 800be9a:	2600      	movs	r6, #0
 800be9c:	341a      	adds	r4, #26
 800be9e:	42b5      	cmp	r5, r6
 800bea0:	d11a      	bne.n	800bed8 <_printf_common+0xc8>
 800bea2:	2000      	movs	r0, #0
 800bea4:	e008      	b.n	800beb8 <_printf_common+0xa8>
 800bea6:	2301      	movs	r3, #1
 800bea8:	4652      	mov	r2, sl
 800beaa:	4649      	mov	r1, r9
 800beac:	4638      	mov	r0, r7
 800beae:	47c0      	blx	r8
 800beb0:	3001      	adds	r0, #1
 800beb2:	d103      	bne.n	800bebc <_printf_common+0xac>
 800beb4:	f04f 30ff 	mov.w	r0, #4294967295
 800beb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bebc:	3501      	adds	r5, #1
 800bebe:	e7c6      	b.n	800be4e <_printf_common+0x3e>
 800bec0:	18e1      	adds	r1, r4, r3
 800bec2:	1c5a      	adds	r2, r3, #1
 800bec4:	2030      	movs	r0, #48	; 0x30
 800bec6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800beca:	4422      	add	r2, r4
 800becc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800bed0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800bed4:	3302      	adds	r3, #2
 800bed6:	e7c7      	b.n	800be68 <_printf_common+0x58>
 800bed8:	2301      	movs	r3, #1
 800beda:	4622      	mov	r2, r4
 800bedc:	4649      	mov	r1, r9
 800bede:	4638      	mov	r0, r7
 800bee0:	47c0      	blx	r8
 800bee2:	3001      	adds	r0, #1
 800bee4:	d0e6      	beq.n	800beb4 <_printf_common+0xa4>
 800bee6:	3601      	adds	r6, #1
 800bee8:	e7d9      	b.n	800be9e <_printf_common+0x8e>
	...

0800beec <_printf_i>:
 800beec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bef0:	460c      	mov	r4, r1
 800bef2:	4691      	mov	r9, r2
 800bef4:	7e27      	ldrb	r7, [r4, #24]
 800bef6:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bef8:	2f78      	cmp	r7, #120	; 0x78
 800befa:	4680      	mov	r8, r0
 800befc:	469a      	mov	sl, r3
 800befe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bf02:	d807      	bhi.n	800bf14 <_printf_i+0x28>
 800bf04:	2f62      	cmp	r7, #98	; 0x62
 800bf06:	d80a      	bhi.n	800bf1e <_printf_i+0x32>
 800bf08:	2f00      	cmp	r7, #0
 800bf0a:	f000 80d8 	beq.w	800c0be <_printf_i+0x1d2>
 800bf0e:	2f58      	cmp	r7, #88	; 0x58
 800bf10:	f000 80a3 	beq.w	800c05a <_printf_i+0x16e>
 800bf14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bf18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800bf1c:	e03a      	b.n	800bf94 <_printf_i+0xa8>
 800bf1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800bf22:	2b15      	cmp	r3, #21
 800bf24:	d8f6      	bhi.n	800bf14 <_printf_i+0x28>
 800bf26:	a001      	add	r0, pc, #4	; (adr r0, 800bf2c <_printf_i+0x40>)
 800bf28:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800bf2c:	0800bf85 	.word	0x0800bf85
 800bf30:	0800bf99 	.word	0x0800bf99
 800bf34:	0800bf15 	.word	0x0800bf15
 800bf38:	0800bf15 	.word	0x0800bf15
 800bf3c:	0800bf15 	.word	0x0800bf15
 800bf40:	0800bf15 	.word	0x0800bf15
 800bf44:	0800bf99 	.word	0x0800bf99
 800bf48:	0800bf15 	.word	0x0800bf15
 800bf4c:	0800bf15 	.word	0x0800bf15
 800bf50:	0800bf15 	.word	0x0800bf15
 800bf54:	0800bf15 	.word	0x0800bf15
 800bf58:	0800c0a5 	.word	0x0800c0a5
 800bf5c:	0800bfc9 	.word	0x0800bfc9
 800bf60:	0800c087 	.word	0x0800c087
 800bf64:	0800bf15 	.word	0x0800bf15
 800bf68:	0800bf15 	.word	0x0800bf15
 800bf6c:	0800c0c7 	.word	0x0800c0c7
 800bf70:	0800bf15 	.word	0x0800bf15
 800bf74:	0800bfc9 	.word	0x0800bfc9
 800bf78:	0800bf15 	.word	0x0800bf15
 800bf7c:	0800bf15 	.word	0x0800bf15
 800bf80:	0800c08f 	.word	0x0800c08f
 800bf84:	680b      	ldr	r3, [r1, #0]
 800bf86:	1d1a      	adds	r2, r3, #4
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	600a      	str	r2, [r1, #0]
 800bf8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800bf90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bf94:	2301      	movs	r3, #1
 800bf96:	e0a3      	b.n	800c0e0 <_printf_i+0x1f4>
 800bf98:	6825      	ldr	r5, [r4, #0]
 800bf9a:	6808      	ldr	r0, [r1, #0]
 800bf9c:	062e      	lsls	r6, r5, #24
 800bf9e:	f100 0304 	add.w	r3, r0, #4
 800bfa2:	d50a      	bpl.n	800bfba <_printf_i+0xce>
 800bfa4:	6805      	ldr	r5, [r0, #0]
 800bfa6:	600b      	str	r3, [r1, #0]
 800bfa8:	2d00      	cmp	r5, #0
 800bfaa:	da03      	bge.n	800bfb4 <_printf_i+0xc8>
 800bfac:	232d      	movs	r3, #45	; 0x2d
 800bfae:	426d      	negs	r5, r5
 800bfb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800bfb4:	485e      	ldr	r0, [pc, #376]	; (800c130 <_printf_i+0x244>)
 800bfb6:	230a      	movs	r3, #10
 800bfb8:	e019      	b.n	800bfee <_printf_i+0x102>
 800bfba:	f015 0f40 	tst.w	r5, #64	; 0x40
 800bfbe:	6805      	ldr	r5, [r0, #0]
 800bfc0:	600b      	str	r3, [r1, #0]
 800bfc2:	bf18      	it	ne
 800bfc4:	b22d      	sxthne	r5, r5
 800bfc6:	e7ef      	b.n	800bfa8 <_printf_i+0xbc>
 800bfc8:	680b      	ldr	r3, [r1, #0]
 800bfca:	6825      	ldr	r5, [r4, #0]
 800bfcc:	1d18      	adds	r0, r3, #4
 800bfce:	6008      	str	r0, [r1, #0]
 800bfd0:	0628      	lsls	r0, r5, #24
 800bfd2:	d501      	bpl.n	800bfd8 <_printf_i+0xec>
 800bfd4:	681d      	ldr	r5, [r3, #0]
 800bfd6:	e002      	b.n	800bfde <_printf_i+0xf2>
 800bfd8:	0669      	lsls	r1, r5, #25
 800bfda:	d5fb      	bpl.n	800bfd4 <_printf_i+0xe8>
 800bfdc:	881d      	ldrh	r5, [r3, #0]
 800bfde:	4854      	ldr	r0, [pc, #336]	; (800c130 <_printf_i+0x244>)
 800bfe0:	2f6f      	cmp	r7, #111	; 0x6f
 800bfe2:	bf0c      	ite	eq
 800bfe4:	2308      	moveq	r3, #8
 800bfe6:	230a      	movne	r3, #10
 800bfe8:	2100      	movs	r1, #0
 800bfea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bfee:	6866      	ldr	r6, [r4, #4]
 800bff0:	60a6      	str	r6, [r4, #8]
 800bff2:	2e00      	cmp	r6, #0
 800bff4:	bfa2      	ittt	ge
 800bff6:	6821      	ldrge	r1, [r4, #0]
 800bff8:	f021 0104 	bicge.w	r1, r1, #4
 800bffc:	6021      	strge	r1, [r4, #0]
 800bffe:	b90d      	cbnz	r5, 800c004 <_printf_i+0x118>
 800c000:	2e00      	cmp	r6, #0
 800c002:	d04d      	beq.n	800c0a0 <_printf_i+0x1b4>
 800c004:	4616      	mov	r6, r2
 800c006:	fbb5 f1f3 	udiv	r1, r5, r3
 800c00a:	fb03 5711 	mls	r7, r3, r1, r5
 800c00e:	5dc7      	ldrb	r7, [r0, r7]
 800c010:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c014:	462f      	mov	r7, r5
 800c016:	42bb      	cmp	r3, r7
 800c018:	460d      	mov	r5, r1
 800c01a:	d9f4      	bls.n	800c006 <_printf_i+0x11a>
 800c01c:	2b08      	cmp	r3, #8
 800c01e:	d10b      	bne.n	800c038 <_printf_i+0x14c>
 800c020:	6823      	ldr	r3, [r4, #0]
 800c022:	07df      	lsls	r7, r3, #31
 800c024:	d508      	bpl.n	800c038 <_printf_i+0x14c>
 800c026:	6923      	ldr	r3, [r4, #16]
 800c028:	6861      	ldr	r1, [r4, #4]
 800c02a:	4299      	cmp	r1, r3
 800c02c:	bfde      	ittt	le
 800c02e:	2330      	movle	r3, #48	; 0x30
 800c030:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c034:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c038:	1b92      	subs	r2, r2, r6
 800c03a:	6122      	str	r2, [r4, #16]
 800c03c:	f8cd a000 	str.w	sl, [sp]
 800c040:	464b      	mov	r3, r9
 800c042:	aa03      	add	r2, sp, #12
 800c044:	4621      	mov	r1, r4
 800c046:	4640      	mov	r0, r8
 800c048:	f7ff fee2 	bl	800be10 <_printf_common>
 800c04c:	3001      	adds	r0, #1
 800c04e:	d14c      	bne.n	800c0ea <_printf_i+0x1fe>
 800c050:	f04f 30ff 	mov.w	r0, #4294967295
 800c054:	b004      	add	sp, #16
 800c056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c05a:	4835      	ldr	r0, [pc, #212]	; (800c130 <_printf_i+0x244>)
 800c05c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c060:	6823      	ldr	r3, [r4, #0]
 800c062:	680e      	ldr	r6, [r1, #0]
 800c064:	061f      	lsls	r7, r3, #24
 800c066:	f856 5b04 	ldr.w	r5, [r6], #4
 800c06a:	600e      	str	r6, [r1, #0]
 800c06c:	d514      	bpl.n	800c098 <_printf_i+0x1ac>
 800c06e:	07d9      	lsls	r1, r3, #31
 800c070:	bf44      	itt	mi
 800c072:	f043 0320 	orrmi.w	r3, r3, #32
 800c076:	6023      	strmi	r3, [r4, #0]
 800c078:	b91d      	cbnz	r5, 800c082 <_printf_i+0x196>
 800c07a:	6823      	ldr	r3, [r4, #0]
 800c07c:	f023 0320 	bic.w	r3, r3, #32
 800c080:	6023      	str	r3, [r4, #0]
 800c082:	2310      	movs	r3, #16
 800c084:	e7b0      	b.n	800bfe8 <_printf_i+0xfc>
 800c086:	6823      	ldr	r3, [r4, #0]
 800c088:	f043 0320 	orr.w	r3, r3, #32
 800c08c:	6023      	str	r3, [r4, #0]
 800c08e:	2378      	movs	r3, #120	; 0x78
 800c090:	4828      	ldr	r0, [pc, #160]	; (800c134 <_printf_i+0x248>)
 800c092:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c096:	e7e3      	b.n	800c060 <_printf_i+0x174>
 800c098:	065e      	lsls	r6, r3, #25
 800c09a:	bf48      	it	mi
 800c09c:	b2ad      	uxthmi	r5, r5
 800c09e:	e7e6      	b.n	800c06e <_printf_i+0x182>
 800c0a0:	4616      	mov	r6, r2
 800c0a2:	e7bb      	b.n	800c01c <_printf_i+0x130>
 800c0a4:	680b      	ldr	r3, [r1, #0]
 800c0a6:	6826      	ldr	r6, [r4, #0]
 800c0a8:	6960      	ldr	r0, [r4, #20]
 800c0aa:	1d1d      	adds	r5, r3, #4
 800c0ac:	600d      	str	r5, [r1, #0]
 800c0ae:	0635      	lsls	r5, r6, #24
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	d501      	bpl.n	800c0b8 <_printf_i+0x1cc>
 800c0b4:	6018      	str	r0, [r3, #0]
 800c0b6:	e002      	b.n	800c0be <_printf_i+0x1d2>
 800c0b8:	0671      	lsls	r1, r6, #25
 800c0ba:	d5fb      	bpl.n	800c0b4 <_printf_i+0x1c8>
 800c0bc:	8018      	strh	r0, [r3, #0]
 800c0be:	2300      	movs	r3, #0
 800c0c0:	6123      	str	r3, [r4, #16]
 800c0c2:	4616      	mov	r6, r2
 800c0c4:	e7ba      	b.n	800c03c <_printf_i+0x150>
 800c0c6:	680b      	ldr	r3, [r1, #0]
 800c0c8:	1d1a      	adds	r2, r3, #4
 800c0ca:	600a      	str	r2, [r1, #0]
 800c0cc:	681e      	ldr	r6, [r3, #0]
 800c0ce:	6862      	ldr	r2, [r4, #4]
 800c0d0:	2100      	movs	r1, #0
 800c0d2:	4630      	mov	r0, r6
 800c0d4:	f7f4 f884 	bl	80001e0 <memchr>
 800c0d8:	b108      	cbz	r0, 800c0de <_printf_i+0x1f2>
 800c0da:	1b80      	subs	r0, r0, r6
 800c0dc:	6060      	str	r0, [r4, #4]
 800c0de:	6863      	ldr	r3, [r4, #4]
 800c0e0:	6123      	str	r3, [r4, #16]
 800c0e2:	2300      	movs	r3, #0
 800c0e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c0e8:	e7a8      	b.n	800c03c <_printf_i+0x150>
 800c0ea:	6923      	ldr	r3, [r4, #16]
 800c0ec:	4632      	mov	r2, r6
 800c0ee:	4649      	mov	r1, r9
 800c0f0:	4640      	mov	r0, r8
 800c0f2:	47d0      	blx	sl
 800c0f4:	3001      	adds	r0, #1
 800c0f6:	d0ab      	beq.n	800c050 <_printf_i+0x164>
 800c0f8:	6823      	ldr	r3, [r4, #0]
 800c0fa:	079b      	lsls	r3, r3, #30
 800c0fc:	d413      	bmi.n	800c126 <_printf_i+0x23a>
 800c0fe:	68e0      	ldr	r0, [r4, #12]
 800c100:	9b03      	ldr	r3, [sp, #12]
 800c102:	4298      	cmp	r0, r3
 800c104:	bfb8      	it	lt
 800c106:	4618      	movlt	r0, r3
 800c108:	e7a4      	b.n	800c054 <_printf_i+0x168>
 800c10a:	2301      	movs	r3, #1
 800c10c:	4632      	mov	r2, r6
 800c10e:	4649      	mov	r1, r9
 800c110:	4640      	mov	r0, r8
 800c112:	47d0      	blx	sl
 800c114:	3001      	adds	r0, #1
 800c116:	d09b      	beq.n	800c050 <_printf_i+0x164>
 800c118:	3501      	adds	r5, #1
 800c11a:	68e3      	ldr	r3, [r4, #12]
 800c11c:	9903      	ldr	r1, [sp, #12]
 800c11e:	1a5b      	subs	r3, r3, r1
 800c120:	42ab      	cmp	r3, r5
 800c122:	dcf2      	bgt.n	800c10a <_printf_i+0x21e>
 800c124:	e7eb      	b.n	800c0fe <_printf_i+0x212>
 800c126:	2500      	movs	r5, #0
 800c128:	f104 0619 	add.w	r6, r4, #25
 800c12c:	e7f5      	b.n	800c11a <_printf_i+0x22e>
 800c12e:	bf00      	nop
 800c130:	08010326 	.word	0x08010326
 800c134:	08010337 	.word	0x08010337

0800c138 <_scanf_float>:
 800c138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c13c:	b087      	sub	sp, #28
 800c13e:	4617      	mov	r7, r2
 800c140:	9303      	str	r3, [sp, #12]
 800c142:	688b      	ldr	r3, [r1, #8]
 800c144:	1e5a      	subs	r2, r3, #1
 800c146:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800c14a:	bf83      	ittte	hi
 800c14c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800c150:	195b      	addhi	r3, r3, r5
 800c152:	9302      	strhi	r3, [sp, #8]
 800c154:	2300      	movls	r3, #0
 800c156:	bf86      	itte	hi
 800c158:	f240 135d 	movwhi	r3, #349	; 0x15d
 800c15c:	608b      	strhi	r3, [r1, #8]
 800c15e:	9302      	strls	r3, [sp, #8]
 800c160:	680b      	ldr	r3, [r1, #0]
 800c162:	468b      	mov	fp, r1
 800c164:	2500      	movs	r5, #0
 800c166:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800c16a:	f84b 3b1c 	str.w	r3, [fp], #28
 800c16e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800c172:	4680      	mov	r8, r0
 800c174:	460c      	mov	r4, r1
 800c176:	465e      	mov	r6, fp
 800c178:	46aa      	mov	sl, r5
 800c17a:	46a9      	mov	r9, r5
 800c17c:	9501      	str	r5, [sp, #4]
 800c17e:	68a2      	ldr	r2, [r4, #8]
 800c180:	b152      	cbz	r2, 800c198 <_scanf_float+0x60>
 800c182:	683b      	ldr	r3, [r7, #0]
 800c184:	781b      	ldrb	r3, [r3, #0]
 800c186:	2b4e      	cmp	r3, #78	; 0x4e
 800c188:	d864      	bhi.n	800c254 <_scanf_float+0x11c>
 800c18a:	2b40      	cmp	r3, #64	; 0x40
 800c18c:	d83c      	bhi.n	800c208 <_scanf_float+0xd0>
 800c18e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800c192:	b2c8      	uxtb	r0, r1
 800c194:	280e      	cmp	r0, #14
 800c196:	d93a      	bls.n	800c20e <_scanf_float+0xd6>
 800c198:	f1b9 0f00 	cmp.w	r9, #0
 800c19c:	d003      	beq.n	800c1a6 <_scanf_float+0x6e>
 800c19e:	6823      	ldr	r3, [r4, #0]
 800c1a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c1a4:	6023      	str	r3, [r4, #0]
 800c1a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c1aa:	f1ba 0f01 	cmp.w	sl, #1
 800c1ae:	f200 8113 	bhi.w	800c3d8 <_scanf_float+0x2a0>
 800c1b2:	455e      	cmp	r6, fp
 800c1b4:	f200 8105 	bhi.w	800c3c2 <_scanf_float+0x28a>
 800c1b8:	2501      	movs	r5, #1
 800c1ba:	4628      	mov	r0, r5
 800c1bc:	b007      	add	sp, #28
 800c1be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c1c2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800c1c6:	2a0d      	cmp	r2, #13
 800c1c8:	d8e6      	bhi.n	800c198 <_scanf_float+0x60>
 800c1ca:	a101      	add	r1, pc, #4	; (adr r1, 800c1d0 <_scanf_float+0x98>)
 800c1cc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c1d0:	0800c30f 	.word	0x0800c30f
 800c1d4:	0800c199 	.word	0x0800c199
 800c1d8:	0800c199 	.word	0x0800c199
 800c1dc:	0800c199 	.word	0x0800c199
 800c1e0:	0800c36f 	.word	0x0800c36f
 800c1e4:	0800c347 	.word	0x0800c347
 800c1e8:	0800c199 	.word	0x0800c199
 800c1ec:	0800c199 	.word	0x0800c199
 800c1f0:	0800c31d 	.word	0x0800c31d
 800c1f4:	0800c199 	.word	0x0800c199
 800c1f8:	0800c199 	.word	0x0800c199
 800c1fc:	0800c199 	.word	0x0800c199
 800c200:	0800c199 	.word	0x0800c199
 800c204:	0800c2d5 	.word	0x0800c2d5
 800c208:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800c20c:	e7db      	b.n	800c1c6 <_scanf_float+0x8e>
 800c20e:	290e      	cmp	r1, #14
 800c210:	d8c2      	bhi.n	800c198 <_scanf_float+0x60>
 800c212:	a001      	add	r0, pc, #4	; (adr r0, 800c218 <_scanf_float+0xe0>)
 800c214:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800c218:	0800c2c7 	.word	0x0800c2c7
 800c21c:	0800c199 	.word	0x0800c199
 800c220:	0800c2c7 	.word	0x0800c2c7
 800c224:	0800c35b 	.word	0x0800c35b
 800c228:	0800c199 	.word	0x0800c199
 800c22c:	0800c275 	.word	0x0800c275
 800c230:	0800c2b1 	.word	0x0800c2b1
 800c234:	0800c2b1 	.word	0x0800c2b1
 800c238:	0800c2b1 	.word	0x0800c2b1
 800c23c:	0800c2b1 	.word	0x0800c2b1
 800c240:	0800c2b1 	.word	0x0800c2b1
 800c244:	0800c2b1 	.word	0x0800c2b1
 800c248:	0800c2b1 	.word	0x0800c2b1
 800c24c:	0800c2b1 	.word	0x0800c2b1
 800c250:	0800c2b1 	.word	0x0800c2b1
 800c254:	2b6e      	cmp	r3, #110	; 0x6e
 800c256:	d809      	bhi.n	800c26c <_scanf_float+0x134>
 800c258:	2b60      	cmp	r3, #96	; 0x60
 800c25a:	d8b2      	bhi.n	800c1c2 <_scanf_float+0x8a>
 800c25c:	2b54      	cmp	r3, #84	; 0x54
 800c25e:	d077      	beq.n	800c350 <_scanf_float+0x218>
 800c260:	2b59      	cmp	r3, #89	; 0x59
 800c262:	d199      	bne.n	800c198 <_scanf_float+0x60>
 800c264:	2d07      	cmp	r5, #7
 800c266:	d197      	bne.n	800c198 <_scanf_float+0x60>
 800c268:	2508      	movs	r5, #8
 800c26a:	e029      	b.n	800c2c0 <_scanf_float+0x188>
 800c26c:	2b74      	cmp	r3, #116	; 0x74
 800c26e:	d06f      	beq.n	800c350 <_scanf_float+0x218>
 800c270:	2b79      	cmp	r3, #121	; 0x79
 800c272:	e7f6      	b.n	800c262 <_scanf_float+0x12a>
 800c274:	6821      	ldr	r1, [r4, #0]
 800c276:	05c8      	lsls	r0, r1, #23
 800c278:	d51a      	bpl.n	800c2b0 <_scanf_float+0x178>
 800c27a:	9b02      	ldr	r3, [sp, #8]
 800c27c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800c280:	6021      	str	r1, [r4, #0]
 800c282:	f109 0901 	add.w	r9, r9, #1
 800c286:	b11b      	cbz	r3, 800c290 <_scanf_float+0x158>
 800c288:	3b01      	subs	r3, #1
 800c28a:	3201      	adds	r2, #1
 800c28c:	9302      	str	r3, [sp, #8]
 800c28e:	60a2      	str	r2, [r4, #8]
 800c290:	68a3      	ldr	r3, [r4, #8]
 800c292:	3b01      	subs	r3, #1
 800c294:	60a3      	str	r3, [r4, #8]
 800c296:	6923      	ldr	r3, [r4, #16]
 800c298:	3301      	adds	r3, #1
 800c29a:	6123      	str	r3, [r4, #16]
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	3b01      	subs	r3, #1
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	607b      	str	r3, [r7, #4]
 800c2a4:	f340 8084 	ble.w	800c3b0 <_scanf_float+0x278>
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	3301      	adds	r3, #1
 800c2ac:	603b      	str	r3, [r7, #0]
 800c2ae:	e766      	b.n	800c17e <_scanf_float+0x46>
 800c2b0:	eb1a 0f05 	cmn.w	sl, r5
 800c2b4:	f47f af70 	bne.w	800c198 <_scanf_float+0x60>
 800c2b8:	6822      	ldr	r2, [r4, #0]
 800c2ba:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800c2be:	6022      	str	r2, [r4, #0]
 800c2c0:	f806 3b01 	strb.w	r3, [r6], #1
 800c2c4:	e7e4      	b.n	800c290 <_scanf_float+0x158>
 800c2c6:	6822      	ldr	r2, [r4, #0]
 800c2c8:	0610      	lsls	r0, r2, #24
 800c2ca:	f57f af65 	bpl.w	800c198 <_scanf_float+0x60>
 800c2ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c2d2:	e7f4      	b.n	800c2be <_scanf_float+0x186>
 800c2d4:	f1ba 0f00 	cmp.w	sl, #0
 800c2d8:	d10e      	bne.n	800c2f8 <_scanf_float+0x1c0>
 800c2da:	f1b9 0f00 	cmp.w	r9, #0
 800c2de:	d10e      	bne.n	800c2fe <_scanf_float+0x1c6>
 800c2e0:	6822      	ldr	r2, [r4, #0]
 800c2e2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c2e6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c2ea:	d108      	bne.n	800c2fe <_scanf_float+0x1c6>
 800c2ec:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c2f0:	6022      	str	r2, [r4, #0]
 800c2f2:	f04f 0a01 	mov.w	sl, #1
 800c2f6:	e7e3      	b.n	800c2c0 <_scanf_float+0x188>
 800c2f8:	f1ba 0f02 	cmp.w	sl, #2
 800c2fc:	d055      	beq.n	800c3aa <_scanf_float+0x272>
 800c2fe:	2d01      	cmp	r5, #1
 800c300:	d002      	beq.n	800c308 <_scanf_float+0x1d0>
 800c302:	2d04      	cmp	r5, #4
 800c304:	f47f af48 	bne.w	800c198 <_scanf_float+0x60>
 800c308:	3501      	adds	r5, #1
 800c30a:	b2ed      	uxtb	r5, r5
 800c30c:	e7d8      	b.n	800c2c0 <_scanf_float+0x188>
 800c30e:	f1ba 0f01 	cmp.w	sl, #1
 800c312:	f47f af41 	bne.w	800c198 <_scanf_float+0x60>
 800c316:	f04f 0a02 	mov.w	sl, #2
 800c31a:	e7d1      	b.n	800c2c0 <_scanf_float+0x188>
 800c31c:	b97d      	cbnz	r5, 800c33e <_scanf_float+0x206>
 800c31e:	f1b9 0f00 	cmp.w	r9, #0
 800c322:	f47f af3c 	bne.w	800c19e <_scanf_float+0x66>
 800c326:	6822      	ldr	r2, [r4, #0]
 800c328:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800c32c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800c330:	f47f af39 	bne.w	800c1a6 <_scanf_float+0x6e>
 800c334:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c338:	6022      	str	r2, [r4, #0]
 800c33a:	2501      	movs	r5, #1
 800c33c:	e7c0      	b.n	800c2c0 <_scanf_float+0x188>
 800c33e:	2d03      	cmp	r5, #3
 800c340:	d0e2      	beq.n	800c308 <_scanf_float+0x1d0>
 800c342:	2d05      	cmp	r5, #5
 800c344:	e7de      	b.n	800c304 <_scanf_float+0x1cc>
 800c346:	2d02      	cmp	r5, #2
 800c348:	f47f af26 	bne.w	800c198 <_scanf_float+0x60>
 800c34c:	2503      	movs	r5, #3
 800c34e:	e7b7      	b.n	800c2c0 <_scanf_float+0x188>
 800c350:	2d06      	cmp	r5, #6
 800c352:	f47f af21 	bne.w	800c198 <_scanf_float+0x60>
 800c356:	2507      	movs	r5, #7
 800c358:	e7b2      	b.n	800c2c0 <_scanf_float+0x188>
 800c35a:	6822      	ldr	r2, [r4, #0]
 800c35c:	0591      	lsls	r1, r2, #22
 800c35e:	f57f af1b 	bpl.w	800c198 <_scanf_float+0x60>
 800c362:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800c366:	6022      	str	r2, [r4, #0]
 800c368:	f8cd 9004 	str.w	r9, [sp, #4]
 800c36c:	e7a8      	b.n	800c2c0 <_scanf_float+0x188>
 800c36e:	6822      	ldr	r2, [r4, #0]
 800c370:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800c374:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800c378:	d006      	beq.n	800c388 <_scanf_float+0x250>
 800c37a:	0550      	lsls	r0, r2, #21
 800c37c:	f57f af0c 	bpl.w	800c198 <_scanf_float+0x60>
 800c380:	f1b9 0f00 	cmp.w	r9, #0
 800c384:	f43f af0f 	beq.w	800c1a6 <_scanf_float+0x6e>
 800c388:	0591      	lsls	r1, r2, #22
 800c38a:	bf58      	it	pl
 800c38c:	9901      	ldrpl	r1, [sp, #4]
 800c38e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800c392:	bf58      	it	pl
 800c394:	eba9 0101 	subpl.w	r1, r9, r1
 800c398:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800c39c:	bf58      	it	pl
 800c39e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800c3a2:	6022      	str	r2, [r4, #0]
 800c3a4:	f04f 0900 	mov.w	r9, #0
 800c3a8:	e78a      	b.n	800c2c0 <_scanf_float+0x188>
 800c3aa:	f04f 0a03 	mov.w	sl, #3
 800c3ae:	e787      	b.n	800c2c0 <_scanf_float+0x188>
 800c3b0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800c3b4:	4639      	mov	r1, r7
 800c3b6:	4640      	mov	r0, r8
 800c3b8:	4798      	blx	r3
 800c3ba:	2800      	cmp	r0, #0
 800c3bc:	f43f aedf 	beq.w	800c17e <_scanf_float+0x46>
 800c3c0:	e6ea      	b.n	800c198 <_scanf_float+0x60>
 800c3c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c3c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c3ca:	463a      	mov	r2, r7
 800c3cc:	4640      	mov	r0, r8
 800c3ce:	4798      	blx	r3
 800c3d0:	6923      	ldr	r3, [r4, #16]
 800c3d2:	3b01      	subs	r3, #1
 800c3d4:	6123      	str	r3, [r4, #16]
 800c3d6:	e6ec      	b.n	800c1b2 <_scanf_float+0x7a>
 800c3d8:	1e6b      	subs	r3, r5, #1
 800c3da:	2b06      	cmp	r3, #6
 800c3dc:	d825      	bhi.n	800c42a <_scanf_float+0x2f2>
 800c3de:	2d02      	cmp	r5, #2
 800c3e0:	d836      	bhi.n	800c450 <_scanf_float+0x318>
 800c3e2:	455e      	cmp	r6, fp
 800c3e4:	f67f aee8 	bls.w	800c1b8 <_scanf_float+0x80>
 800c3e8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c3ec:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c3f0:	463a      	mov	r2, r7
 800c3f2:	4640      	mov	r0, r8
 800c3f4:	4798      	blx	r3
 800c3f6:	6923      	ldr	r3, [r4, #16]
 800c3f8:	3b01      	subs	r3, #1
 800c3fa:	6123      	str	r3, [r4, #16]
 800c3fc:	e7f1      	b.n	800c3e2 <_scanf_float+0x2aa>
 800c3fe:	9802      	ldr	r0, [sp, #8]
 800c400:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c404:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800c408:	9002      	str	r0, [sp, #8]
 800c40a:	463a      	mov	r2, r7
 800c40c:	4640      	mov	r0, r8
 800c40e:	4798      	blx	r3
 800c410:	6923      	ldr	r3, [r4, #16]
 800c412:	3b01      	subs	r3, #1
 800c414:	6123      	str	r3, [r4, #16]
 800c416:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c41a:	fa5f fa8a 	uxtb.w	sl, sl
 800c41e:	f1ba 0f02 	cmp.w	sl, #2
 800c422:	d1ec      	bne.n	800c3fe <_scanf_float+0x2c6>
 800c424:	3d03      	subs	r5, #3
 800c426:	b2ed      	uxtb	r5, r5
 800c428:	1b76      	subs	r6, r6, r5
 800c42a:	6823      	ldr	r3, [r4, #0]
 800c42c:	05da      	lsls	r2, r3, #23
 800c42e:	d52f      	bpl.n	800c490 <_scanf_float+0x358>
 800c430:	055b      	lsls	r3, r3, #21
 800c432:	d510      	bpl.n	800c456 <_scanf_float+0x31e>
 800c434:	455e      	cmp	r6, fp
 800c436:	f67f aebf 	bls.w	800c1b8 <_scanf_float+0x80>
 800c43a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c43e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800c442:	463a      	mov	r2, r7
 800c444:	4640      	mov	r0, r8
 800c446:	4798      	blx	r3
 800c448:	6923      	ldr	r3, [r4, #16]
 800c44a:	3b01      	subs	r3, #1
 800c44c:	6123      	str	r3, [r4, #16]
 800c44e:	e7f1      	b.n	800c434 <_scanf_float+0x2fc>
 800c450:	46aa      	mov	sl, r5
 800c452:	9602      	str	r6, [sp, #8]
 800c454:	e7df      	b.n	800c416 <_scanf_float+0x2de>
 800c456:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800c45a:	6923      	ldr	r3, [r4, #16]
 800c45c:	2965      	cmp	r1, #101	; 0x65
 800c45e:	f103 33ff 	add.w	r3, r3, #4294967295
 800c462:	f106 35ff 	add.w	r5, r6, #4294967295
 800c466:	6123      	str	r3, [r4, #16]
 800c468:	d00c      	beq.n	800c484 <_scanf_float+0x34c>
 800c46a:	2945      	cmp	r1, #69	; 0x45
 800c46c:	d00a      	beq.n	800c484 <_scanf_float+0x34c>
 800c46e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c472:	463a      	mov	r2, r7
 800c474:	4640      	mov	r0, r8
 800c476:	4798      	blx	r3
 800c478:	6923      	ldr	r3, [r4, #16]
 800c47a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800c47e:	3b01      	subs	r3, #1
 800c480:	1eb5      	subs	r5, r6, #2
 800c482:	6123      	str	r3, [r4, #16]
 800c484:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800c488:	463a      	mov	r2, r7
 800c48a:	4640      	mov	r0, r8
 800c48c:	4798      	blx	r3
 800c48e:	462e      	mov	r6, r5
 800c490:	6825      	ldr	r5, [r4, #0]
 800c492:	f015 0510 	ands.w	r5, r5, #16
 800c496:	d158      	bne.n	800c54a <_scanf_float+0x412>
 800c498:	7035      	strb	r5, [r6, #0]
 800c49a:	6823      	ldr	r3, [r4, #0]
 800c49c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800c4a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800c4a4:	d11c      	bne.n	800c4e0 <_scanf_float+0x3a8>
 800c4a6:	9b01      	ldr	r3, [sp, #4]
 800c4a8:	454b      	cmp	r3, r9
 800c4aa:	eba3 0209 	sub.w	r2, r3, r9
 800c4ae:	d124      	bne.n	800c4fa <_scanf_float+0x3c2>
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	4659      	mov	r1, fp
 800c4b4:	4640      	mov	r0, r8
 800c4b6:	f000 ff59 	bl	800d36c <_strtod_r>
 800c4ba:	9b03      	ldr	r3, [sp, #12]
 800c4bc:	6821      	ldr	r1, [r4, #0]
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	f011 0f02 	tst.w	r1, #2
 800c4c4:	ec57 6b10 	vmov	r6, r7, d0
 800c4c8:	f103 0204 	add.w	r2, r3, #4
 800c4cc:	d020      	beq.n	800c510 <_scanf_float+0x3d8>
 800c4ce:	9903      	ldr	r1, [sp, #12]
 800c4d0:	600a      	str	r2, [r1, #0]
 800c4d2:	681b      	ldr	r3, [r3, #0]
 800c4d4:	e9c3 6700 	strd	r6, r7, [r3]
 800c4d8:	68e3      	ldr	r3, [r4, #12]
 800c4da:	3301      	adds	r3, #1
 800c4dc:	60e3      	str	r3, [r4, #12]
 800c4de:	e66c      	b.n	800c1ba <_scanf_float+0x82>
 800c4e0:	9b04      	ldr	r3, [sp, #16]
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d0e4      	beq.n	800c4b0 <_scanf_float+0x378>
 800c4e6:	9905      	ldr	r1, [sp, #20]
 800c4e8:	230a      	movs	r3, #10
 800c4ea:	462a      	mov	r2, r5
 800c4ec:	3101      	adds	r1, #1
 800c4ee:	4640      	mov	r0, r8
 800c4f0:	f000 ffc6 	bl	800d480 <_strtol_r>
 800c4f4:	9b04      	ldr	r3, [sp, #16]
 800c4f6:	9e05      	ldr	r6, [sp, #20]
 800c4f8:	1ac2      	subs	r2, r0, r3
 800c4fa:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800c4fe:	429e      	cmp	r6, r3
 800c500:	bf28      	it	cs
 800c502:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800c506:	4912      	ldr	r1, [pc, #72]	; (800c550 <_scanf_float+0x418>)
 800c508:	4630      	mov	r0, r6
 800c50a:	f000 f8a5 	bl	800c658 <siprintf>
 800c50e:	e7cf      	b.n	800c4b0 <_scanf_float+0x378>
 800c510:	f011 0f04 	tst.w	r1, #4
 800c514:	9903      	ldr	r1, [sp, #12]
 800c516:	600a      	str	r2, [r1, #0]
 800c518:	d1db      	bne.n	800c4d2 <_scanf_float+0x39a>
 800c51a:	f8d3 8000 	ldr.w	r8, [r3]
 800c51e:	ee10 2a10 	vmov	r2, s0
 800c522:	ee10 0a10 	vmov	r0, s0
 800c526:	463b      	mov	r3, r7
 800c528:	4639      	mov	r1, r7
 800c52a:	f7f4 faff 	bl	8000b2c <__aeabi_dcmpun>
 800c52e:	b128      	cbz	r0, 800c53c <_scanf_float+0x404>
 800c530:	4808      	ldr	r0, [pc, #32]	; (800c554 <_scanf_float+0x41c>)
 800c532:	f000 f88b 	bl	800c64c <nanf>
 800c536:	ed88 0a00 	vstr	s0, [r8]
 800c53a:	e7cd      	b.n	800c4d8 <_scanf_float+0x3a0>
 800c53c:	4630      	mov	r0, r6
 800c53e:	4639      	mov	r1, r7
 800c540:	f7f4 fb52 	bl	8000be8 <__aeabi_d2f>
 800c544:	f8c8 0000 	str.w	r0, [r8]
 800c548:	e7c6      	b.n	800c4d8 <_scanf_float+0x3a0>
 800c54a:	2500      	movs	r5, #0
 800c54c:	e635      	b.n	800c1ba <_scanf_float+0x82>
 800c54e:	bf00      	nop
 800c550:	08010348 	.word	0x08010348
 800c554:	08010760 	.word	0x08010760

0800c558 <cleanup_glue>:
 800c558:	b538      	push	{r3, r4, r5, lr}
 800c55a:	460c      	mov	r4, r1
 800c55c:	6809      	ldr	r1, [r1, #0]
 800c55e:	4605      	mov	r5, r0
 800c560:	b109      	cbz	r1, 800c566 <cleanup_glue+0xe>
 800c562:	f7ff fff9 	bl	800c558 <cleanup_glue>
 800c566:	4621      	mov	r1, r4
 800c568:	4628      	mov	r0, r5
 800c56a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c56e:	f002 bf5b 	b.w	800f428 <_free_r>
	...

0800c574 <_reclaim_reent>:
 800c574:	4b2c      	ldr	r3, [pc, #176]	; (800c628 <_reclaim_reent+0xb4>)
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	4283      	cmp	r3, r0
 800c57a:	b570      	push	{r4, r5, r6, lr}
 800c57c:	4604      	mov	r4, r0
 800c57e:	d051      	beq.n	800c624 <_reclaim_reent+0xb0>
 800c580:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c582:	b143      	cbz	r3, 800c596 <_reclaim_reent+0x22>
 800c584:	68db      	ldr	r3, [r3, #12]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d14a      	bne.n	800c620 <_reclaim_reent+0xac>
 800c58a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c58c:	6819      	ldr	r1, [r3, #0]
 800c58e:	b111      	cbz	r1, 800c596 <_reclaim_reent+0x22>
 800c590:	4620      	mov	r0, r4
 800c592:	f002 ff49 	bl	800f428 <_free_r>
 800c596:	6961      	ldr	r1, [r4, #20]
 800c598:	b111      	cbz	r1, 800c5a0 <_reclaim_reent+0x2c>
 800c59a:	4620      	mov	r0, r4
 800c59c:	f002 ff44 	bl	800f428 <_free_r>
 800c5a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c5a2:	b111      	cbz	r1, 800c5aa <_reclaim_reent+0x36>
 800c5a4:	4620      	mov	r0, r4
 800c5a6:	f002 ff3f 	bl	800f428 <_free_r>
 800c5aa:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c5ac:	b111      	cbz	r1, 800c5b4 <_reclaim_reent+0x40>
 800c5ae:	4620      	mov	r0, r4
 800c5b0:	f002 ff3a 	bl	800f428 <_free_r>
 800c5b4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c5b6:	b111      	cbz	r1, 800c5be <_reclaim_reent+0x4a>
 800c5b8:	4620      	mov	r0, r4
 800c5ba:	f002 ff35 	bl	800f428 <_free_r>
 800c5be:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c5c0:	b111      	cbz	r1, 800c5c8 <_reclaim_reent+0x54>
 800c5c2:	4620      	mov	r0, r4
 800c5c4:	f002 ff30 	bl	800f428 <_free_r>
 800c5c8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c5ca:	b111      	cbz	r1, 800c5d2 <_reclaim_reent+0x5e>
 800c5cc:	4620      	mov	r0, r4
 800c5ce:	f002 ff2b 	bl	800f428 <_free_r>
 800c5d2:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c5d4:	b111      	cbz	r1, 800c5dc <_reclaim_reent+0x68>
 800c5d6:	4620      	mov	r0, r4
 800c5d8:	f002 ff26 	bl	800f428 <_free_r>
 800c5dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c5de:	b111      	cbz	r1, 800c5e6 <_reclaim_reent+0x72>
 800c5e0:	4620      	mov	r0, r4
 800c5e2:	f002 ff21 	bl	800f428 <_free_r>
 800c5e6:	69a3      	ldr	r3, [r4, #24]
 800c5e8:	b1e3      	cbz	r3, 800c624 <_reclaim_reent+0xb0>
 800c5ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c5ec:	4620      	mov	r0, r4
 800c5ee:	4798      	blx	r3
 800c5f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c5f2:	b1b9      	cbz	r1, 800c624 <_reclaim_reent+0xb0>
 800c5f4:	4620      	mov	r0, r4
 800c5f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c5fa:	f7ff bfad 	b.w	800c558 <cleanup_glue>
 800c5fe:	5949      	ldr	r1, [r1, r5]
 800c600:	b941      	cbnz	r1, 800c614 <_reclaim_reent+0xa0>
 800c602:	3504      	adds	r5, #4
 800c604:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c606:	2d80      	cmp	r5, #128	; 0x80
 800c608:	68d9      	ldr	r1, [r3, #12]
 800c60a:	d1f8      	bne.n	800c5fe <_reclaim_reent+0x8a>
 800c60c:	4620      	mov	r0, r4
 800c60e:	f002 ff0b 	bl	800f428 <_free_r>
 800c612:	e7ba      	b.n	800c58a <_reclaim_reent+0x16>
 800c614:	680e      	ldr	r6, [r1, #0]
 800c616:	4620      	mov	r0, r4
 800c618:	f002 ff06 	bl	800f428 <_free_r>
 800c61c:	4631      	mov	r1, r6
 800c61e:	e7ef      	b.n	800c600 <_reclaim_reent+0x8c>
 800c620:	2500      	movs	r5, #0
 800c622:	e7ef      	b.n	800c604 <_reclaim_reent+0x90>
 800c624:	bd70      	pop	{r4, r5, r6, pc}
 800c626:	bf00      	nop
 800c628:	2000012c 	.word	0x2000012c

0800c62c <_sbrk_r>:
 800c62c:	b538      	push	{r3, r4, r5, lr}
 800c62e:	4d06      	ldr	r5, [pc, #24]	; (800c648 <_sbrk_r+0x1c>)
 800c630:	2300      	movs	r3, #0
 800c632:	4604      	mov	r4, r0
 800c634:	4608      	mov	r0, r1
 800c636:	602b      	str	r3, [r5, #0]
 800c638:	f7f6 fa8e 	bl	8002b58 <_sbrk>
 800c63c:	1c43      	adds	r3, r0, #1
 800c63e:	d102      	bne.n	800c646 <_sbrk_r+0x1a>
 800c640:	682b      	ldr	r3, [r5, #0]
 800c642:	b103      	cbz	r3, 800c646 <_sbrk_r+0x1a>
 800c644:	6023      	str	r3, [r4, #0]
 800c646:	bd38      	pop	{r3, r4, r5, pc}
 800c648:	20002b44 	.word	0x20002b44

0800c64c <nanf>:
 800c64c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c654 <nanf+0x8>
 800c650:	4770      	bx	lr
 800c652:	bf00      	nop
 800c654:	7fc00000 	.word	0x7fc00000

0800c658 <siprintf>:
 800c658:	b40e      	push	{r1, r2, r3}
 800c65a:	b500      	push	{lr}
 800c65c:	b09c      	sub	sp, #112	; 0x70
 800c65e:	ab1d      	add	r3, sp, #116	; 0x74
 800c660:	9002      	str	r0, [sp, #8]
 800c662:	9006      	str	r0, [sp, #24]
 800c664:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c668:	4809      	ldr	r0, [pc, #36]	; (800c690 <siprintf+0x38>)
 800c66a:	9107      	str	r1, [sp, #28]
 800c66c:	9104      	str	r1, [sp, #16]
 800c66e:	4909      	ldr	r1, [pc, #36]	; (800c694 <siprintf+0x3c>)
 800c670:	f853 2b04 	ldr.w	r2, [r3], #4
 800c674:	9105      	str	r1, [sp, #20]
 800c676:	6800      	ldr	r0, [r0, #0]
 800c678:	9301      	str	r3, [sp, #4]
 800c67a:	a902      	add	r1, sp, #8
 800c67c:	f002 ff80 	bl	800f580 <_svfiprintf_r>
 800c680:	9b02      	ldr	r3, [sp, #8]
 800c682:	2200      	movs	r2, #0
 800c684:	701a      	strb	r2, [r3, #0]
 800c686:	b01c      	add	sp, #112	; 0x70
 800c688:	f85d eb04 	ldr.w	lr, [sp], #4
 800c68c:	b003      	add	sp, #12
 800c68e:	4770      	bx	lr
 800c690:	2000012c 	.word	0x2000012c
 800c694:	ffff0208 	.word	0xffff0208

0800c698 <__sread>:
 800c698:	b510      	push	{r4, lr}
 800c69a:	460c      	mov	r4, r1
 800c69c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6a0:	f003 f86e 	bl	800f780 <_read_r>
 800c6a4:	2800      	cmp	r0, #0
 800c6a6:	bfab      	itete	ge
 800c6a8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c6aa:	89a3      	ldrhlt	r3, [r4, #12]
 800c6ac:	181b      	addge	r3, r3, r0
 800c6ae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c6b2:	bfac      	ite	ge
 800c6b4:	6563      	strge	r3, [r4, #84]	; 0x54
 800c6b6:	81a3      	strhlt	r3, [r4, #12]
 800c6b8:	bd10      	pop	{r4, pc}

0800c6ba <__swrite>:
 800c6ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6be:	461f      	mov	r7, r3
 800c6c0:	898b      	ldrh	r3, [r1, #12]
 800c6c2:	05db      	lsls	r3, r3, #23
 800c6c4:	4605      	mov	r5, r0
 800c6c6:	460c      	mov	r4, r1
 800c6c8:	4616      	mov	r6, r2
 800c6ca:	d505      	bpl.n	800c6d8 <__swrite+0x1e>
 800c6cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6d0:	2302      	movs	r3, #2
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	f002 f9a6 	bl	800ea24 <_lseek_r>
 800c6d8:	89a3      	ldrh	r3, [r4, #12]
 800c6da:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c6e2:	81a3      	strh	r3, [r4, #12]
 800c6e4:	4632      	mov	r2, r6
 800c6e6:	463b      	mov	r3, r7
 800c6e8:	4628      	mov	r0, r5
 800c6ea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6ee:	f000 bec9 	b.w	800d484 <_write_r>

0800c6f2 <__sseek>:
 800c6f2:	b510      	push	{r4, lr}
 800c6f4:	460c      	mov	r4, r1
 800c6f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6fa:	f002 f993 	bl	800ea24 <_lseek_r>
 800c6fe:	1c43      	adds	r3, r0, #1
 800c700:	89a3      	ldrh	r3, [r4, #12]
 800c702:	bf15      	itete	ne
 800c704:	6560      	strne	r0, [r4, #84]	; 0x54
 800c706:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c70a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c70e:	81a3      	strheq	r3, [r4, #12]
 800c710:	bf18      	it	ne
 800c712:	81a3      	strhne	r3, [r4, #12]
 800c714:	bd10      	pop	{r4, pc}

0800c716 <__sclose>:
 800c716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c71a:	f000 bec5 	b.w	800d4a8 <_close_r>

0800c71e <sulp>:
 800c71e:	b570      	push	{r4, r5, r6, lr}
 800c720:	4604      	mov	r4, r0
 800c722:	460d      	mov	r5, r1
 800c724:	ec45 4b10 	vmov	d0, r4, r5
 800c728:	4616      	mov	r6, r2
 800c72a:	f002 fd1f 	bl	800f16c <__ulp>
 800c72e:	ec51 0b10 	vmov	r0, r1, d0
 800c732:	b17e      	cbz	r6, 800c754 <sulp+0x36>
 800c734:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800c738:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	dd09      	ble.n	800c754 <sulp+0x36>
 800c740:	051b      	lsls	r3, r3, #20
 800c742:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800c746:	2400      	movs	r4, #0
 800c748:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800c74c:	4622      	mov	r2, r4
 800c74e:	462b      	mov	r3, r5
 800c750:	f7f3 ff52 	bl	80005f8 <__aeabi_dmul>
 800c754:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c758 <_strtod_l>:
 800c758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c75c:	b0a3      	sub	sp, #140	; 0x8c
 800c75e:	461f      	mov	r7, r3
 800c760:	2300      	movs	r3, #0
 800c762:	931e      	str	r3, [sp, #120]	; 0x78
 800c764:	4ba4      	ldr	r3, [pc, #656]	; (800c9f8 <_strtod_l+0x2a0>)
 800c766:	9219      	str	r2, [sp, #100]	; 0x64
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	9307      	str	r3, [sp, #28]
 800c76c:	4604      	mov	r4, r0
 800c76e:	4618      	mov	r0, r3
 800c770:	4688      	mov	r8, r1
 800c772:	f7f3 fd2d 	bl	80001d0 <strlen>
 800c776:	f04f 0a00 	mov.w	sl, #0
 800c77a:	4605      	mov	r5, r0
 800c77c:	f04f 0b00 	mov.w	fp, #0
 800c780:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800c784:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c786:	781a      	ldrb	r2, [r3, #0]
 800c788:	2a2b      	cmp	r2, #43	; 0x2b
 800c78a:	d04c      	beq.n	800c826 <_strtod_l+0xce>
 800c78c:	d839      	bhi.n	800c802 <_strtod_l+0xaa>
 800c78e:	2a0d      	cmp	r2, #13
 800c790:	d832      	bhi.n	800c7f8 <_strtod_l+0xa0>
 800c792:	2a08      	cmp	r2, #8
 800c794:	d832      	bhi.n	800c7fc <_strtod_l+0xa4>
 800c796:	2a00      	cmp	r2, #0
 800c798:	d03c      	beq.n	800c814 <_strtod_l+0xbc>
 800c79a:	2300      	movs	r3, #0
 800c79c:	930e      	str	r3, [sp, #56]	; 0x38
 800c79e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800c7a0:	7833      	ldrb	r3, [r6, #0]
 800c7a2:	2b30      	cmp	r3, #48	; 0x30
 800c7a4:	f040 80b4 	bne.w	800c910 <_strtod_l+0x1b8>
 800c7a8:	7873      	ldrb	r3, [r6, #1]
 800c7aa:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c7ae:	2b58      	cmp	r3, #88	; 0x58
 800c7b0:	d16c      	bne.n	800c88c <_strtod_l+0x134>
 800c7b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c7b4:	9301      	str	r3, [sp, #4]
 800c7b6:	ab1e      	add	r3, sp, #120	; 0x78
 800c7b8:	9702      	str	r7, [sp, #8]
 800c7ba:	9300      	str	r3, [sp, #0]
 800c7bc:	4a8f      	ldr	r2, [pc, #572]	; (800c9fc <_strtod_l+0x2a4>)
 800c7be:	ab1f      	add	r3, sp, #124	; 0x7c
 800c7c0:	a91d      	add	r1, sp, #116	; 0x74
 800c7c2:	4620      	mov	r0, r4
 800c7c4:	f001 fe22 	bl	800e40c <__gethex>
 800c7c8:	f010 0707 	ands.w	r7, r0, #7
 800c7cc:	4605      	mov	r5, r0
 800c7ce:	d005      	beq.n	800c7dc <_strtod_l+0x84>
 800c7d0:	2f06      	cmp	r7, #6
 800c7d2:	d12a      	bne.n	800c82a <_strtod_l+0xd2>
 800c7d4:	3601      	adds	r6, #1
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	961d      	str	r6, [sp, #116]	; 0x74
 800c7da:	930e      	str	r3, [sp, #56]	; 0x38
 800c7dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	f040 8596 	bne.w	800d310 <_strtod_l+0xbb8>
 800c7e4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c7e6:	b1db      	cbz	r3, 800c820 <_strtod_l+0xc8>
 800c7e8:	4652      	mov	r2, sl
 800c7ea:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c7ee:	ec43 2b10 	vmov	d0, r2, r3
 800c7f2:	b023      	add	sp, #140	; 0x8c
 800c7f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7f8:	2a20      	cmp	r2, #32
 800c7fa:	d1ce      	bne.n	800c79a <_strtod_l+0x42>
 800c7fc:	3301      	adds	r3, #1
 800c7fe:	931d      	str	r3, [sp, #116]	; 0x74
 800c800:	e7c0      	b.n	800c784 <_strtod_l+0x2c>
 800c802:	2a2d      	cmp	r2, #45	; 0x2d
 800c804:	d1c9      	bne.n	800c79a <_strtod_l+0x42>
 800c806:	2201      	movs	r2, #1
 800c808:	920e      	str	r2, [sp, #56]	; 0x38
 800c80a:	1c5a      	adds	r2, r3, #1
 800c80c:	921d      	str	r2, [sp, #116]	; 0x74
 800c80e:	785b      	ldrb	r3, [r3, #1]
 800c810:	2b00      	cmp	r3, #0
 800c812:	d1c4      	bne.n	800c79e <_strtod_l+0x46>
 800c814:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c816:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	f040 8576 	bne.w	800d30c <_strtod_l+0xbb4>
 800c820:	4652      	mov	r2, sl
 800c822:	465b      	mov	r3, fp
 800c824:	e7e3      	b.n	800c7ee <_strtod_l+0x96>
 800c826:	2200      	movs	r2, #0
 800c828:	e7ee      	b.n	800c808 <_strtod_l+0xb0>
 800c82a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800c82c:	b13a      	cbz	r2, 800c83e <_strtod_l+0xe6>
 800c82e:	2135      	movs	r1, #53	; 0x35
 800c830:	a820      	add	r0, sp, #128	; 0x80
 800c832:	f002 fda6 	bl	800f382 <__copybits>
 800c836:	991e      	ldr	r1, [sp, #120]	; 0x78
 800c838:	4620      	mov	r0, r4
 800c83a:	f002 f96b 	bl	800eb14 <_Bfree>
 800c83e:	3f01      	subs	r7, #1
 800c840:	2f05      	cmp	r7, #5
 800c842:	d807      	bhi.n	800c854 <_strtod_l+0xfc>
 800c844:	e8df f007 	tbb	[pc, r7]
 800c848:	1d180b0e 	.word	0x1d180b0e
 800c84c:	030e      	.short	0x030e
 800c84e:	f04f 0b00 	mov.w	fp, #0
 800c852:	46da      	mov	sl, fp
 800c854:	0728      	lsls	r0, r5, #28
 800c856:	d5c1      	bpl.n	800c7dc <_strtod_l+0x84>
 800c858:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800c85c:	e7be      	b.n	800c7dc <_strtod_l+0x84>
 800c85e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800c862:	e7f7      	b.n	800c854 <_strtod_l+0xfc>
 800c864:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800c868:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c86a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800c86e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800c872:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800c876:	e7ed      	b.n	800c854 <_strtod_l+0xfc>
 800c878:	f8df b184 	ldr.w	fp, [pc, #388]	; 800ca00 <_strtod_l+0x2a8>
 800c87c:	f04f 0a00 	mov.w	sl, #0
 800c880:	e7e8      	b.n	800c854 <_strtod_l+0xfc>
 800c882:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800c886:	f04f 3aff 	mov.w	sl, #4294967295
 800c88a:	e7e3      	b.n	800c854 <_strtod_l+0xfc>
 800c88c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c88e:	1c5a      	adds	r2, r3, #1
 800c890:	921d      	str	r2, [sp, #116]	; 0x74
 800c892:	785b      	ldrb	r3, [r3, #1]
 800c894:	2b30      	cmp	r3, #48	; 0x30
 800c896:	d0f9      	beq.n	800c88c <_strtod_l+0x134>
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d09f      	beq.n	800c7dc <_strtod_l+0x84>
 800c89c:	2301      	movs	r3, #1
 800c89e:	f04f 0900 	mov.w	r9, #0
 800c8a2:	9304      	str	r3, [sp, #16]
 800c8a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c8a6:	930a      	str	r3, [sp, #40]	; 0x28
 800c8a8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800c8ac:	464f      	mov	r7, r9
 800c8ae:	220a      	movs	r2, #10
 800c8b0:	981d      	ldr	r0, [sp, #116]	; 0x74
 800c8b2:	7806      	ldrb	r6, [r0, #0]
 800c8b4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800c8b8:	b2d9      	uxtb	r1, r3
 800c8ba:	2909      	cmp	r1, #9
 800c8bc:	d92a      	bls.n	800c914 <_strtod_l+0x1bc>
 800c8be:	9907      	ldr	r1, [sp, #28]
 800c8c0:	462a      	mov	r2, r5
 800c8c2:	f002 ff79 	bl	800f7b8 <strncmp>
 800c8c6:	b398      	cbz	r0, 800c930 <_strtod_l+0x1d8>
 800c8c8:	2000      	movs	r0, #0
 800c8ca:	4633      	mov	r3, r6
 800c8cc:	463d      	mov	r5, r7
 800c8ce:	9007      	str	r0, [sp, #28]
 800c8d0:	4602      	mov	r2, r0
 800c8d2:	2b65      	cmp	r3, #101	; 0x65
 800c8d4:	d001      	beq.n	800c8da <_strtod_l+0x182>
 800c8d6:	2b45      	cmp	r3, #69	; 0x45
 800c8d8:	d118      	bne.n	800c90c <_strtod_l+0x1b4>
 800c8da:	b91d      	cbnz	r5, 800c8e4 <_strtod_l+0x18c>
 800c8dc:	9b04      	ldr	r3, [sp, #16]
 800c8de:	4303      	orrs	r3, r0
 800c8e0:	d098      	beq.n	800c814 <_strtod_l+0xbc>
 800c8e2:	2500      	movs	r5, #0
 800c8e4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800c8e8:	f108 0301 	add.w	r3, r8, #1
 800c8ec:	931d      	str	r3, [sp, #116]	; 0x74
 800c8ee:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c8f2:	2b2b      	cmp	r3, #43	; 0x2b
 800c8f4:	d075      	beq.n	800c9e2 <_strtod_l+0x28a>
 800c8f6:	2b2d      	cmp	r3, #45	; 0x2d
 800c8f8:	d07b      	beq.n	800c9f2 <_strtod_l+0x29a>
 800c8fa:	f04f 0c00 	mov.w	ip, #0
 800c8fe:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800c902:	2909      	cmp	r1, #9
 800c904:	f240 8082 	bls.w	800ca0c <_strtod_l+0x2b4>
 800c908:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800c90c:	2600      	movs	r6, #0
 800c90e:	e09d      	b.n	800ca4c <_strtod_l+0x2f4>
 800c910:	2300      	movs	r3, #0
 800c912:	e7c4      	b.n	800c89e <_strtod_l+0x146>
 800c914:	2f08      	cmp	r7, #8
 800c916:	bfd8      	it	le
 800c918:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800c91a:	f100 0001 	add.w	r0, r0, #1
 800c91e:	bfda      	itte	le
 800c920:	fb02 3301 	mlale	r3, r2, r1, r3
 800c924:	9309      	strle	r3, [sp, #36]	; 0x24
 800c926:	fb02 3909 	mlagt	r9, r2, r9, r3
 800c92a:	3701      	adds	r7, #1
 800c92c:	901d      	str	r0, [sp, #116]	; 0x74
 800c92e:	e7bf      	b.n	800c8b0 <_strtod_l+0x158>
 800c930:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c932:	195a      	adds	r2, r3, r5
 800c934:	921d      	str	r2, [sp, #116]	; 0x74
 800c936:	5d5b      	ldrb	r3, [r3, r5]
 800c938:	2f00      	cmp	r7, #0
 800c93a:	d037      	beq.n	800c9ac <_strtod_l+0x254>
 800c93c:	9007      	str	r0, [sp, #28]
 800c93e:	463d      	mov	r5, r7
 800c940:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800c944:	2a09      	cmp	r2, #9
 800c946:	d912      	bls.n	800c96e <_strtod_l+0x216>
 800c948:	2201      	movs	r2, #1
 800c94a:	e7c2      	b.n	800c8d2 <_strtod_l+0x17a>
 800c94c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c94e:	1c5a      	adds	r2, r3, #1
 800c950:	921d      	str	r2, [sp, #116]	; 0x74
 800c952:	785b      	ldrb	r3, [r3, #1]
 800c954:	3001      	adds	r0, #1
 800c956:	2b30      	cmp	r3, #48	; 0x30
 800c958:	d0f8      	beq.n	800c94c <_strtod_l+0x1f4>
 800c95a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800c95e:	2a08      	cmp	r2, #8
 800c960:	f200 84db 	bhi.w	800d31a <_strtod_l+0xbc2>
 800c964:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800c966:	9007      	str	r0, [sp, #28]
 800c968:	2000      	movs	r0, #0
 800c96a:	920a      	str	r2, [sp, #40]	; 0x28
 800c96c:	4605      	mov	r5, r0
 800c96e:	3b30      	subs	r3, #48	; 0x30
 800c970:	f100 0201 	add.w	r2, r0, #1
 800c974:	d014      	beq.n	800c9a0 <_strtod_l+0x248>
 800c976:	9907      	ldr	r1, [sp, #28]
 800c978:	4411      	add	r1, r2
 800c97a:	9107      	str	r1, [sp, #28]
 800c97c:	462a      	mov	r2, r5
 800c97e:	eb00 0e05 	add.w	lr, r0, r5
 800c982:	210a      	movs	r1, #10
 800c984:	4572      	cmp	r2, lr
 800c986:	d113      	bne.n	800c9b0 <_strtod_l+0x258>
 800c988:	182a      	adds	r2, r5, r0
 800c98a:	2a08      	cmp	r2, #8
 800c98c:	f105 0501 	add.w	r5, r5, #1
 800c990:	4405      	add	r5, r0
 800c992:	dc1c      	bgt.n	800c9ce <_strtod_l+0x276>
 800c994:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c996:	220a      	movs	r2, #10
 800c998:	fb02 3301 	mla	r3, r2, r1, r3
 800c99c:	9309      	str	r3, [sp, #36]	; 0x24
 800c99e:	2200      	movs	r2, #0
 800c9a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c9a2:	1c59      	adds	r1, r3, #1
 800c9a4:	911d      	str	r1, [sp, #116]	; 0x74
 800c9a6:	785b      	ldrb	r3, [r3, #1]
 800c9a8:	4610      	mov	r0, r2
 800c9aa:	e7c9      	b.n	800c940 <_strtod_l+0x1e8>
 800c9ac:	4638      	mov	r0, r7
 800c9ae:	e7d2      	b.n	800c956 <_strtod_l+0x1fe>
 800c9b0:	2a08      	cmp	r2, #8
 800c9b2:	dc04      	bgt.n	800c9be <_strtod_l+0x266>
 800c9b4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800c9b6:	434e      	muls	r6, r1
 800c9b8:	9609      	str	r6, [sp, #36]	; 0x24
 800c9ba:	3201      	adds	r2, #1
 800c9bc:	e7e2      	b.n	800c984 <_strtod_l+0x22c>
 800c9be:	f102 0c01 	add.w	ip, r2, #1
 800c9c2:	f1bc 0f10 	cmp.w	ip, #16
 800c9c6:	bfd8      	it	le
 800c9c8:	fb01 f909 	mulle.w	r9, r1, r9
 800c9cc:	e7f5      	b.n	800c9ba <_strtod_l+0x262>
 800c9ce:	2d10      	cmp	r5, #16
 800c9d0:	bfdc      	itt	le
 800c9d2:	220a      	movle	r2, #10
 800c9d4:	fb02 3909 	mlale	r9, r2, r9, r3
 800c9d8:	e7e1      	b.n	800c99e <_strtod_l+0x246>
 800c9da:	2300      	movs	r3, #0
 800c9dc:	9307      	str	r3, [sp, #28]
 800c9de:	2201      	movs	r2, #1
 800c9e0:	e77c      	b.n	800c8dc <_strtod_l+0x184>
 800c9e2:	f04f 0c00 	mov.w	ip, #0
 800c9e6:	f108 0302 	add.w	r3, r8, #2
 800c9ea:	931d      	str	r3, [sp, #116]	; 0x74
 800c9ec:	f898 3002 	ldrb.w	r3, [r8, #2]
 800c9f0:	e785      	b.n	800c8fe <_strtod_l+0x1a6>
 800c9f2:	f04f 0c01 	mov.w	ip, #1
 800c9f6:	e7f6      	b.n	800c9e6 <_strtod_l+0x28e>
 800c9f8:	080105a0 	.word	0x080105a0
 800c9fc:	08010350 	.word	0x08010350
 800ca00:	7ff00000 	.word	0x7ff00000
 800ca04:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ca06:	1c59      	adds	r1, r3, #1
 800ca08:	911d      	str	r1, [sp, #116]	; 0x74
 800ca0a:	785b      	ldrb	r3, [r3, #1]
 800ca0c:	2b30      	cmp	r3, #48	; 0x30
 800ca0e:	d0f9      	beq.n	800ca04 <_strtod_l+0x2ac>
 800ca10:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800ca14:	2908      	cmp	r1, #8
 800ca16:	f63f af79 	bhi.w	800c90c <_strtod_l+0x1b4>
 800ca1a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800ca1e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ca20:	9308      	str	r3, [sp, #32]
 800ca22:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ca24:	1c59      	adds	r1, r3, #1
 800ca26:	911d      	str	r1, [sp, #116]	; 0x74
 800ca28:	785b      	ldrb	r3, [r3, #1]
 800ca2a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800ca2e:	2e09      	cmp	r6, #9
 800ca30:	d937      	bls.n	800caa2 <_strtod_l+0x34a>
 800ca32:	9e08      	ldr	r6, [sp, #32]
 800ca34:	1b89      	subs	r1, r1, r6
 800ca36:	2908      	cmp	r1, #8
 800ca38:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800ca3c:	dc02      	bgt.n	800ca44 <_strtod_l+0x2ec>
 800ca3e:	4576      	cmp	r6, lr
 800ca40:	bfa8      	it	ge
 800ca42:	4676      	movge	r6, lr
 800ca44:	f1bc 0f00 	cmp.w	ip, #0
 800ca48:	d000      	beq.n	800ca4c <_strtod_l+0x2f4>
 800ca4a:	4276      	negs	r6, r6
 800ca4c:	2d00      	cmp	r5, #0
 800ca4e:	d14f      	bne.n	800caf0 <_strtod_l+0x398>
 800ca50:	9904      	ldr	r1, [sp, #16]
 800ca52:	4301      	orrs	r1, r0
 800ca54:	f47f aec2 	bne.w	800c7dc <_strtod_l+0x84>
 800ca58:	2a00      	cmp	r2, #0
 800ca5a:	f47f aedb 	bne.w	800c814 <_strtod_l+0xbc>
 800ca5e:	2b69      	cmp	r3, #105	; 0x69
 800ca60:	d027      	beq.n	800cab2 <_strtod_l+0x35a>
 800ca62:	dc24      	bgt.n	800caae <_strtod_l+0x356>
 800ca64:	2b49      	cmp	r3, #73	; 0x49
 800ca66:	d024      	beq.n	800cab2 <_strtod_l+0x35a>
 800ca68:	2b4e      	cmp	r3, #78	; 0x4e
 800ca6a:	f47f aed3 	bne.w	800c814 <_strtod_l+0xbc>
 800ca6e:	499e      	ldr	r1, [pc, #632]	; (800cce8 <_strtod_l+0x590>)
 800ca70:	a81d      	add	r0, sp, #116	; 0x74
 800ca72:	f001 ff23 	bl	800e8bc <__match>
 800ca76:	2800      	cmp	r0, #0
 800ca78:	f43f aecc 	beq.w	800c814 <_strtod_l+0xbc>
 800ca7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800ca7e:	781b      	ldrb	r3, [r3, #0]
 800ca80:	2b28      	cmp	r3, #40	; 0x28
 800ca82:	d12d      	bne.n	800cae0 <_strtod_l+0x388>
 800ca84:	4999      	ldr	r1, [pc, #612]	; (800ccec <_strtod_l+0x594>)
 800ca86:	aa20      	add	r2, sp, #128	; 0x80
 800ca88:	a81d      	add	r0, sp, #116	; 0x74
 800ca8a:	f001 ff2b 	bl	800e8e4 <__hexnan>
 800ca8e:	2805      	cmp	r0, #5
 800ca90:	d126      	bne.n	800cae0 <_strtod_l+0x388>
 800ca92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca94:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800ca98:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800ca9c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800caa0:	e69c      	b.n	800c7dc <_strtod_l+0x84>
 800caa2:	210a      	movs	r1, #10
 800caa4:	fb01 3e0e 	mla	lr, r1, lr, r3
 800caa8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800caac:	e7b9      	b.n	800ca22 <_strtod_l+0x2ca>
 800caae:	2b6e      	cmp	r3, #110	; 0x6e
 800cab0:	e7db      	b.n	800ca6a <_strtod_l+0x312>
 800cab2:	498f      	ldr	r1, [pc, #572]	; (800ccf0 <_strtod_l+0x598>)
 800cab4:	a81d      	add	r0, sp, #116	; 0x74
 800cab6:	f001 ff01 	bl	800e8bc <__match>
 800caba:	2800      	cmp	r0, #0
 800cabc:	f43f aeaa 	beq.w	800c814 <_strtod_l+0xbc>
 800cac0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cac2:	498c      	ldr	r1, [pc, #560]	; (800ccf4 <_strtod_l+0x59c>)
 800cac4:	3b01      	subs	r3, #1
 800cac6:	a81d      	add	r0, sp, #116	; 0x74
 800cac8:	931d      	str	r3, [sp, #116]	; 0x74
 800caca:	f001 fef7 	bl	800e8bc <__match>
 800cace:	b910      	cbnz	r0, 800cad6 <_strtod_l+0x37e>
 800cad0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cad2:	3301      	adds	r3, #1
 800cad4:	931d      	str	r3, [sp, #116]	; 0x74
 800cad6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800cd04 <_strtod_l+0x5ac>
 800cada:	f04f 0a00 	mov.w	sl, #0
 800cade:	e67d      	b.n	800c7dc <_strtod_l+0x84>
 800cae0:	4885      	ldr	r0, [pc, #532]	; (800ccf8 <_strtod_l+0x5a0>)
 800cae2:	f002 fe61 	bl	800f7a8 <nan>
 800cae6:	ed8d 0b04 	vstr	d0, [sp, #16]
 800caea:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800caee:	e675      	b.n	800c7dc <_strtod_l+0x84>
 800caf0:	9b07      	ldr	r3, [sp, #28]
 800caf2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800caf4:	1af3      	subs	r3, r6, r3
 800caf6:	2f00      	cmp	r7, #0
 800caf8:	bf08      	it	eq
 800cafa:	462f      	moveq	r7, r5
 800cafc:	2d10      	cmp	r5, #16
 800cafe:	9308      	str	r3, [sp, #32]
 800cb00:	46a8      	mov	r8, r5
 800cb02:	bfa8      	it	ge
 800cb04:	f04f 0810 	movge.w	r8, #16
 800cb08:	f7f3 fcfc 	bl	8000504 <__aeabi_ui2d>
 800cb0c:	2d09      	cmp	r5, #9
 800cb0e:	4682      	mov	sl, r0
 800cb10:	468b      	mov	fp, r1
 800cb12:	dd13      	ble.n	800cb3c <_strtod_l+0x3e4>
 800cb14:	4b79      	ldr	r3, [pc, #484]	; (800ccfc <_strtod_l+0x5a4>)
 800cb16:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800cb1a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800cb1e:	f7f3 fd6b 	bl	80005f8 <__aeabi_dmul>
 800cb22:	4682      	mov	sl, r0
 800cb24:	4648      	mov	r0, r9
 800cb26:	468b      	mov	fp, r1
 800cb28:	f7f3 fcec 	bl	8000504 <__aeabi_ui2d>
 800cb2c:	4602      	mov	r2, r0
 800cb2e:	460b      	mov	r3, r1
 800cb30:	4650      	mov	r0, sl
 800cb32:	4659      	mov	r1, fp
 800cb34:	f7f3 fbaa 	bl	800028c <__adddf3>
 800cb38:	4682      	mov	sl, r0
 800cb3a:	468b      	mov	fp, r1
 800cb3c:	2d0f      	cmp	r5, #15
 800cb3e:	dc38      	bgt.n	800cbb2 <_strtod_l+0x45a>
 800cb40:	9b08      	ldr	r3, [sp, #32]
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	f43f ae4a 	beq.w	800c7dc <_strtod_l+0x84>
 800cb48:	dd24      	ble.n	800cb94 <_strtod_l+0x43c>
 800cb4a:	2b16      	cmp	r3, #22
 800cb4c:	dc0b      	bgt.n	800cb66 <_strtod_l+0x40e>
 800cb4e:	4d6b      	ldr	r5, [pc, #428]	; (800ccfc <_strtod_l+0x5a4>)
 800cb50:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800cb54:	e9d5 0100 	ldrd	r0, r1, [r5]
 800cb58:	4652      	mov	r2, sl
 800cb5a:	465b      	mov	r3, fp
 800cb5c:	f7f3 fd4c 	bl	80005f8 <__aeabi_dmul>
 800cb60:	4682      	mov	sl, r0
 800cb62:	468b      	mov	fp, r1
 800cb64:	e63a      	b.n	800c7dc <_strtod_l+0x84>
 800cb66:	9a08      	ldr	r2, [sp, #32]
 800cb68:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800cb6c:	4293      	cmp	r3, r2
 800cb6e:	db20      	blt.n	800cbb2 <_strtod_l+0x45a>
 800cb70:	4c62      	ldr	r4, [pc, #392]	; (800ccfc <_strtod_l+0x5a4>)
 800cb72:	f1c5 050f 	rsb	r5, r5, #15
 800cb76:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cb7a:	4652      	mov	r2, sl
 800cb7c:	465b      	mov	r3, fp
 800cb7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cb82:	f7f3 fd39 	bl	80005f8 <__aeabi_dmul>
 800cb86:	9b08      	ldr	r3, [sp, #32]
 800cb88:	1b5d      	subs	r5, r3, r5
 800cb8a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cb8e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cb92:	e7e3      	b.n	800cb5c <_strtod_l+0x404>
 800cb94:	9b08      	ldr	r3, [sp, #32]
 800cb96:	3316      	adds	r3, #22
 800cb98:	db0b      	blt.n	800cbb2 <_strtod_l+0x45a>
 800cb9a:	9b07      	ldr	r3, [sp, #28]
 800cb9c:	4a57      	ldr	r2, [pc, #348]	; (800ccfc <_strtod_l+0x5a4>)
 800cb9e:	1b9e      	subs	r6, r3, r6
 800cba0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800cba4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cba8:	4650      	mov	r0, sl
 800cbaa:	4659      	mov	r1, fp
 800cbac:	f7f3 fe4e 	bl	800084c <__aeabi_ddiv>
 800cbb0:	e7d6      	b.n	800cb60 <_strtod_l+0x408>
 800cbb2:	9b08      	ldr	r3, [sp, #32]
 800cbb4:	eba5 0808 	sub.w	r8, r5, r8
 800cbb8:	4498      	add	r8, r3
 800cbba:	f1b8 0f00 	cmp.w	r8, #0
 800cbbe:	dd71      	ble.n	800cca4 <_strtod_l+0x54c>
 800cbc0:	f018 030f 	ands.w	r3, r8, #15
 800cbc4:	d00a      	beq.n	800cbdc <_strtod_l+0x484>
 800cbc6:	494d      	ldr	r1, [pc, #308]	; (800ccfc <_strtod_l+0x5a4>)
 800cbc8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cbcc:	4652      	mov	r2, sl
 800cbce:	465b      	mov	r3, fp
 800cbd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cbd4:	f7f3 fd10 	bl	80005f8 <__aeabi_dmul>
 800cbd8:	4682      	mov	sl, r0
 800cbda:	468b      	mov	fp, r1
 800cbdc:	f038 080f 	bics.w	r8, r8, #15
 800cbe0:	d04d      	beq.n	800cc7e <_strtod_l+0x526>
 800cbe2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800cbe6:	dd22      	ble.n	800cc2e <_strtod_l+0x4d6>
 800cbe8:	2500      	movs	r5, #0
 800cbea:	462e      	mov	r6, r5
 800cbec:	9509      	str	r5, [sp, #36]	; 0x24
 800cbee:	9507      	str	r5, [sp, #28]
 800cbf0:	2322      	movs	r3, #34	; 0x22
 800cbf2:	f8df b110 	ldr.w	fp, [pc, #272]	; 800cd04 <_strtod_l+0x5ac>
 800cbf6:	6023      	str	r3, [r4, #0]
 800cbf8:	f04f 0a00 	mov.w	sl, #0
 800cbfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbfe:	2b00      	cmp	r3, #0
 800cc00:	f43f adec 	beq.w	800c7dc <_strtod_l+0x84>
 800cc04:	991e      	ldr	r1, [sp, #120]	; 0x78
 800cc06:	4620      	mov	r0, r4
 800cc08:	f001 ff84 	bl	800eb14 <_Bfree>
 800cc0c:	9907      	ldr	r1, [sp, #28]
 800cc0e:	4620      	mov	r0, r4
 800cc10:	f001 ff80 	bl	800eb14 <_Bfree>
 800cc14:	4631      	mov	r1, r6
 800cc16:	4620      	mov	r0, r4
 800cc18:	f001 ff7c 	bl	800eb14 <_Bfree>
 800cc1c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cc1e:	4620      	mov	r0, r4
 800cc20:	f001 ff78 	bl	800eb14 <_Bfree>
 800cc24:	4629      	mov	r1, r5
 800cc26:	4620      	mov	r0, r4
 800cc28:	f001 ff74 	bl	800eb14 <_Bfree>
 800cc2c:	e5d6      	b.n	800c7dc <_strtod_l+0x84>
 800cc2e:	2300      	movs	r3, #0
 800cc30:	ea4f 1828 	mov.w	r8, r8, asr #4
 800cc34:	4650      	mov	r0, sl
 800cc36:	4659      	mov	r1, fp
 800cc38:	4699      	mov	r9, r3
 800cc3a:	f1b8 0f01 	cmp.w	r8, #1
 800cc3e:	dc21      	bgt.n	800cc84 <_strtod_l+0x52c>
 800cc40:	b10b      	cbz	r3, 800cc46 <_strtod_l+0x4ee>
 800cc42:	4682      	mov	sl, r0
 800cc44:	468b      	mov	fp, r1
 800cc46:	4b2e      	ldr	r3, [pc, #184]	; (800cd00 <_strtod_l+0x5a8>)
 800cc48:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800cc4c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800cc50:	4652      	mov	r2, sl
 800cc52:	465b      	mov	r3, fp
 800cc54:	e9d9 0100 	ldrd	r0, r1, [r9]
 800cc58:	f7f3 fcce 	bl	80005f8 <__aeabi_dmul>
 800cc5c:	4b29      	ldr	r3, [pc, #164]	; (800cd04 <_strtod_l+0x5ac>)
 800cc5e:	460a      	mov	r2, r1
 800cc60:	400b      	ands	r3, r1
 800cc62:	4929      	ldr	r1, [pc, #164]	; (800cd08 <_strtod_l+0x5b0>)
 800cc64:	428b      	cmp	r3, r1
 800cc66:	4682      	mov	sl, r0
 800cc68:	d8be      	bhi.n	800cbe8 <_strtod_l+0x490>
 800cc6a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800cc6e:	428b      	cmp	r3, r1
 800cc70:	bf86      	itte	hi
 800cc72:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800cd0c <_strtod_l+0x5b4>
 800cc76:	f04f 3aff 	movhi.w	sl, #4294967295
 800cc7a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800cc7e:	2300      	movs	r3, #0
 800cc80:	9304      	str	r3, [sp, #16]
 800cc82:	e081      	b.n	800cd88 <_strtod_l+0x630>
 800cc84:	f018 0f01 	tst.w	r8, #1
 800cc88:	d007      	beq.n	800cc9a <_strtod_l+0x542>
 800cc8a:	4b1d      	ldr	r3, [pc, #116]	; (800cd00 <_strtod_l+0x5a8>)
 800cc8c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800cc90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc94:	f7f3 fcb0 	bl	80005f8 <__aeabi_dmul>
 800cc98:	2301      	movs	r3, #1
 800cc9a:	f109 0901 	add.w	r9, r9, #1
 800cc9e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800cca2:	e7ca      	b.n	800cc3a <_strtod_l+0x4e2>
 800cca4:	d0eb      	beq.n	800cc7e <_strtod_l+0x526>
 800cca6:	f1c8 0800 	rsb	r8, r8, #0
 800ccaa:	f018 020f 	ands.w	r2, r8, #15
 800ccae:	d00a      	beq.n	800ccc6 <_strtod_l+0x56e>
 800ccb0:	4b12      	ldr	r3, [pc, #72]	; (800ccfc <_strtod_l+0x5a4>)
 800ccb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ccb6:	4650      	mov	r0, sl
 800ccb8:	4659      	mov	r1, fp
 800ccba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccbe:	f7f3 fdc5 	bl	800084c <__aeabi_ddiv>
 800ccc2:	4682      	mov	sl, r0
 800ccc4:	468b      	mov	fp, r1
 800ccc6:	ea5f 1828 	movs.w	r8, r8, asr #4
 800ccca:	d0d8      	beq.n	800cc7e <_strtod_l+0x526>
 800cccc:	f1b8 0f1f 	cmp.w	r8, #31
 800ccd0:	dd1e      	ble.n	800cd10 <_strtod_l+0x5b8>
 800ccd2:	2500      	movs	r5, #0
 800ccd4:	462e      	mov	r6, r5
 800ccd6:	9509      	str	r5, [sp, #36]	; 0x24
 800ccd8:	9507      	str	r5, [sp, #28]
 800ccda:	2322      	movs	r3, #34	; 0x22
 800ccdc:	f04f 0a00 	mov.w	sl, #0
 800cce0:	f04f 0b00 	mov.w	fp, #0
 800cce4:	6023      	str	r3, [r4, #0]
 800cce6:	e789      	b.n	800cbfc <_strtod_l+0x4a4>
 800cce8:	08010321 	.word	0x08010321
 800ccec:	08010364 	.word	0x08010364
 800ccf0:	08010319 	.word	0x08010319
 800ccf4:	080104a4 	.word	0x080104a4
 800ccf8:	08010760 	.word	0x08010760
 800ccfc:	08010640 	.word	0x08010640
 800cd00:	08010618 	.word	0x08010618
 800cd04:	7ff00000 	.word	0x7ff00000
 800cd08:	7ca00000 	.word	0x7ca00000
 800cd0c:	7fefffff 	.word	0x7fefffff
 800cd10:	f018 0310 	ands.w	r3, r8, #16
 800cd14:	bf18      	it	ne
 800cd16:	236a      	movne	r3, #106	; 0x6a
 800cd18:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800d0d0 <_strtod_l+0x978>
 800cd1c:	9304      	str	r3, [sp, #16]
 800cd1e:	4650      	mov	r0, sl
 800cd20:	4659      	mov	r1, fp
 800cd22:	2300      	movs	r3, #0
 800cd24:	f018 0f01 	tst.w	r8, #1
 800cd28:	d004      	beq.n	800cd34 <_strtod_l+0x5dc>
 800cd2a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800cd2e:	f7f3 fc63 	bl	80005f8 <__aeabi_dmul>
 800cd32:	2301      	movs	r3, #1
 800cd34:	ea5f 0868 	movs.w	r8, r8, asr #1
 800cd38:	f109 0908 	add.w	r9, r9, #8
 800cd3c:	d1f2      	bne.n	800cd24 <_strtod_l+0x5cc>
 800cd3e:	b10b      	cbz	r3, 800cd44 <_strtod_l+0x5ec>
 800cd40:	4682      	mov	sl, r0
 800cd42:	468b      	mov	fp, r1
 800cd44:	9b04      	ldr	r3, [sp, #16]
 800cd46:	b1bb      	cbz	r3, 800cd78 <_strtod_l+0x620>
 800cd48:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800cd4c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800cd50:	2b00      	cmp	r3, #0
 800cd52:	4659      	mov	r1, fp
 800cd54:	dd10      	ble.n	800cd78 <_strtod_l+0x620>
 800cd56:	2b1f      	cmp	r3, #31
 800cd58:	f340 8128 	ble.w	800cfac <_strtod_l+0x854>
 800cd5c:	2b34      	cmp	r3, #52	; 0x34
 800cd5e:	bfde      	ittt	le
 800cd60:	3b20      	suble	r3, #32
 800cd62:	f04f 32ff 	movle.w	r2, #4294967295
 800cd66:	fa02 f303 	lslle.w	r3, r2, r3
 800cd6a:	f04f 0a00 	mov.w	sl, #0
 800cd6e:	bfcc      	ite	gt
 800cd70:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800cd74:	ea03 0b01 	andle.w	fp, r3, r1
 800cd78:	2200      	movs	r2, #0
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	4650      	mov	r0, sl
 800cd7e:	4659      	mov	r1, fp
 800cd80:	f7f3 fea2 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd84:	2800      	cmp	r0, #0
 800cd86:	d1a4      	bne.n	800ccd2 <_strtod_l+0x57a>
 800cd88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd8a:	9300      	str	r3, [sp, #0]
 800cd8c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800cd8e:	462b      	mov	r3, r5
 800cd90:	463a      	mov	r2, r7
 800cd92:	4620      	mov	r0, r4
 800cd94:	f001 ff2a 	bl	800ebec <__s2b>
 800cd98:	9009      	str	r0, [sp, #36]	; 0x24
 800cd9a:	2800      	cmp	r0, #0
 800cd9c:	f43f af24 	beq.w	800cbe8 <_strtod_l+0x490>
 800cda0:	9b07      	ldr	r3, [sp, #28]
 800cda2:	1b9e      	subs	r6, r3, r6
 800cda4:	9b08      	ldr	r3, [sp, #32]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	bfb4      	ite	lt
 800cdaa:	4633      	movlt	r3, r6
 800cdac:	2300      	movge	r3, #0
 800cdae:	9310      	str	r3, [sp, #64]	; 0x40
 800cdb0:	9b08      	ldr	r3, [sp, #32]
 800cdb2:	2500      	movs	r5, #0
 800cdb4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800cdb8:	9318      	str	r3, [sp, #96]	; 0x60
 800cdba:	462e      	mov	r6, r5
 800cdbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdbe:	4620      	mov	r0, r4
 800cdc0:	6859      	ldr	r1, [r3, #4]
 800cdc2:	f001 fe67 	bl	800ea94 <_Balloc>
 800cdc6:	9007      	str	r0, [sp, #28]
 800cdc8:	2800      	cmp	r0, #0
 800cdca:	f43f af11 	beq.w	800cbf0 <_strtod_l+0x498>
 800cdce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdd0:	691a      	ldr	r2, [r3, #16]
 800cdd2:	3202      	adds	r2, #2
 800cdd4:	f103 010c 	add.w	r1, r3, #12
 800cdd8:	0092      	lsls	r2, r2, #2
 800cdda:	300c      	adds	r0, #12
 800cddc:	f7fe fcd1 	bl	800b782 <memcpy>
 800cde0:	ec4b ab10 	vmov	d0, sl, fp
 800cde4:	aa20      	add	r2, sp, #128	; 0x80
 800cde6:	a91f      	add	r1, sp, #124	; 0x7c
 800cde8:	4620      	mov	r0, r4
 800cdea:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800cdee:	f002 fa39 	bl	800f264 <__d2b>
 800cdf2:	901e      	str	r0, [sp, #120]	; 0x78
 800cdf4:	2800      	cmp	r0, #0
 800cdf6:	f43f aefb 	beq.w	800cbf0 <_strtod_l+0x498>
 800cdfa:	2101      	movs	r1, #1
 800cdfc:	4620      	mov	r0, r4
 800cdfe:	f001 ff8f 	bl	800ed20 <__i2b>
 800ce02:	4606      	mov	r6, r0
 800ce04:	2800      	cmp	r0, #0
 800ce06:	f43f aef3 	beq.w	800cbf0 <_strtod_l+0x498>
 800ce0a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800ce0c:	9904      	ldr	r1, [sp, #16]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	bfab      	itete	ge
 800ce12:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800ce14:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800ce16:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800ce18:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800ce1c:	bfac      	ite	ge
 800ce1e:	eb03 0902 	addge.w	r9, r3, r2
 800ce22:	1ad7      	sublt	r7, r2, r3
 800ce24:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ce26:	eba3 0801 	sub.w	r8, r3, r1
 800ce2a:	4490      	add	r8, r2
 800ce2c:	4ba3      	ldr	r3, [pc, #652]	; (800d0bc <_strtod_l+0x964>)
 800ce2e:	f108 38ff 	add.w	r8, r8, #4294967295
 800ce32:	4598      	cmp	r8, r3
 800ce34:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ce38:	f280 80cc 	bge.w	800cfd4 <_strtod_l+0x87c>
 800ce3c:	eba3 0308 	sub.w	r3, r3, r8
 800ce40:	2b1f      	cmp	r3, #31
 800ce42:	eba2 0203 	sub.w	r2, r2, r3
 800ce46:	f04f 0101 	mov.w	r1, #1
 800ce4a:	f300 80b6 	bgt.w	800cfba <_strtod_l+0x862>
 800ce4e:	fa01 f303 	lsl.w	r3, r1, r3
 800ce52:	9311      	str	r3, [sp, #68]	; 0x44
 800ce54:	2300      	movs	r3, #0
 800ce56:	930c      	str	r3, [sp, #48]	; 0x30
 800ce58:	eb09 0802 	add.w	r8, r9, r2
 800ce5c:	9b04      	ldr	r3, [sp, #16]
 800ce5e:	45c1      	cmp	r9, r8
 800ce60:	4417      	add	r7, r2
 800ce62:	441f      	add	r7, r3
 800ce64:	464b      	mov	r3, r9
 800ce66:	bfa8      	it	ge
 800ce68:	4643      	movge	r3, r8
 800ce6a:	42bb      	cmp	r3, r7
 800ce6c:	bfa8      	it	ge
 800ce6e:	463b      	movge	r3, r7
 800ce70:	2b00      	cmp	r3, #0
 800ce72:	bfc2      	ittt	gt
 800ce74:	eba8 0803 	subgt.w	r8, r8, r3
 800ce78:	1aff      	subgt	r7, r7, r3
 800ce7a:	eba9 0903 	subgt.w	r9, r9, r3
 800ce7e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	dd17      	ble.n	800ceb4 <_strtod_l+0x75c>
 800ce84:	4631      	mov	r1, r6
 800ce86:	461a      	mov	r2, r3
 800ce88:	4620      	mov	r0, r4
 800ce8a:	f002 f805 	bl	800ee98 <__pow5mult>
 800ce8e:	4606      	mov	r6, r0
 800ce90:	2800      	cmp	r0, #0
 800ce92:	f43f aead 	beq.w	800cbf0 <_strtod_l+0x498>
 800ce96:	4601      	mov	r1, r0
 800ce98:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ce9a:	4620      	mov	r0, r4
 800ce9c:	f001 ff56 	bl	800ed4c <__multiply>
 800cea0:	900f      	str	r0, [sp, #60]	; 0x3c
 800cea2:	2800      	cmp	r0, #0
 800cea4:	f43f aea4 	beq.w	800cbf0 <_strtod_l+0x498>
 800cea8:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ceaa:	4620      	mov	r0, r4
 800ceac:	f001 fe32 	bl	800eb14 <_Bfree>
 800ceb0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ceb2:	931e      	str	r3, [sp, #120]	; 0x78
 800ceb4:	f1b8 0f00 	cmp.w	r8, #0
 800ceb8:	f300 8091 	bgt.w	800cfde <_strtod_l+0x886>
 800cebc:	9b08      	ldr	r3, [sp, #32]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	dd08      	ble.n	800ced4 <_strtod_l+0x77c>
 800cec2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cec4:	9907      	ldr	r1, [sp, #28]
 800cec6:	4620      	mov	r0, r4
 800cec8:	f001 ffe6 	bl	800ee98 <__pow5mult>
 800cecc:	9007      	str	r0, [sp, #28]
 800cece:	2800      	cmp	r0, #0
 800ced0:	f43f ae8e 	beq.w	800cbf0 <_strtod_l+0x498>
 800ced4:	2f00      	cmp	r7, #0
 800ced6:	dd08      	ble.n	800ceea <_strtod_l+0x792>
 800ced8:	9907      	ldr	r1, [sp, #28]
 800ceda:	463a      	mov	r2, r7
 800cedc:	4620      	mov	r0, r4
 800cede:	f002 f835 	bl	800ef4c <__lshift>
 800cee2:	9007      	str	r0, [sp, #28]
 800cee4:	2800      	cmp	r0, #0
 800cee6:	f43f ae83 	beq.w	800cbf0 <_strtod_l+0x498>
 800ceea:	f1b9 0f00 	cmp.w	r9, #0
 800ceee:	dd08      	ble.n	800cf02 <_strtod_l+0x7aa>
 800cef0:	4631      	mov	r1, r6
 800cef2:	464a      	mov	r2, r9
 800cef4:	4620      	mov	r0, r4
 800cef6:	f002 f829 	bl	800ef4c <__lshift>
 800cefa:	4606      	mov	r6, r0
 800cefc:	2800      	cmp	r0, #0
 800cefe:	f43f ae77 	beq.w	800cbf0 <_strtod_l+0x498>
 800cf02:	9a07      	ldr	r2, [sp, #28]
 800cf04:	991e      	ldr	r1, [sp, #120]	; 0x78
 800cf06:	4620      	mov	r0, r4
 800cf08:	f002 f8a8 	bl	800f05c <__mdiff>
 800cf0c:	4605      	mov	r5, r0
 800cf0e:	2800      	cmp	r0, #0
 800cf10:	f43f ae6e 	beq.w	800cbf0 <_strtod_l+0x498>
 800cf14:	68c3      	ldr	r3, [r0, #12]
 800cf16:	930f      	str	r3, [sp, #60]	; 0x3c
 800cf18:	2300      	movs	r3, #0
 800cf1a:	60c3      	str	r3, [r0, #12]
 800cf1c:	4631      	mov	r1, r6
 800cf1e:	f002 f881 	bl	800f024 <__mcmp>
 800cf22:	2800      	cmp	r0, #0
 800cf24:	da65      	bge.n	800cff2 <_strtod_l+0x89a>
 800cf26:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cf28:	ea53 030a 	orrs.w	r3, r3, sl
 800cf2c:	f040 8087 	bne.w	800d03e <_strtod_l+0x8e6>
 800cf30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	f040 8082 	bne.w	800d03e <_strtod_l+0x8e6>
 800cf3a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800cf3e:	0d1b      	lsrs	r3, r3, #20
 800cf40:	051b      	lsls	r3, r3, #20
 800cf42:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800cf46:	d97a      	bls.n	800d03e <_strtod_l+0x8e6>
 800cf48:	696b      	ldr	r3, [r5, #20]
 800cf4a:	b913      	cbnz	r3, 800cf52 <_strtod_l+0x7fa>
 800cf4c:	692b      	ldr	r3, [r5, #16]
 800cf4e:	2b01      	cmp	r3, #1
 800cf50:	dd75      	ble.n	800d03e <_strtod_l+0x8e6>
 800cf52:	4629      	mov	r1, r5
 800cf54:	2201      	movs	r2, #1
 800cf56:	4620      	mov	r0, r4
 800cf58:	f001 fff8 	bl	800ef4c <__lshift>
 800cf5c:	4631      	mov	r1, r6
 800cf5e:	4605      	mov	r5, r0
 800cf60:	f002 f860 	bl	800f024 <__mcmp>
 800cf64:	2800      	cmp	r0, #0
 800cf66:	dd6a      	ble.n	800d03e <_strtod_l+0x8e6>
 800cf68:	9904      	ldr	r1, [sp, #16]
 800cf6a:	4a55      	ldr	r2, [pc, #340]	; (800d0c0 <_strtod_l+0x968>)
 800cf6c:	465b      	mov	r3, fp
 800cf6e:	2900      	cmp	r1, #0
 800cf70:	f000 8085 	beq.w	800d07e <_strtod_l+0x926>
 800cf74:	ea02 010b 	and.w	r1, r2, fp
 800cf78:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800cf7c:	dc7f      	bgt.n	800d07e <_strtod_l+0x926>
 800cf7e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800cf82:	f77f aeaa 	ble.w	800ccda <_strtod_l+0x582>
 800cf86:	4a4f      	ldr	r2, [pc, #316]	; (800d0c4 <_strtod_l+0x96c>)
 800cf88:	2300      	movs	r3, #0
 800cf8a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800cf8e:	4650      	mov	r0, sl
 800cf90:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800cf94:	4659      	mov	r1, fp
 800cf96:	f7f3 fb2f 	bl	80005f8 <__aeabi_dmul>
 800cf9a:	460b      	mov	r3, r1
 800cf9c:	4303      	orrs	r3, r0
 800cf9e:	bf08      	it	eq
 800cfa0:	2322      	moveq	r3, #34	; 0x22
 800cfa2:	4682      	mov	sl, r0
 800cfa4:	468b      	mov	fp, r1
 800cfa6:	bf08      	it	eq
 800cfa8:	6023      	streq	r3, [r4, #0]
 800cfaa:	e62b      	b.n	800cc04 <_strtod_l+0x4ac>
 800cfac:	f04f 32ff 	mov.w	r2, #4294967295
 800cfb0:	fa02 f303 	lsl.w	r3, r2, r3
 800cfb4:	ea03 0a0a 	and.w	sl, r3, sl
 800cfb8:	e6de      	b.n	800cd78 <_strtod_l+0x620>
 800cfba:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800cfbe:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800cfc2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800cfc6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800cfca:	fa01 f308 	lsl.w	r3, r1, r8
 800cfce:	930c      	str	r3, [sp, #48]	; 0x30
 800cfd0:	9111      	str	r1, [sp, #68]	; 0x44
 800cfd2:	e741      	b.n	800ce58 <_strtod_l+0x700>
 800cfd4:	2300      	movs	r3, #0
 800cfd6:	930c      	str	r3, [sp, #48]	; 0x30
 800cfd8:	2301      	movs	r3, #1
 800cfda:	9311      	str	r3, [sp, #68]	; 0x44
 800cfdc:	e73c      	b.n	800ce58 <_strtod_l+0x700>
 800cfde:	991e      	ldr	r1, [sp, #120]	; 0x78
 800cfe0:	4642      	mov	r2, r8
 800cfe2:	4620      	mov	r0, r4
 800cfe4:	f001 ffb2 	bl	800ef4c <__lshift>
 800cfe8:	901e      	str	r0, [sp, #120]	; 0x78
 800cfea:	2800      	cmp	r0, #0
 800cfec:	f47f af66 	bne.w	800cebc <_strtod_l+0x764>
 800cff0:	e5fe      	b.n	800cbf0 <_strtod_l+0x498>
 800cff2:	465f      	mov	r7, fp
 800cff4:	d16e      	bne.n	800d0d4 <_strtod_l+0x97c>
 800cff6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cff8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800cffc:	b342      	cbz	r2, 800d050 <_strtod_l+0x8f8>
 800cffe:	4a32      	ldr	r2, [pc, #200]	; (800d0c8 <_strtod_l+0x970>)
 800d000:	4293      	cmp	r3, r2
 800d002:	d128      	bne.n	800d056 <_strtod_l+0x8fe>
 800d004:	9b04      	ldr	r3, [sp, #16]
 800d006:	4650      	mov	r0, sl
 800d008:	b1eb      	cbz	r3, 800d046 <_strtod_l+0x8ee>
 800d00a:	4a2d      	ldr	r2, [pc, #180]	; (800d0c0 <_strtod_l+0x968>)
 800d00c:	403a      	ands	r2, r7
 800d00e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800d012:	f04f 31ff 	mov.w	r1, #4294967295
 800d016:	d819      	bhi.n	800d04c <_strtod_l+0x8f4>
 800d018:	0d12      	lsrs	r2, r2, #20
 800d01a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d01e:	fa01 f303 	lsl.w	r3, r1, r3
 800d022:	4298      	cmp	r0, r3
 800d024:	d117      	bne.n	800d056 <_strtod_l+0x8fe>
 800d026:	4b29      	ldr	r3, [pc, #164]	; (800d0cc <_strtod_l+0x974>)
 800d028:	429f      	cmp	r7, r3
 800d02a:	d102      	bne.n	800d032 <_strtod_l+0x8da>
 800d02c:	3001      	adds	r0, #1
 800d02e:	f43f addf 	beq.w	800cbf0 <_strtod_l+0x498>
 800d032:	4b23      	ldr	r3, [pc, #140]	; (800d0c0 <_strtod_l+0x968>)
 800d034:	403b      	ands	r3, r7
 800d036:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800d03a:	f04f 0a00 	mov.w	sl, #0
 800d03e:	9b04      	ldr	r3, [sp, #16]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d1a0      	bne.n	800cf86 <_strtod_l+0x82e>
 800d044:	e5de      	b.n	800cc04 <_strtod_l+0x4ac>
 800d046:	f04f 33ff 	mov.w	r3, #4294967295
 800d04a:	e7ea      	b.n	800d022 <_strtod_l+0x8ca>
 800d04c:	460b      	mov	r3, r1
 800d04e:	e7e8      	b.n	800d022 <_strtod_l+0x8ca>
 800d050:	ea53 030a 	orrs.w	r3, r3, sl
 800d054:	d088      	beq.n	800cf68 <_strtod_l+0x810>
 800d056:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d058:	b1db      	cbz	r3, 800d092 <_strtod_l+0x93a>
 800d05a:	423b      	tst	r3, r7
 800d05c:	d0ef      	beq.n	800d03e <_strtod_l+0x8e6>
 800d05e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d060:	9a04      	ldr	r2, [sp, #16]
 800d062:	4650      	mov	r0, sl
 800d064:	4659      	mov	r1, fp
 800d066:	b1c3      	cbz	r3, 800d09a <_strtod_l+0x942>
 800d068:	f7ff fb59 	bl	800c71e <sulp>
 800d06c:	4602      	mov	r2, r0
 800d06e:	460b      	mov	r3, r1
 800d070:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d074:	f7f3 f90a 	bl	800028c <__adddf3>
 800d078:	4682      	mov	sl, r0
 800d07a:	468b      	mov	fp, r1
 800d07c:	e7df      	b.n	800d03e <_strtod_l+0x8e6>
 800d07e:	4013      	ands	r3, r2
 800d080:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800d084:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d088:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d08c:	f04f 3aff 	mov.w	sl, #4294967295
 800d090:	e7d5      	b.n	800d03e <_strtod_l+0x8e6>
 800d092:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d094:	ea13 0f0a 	tst.w	r3, sl
 800d098:	e7e0      	b.n	800d05c <_strtod_l+0x904>
 800d09a:	f7ff fb40 	bl	800c71e <sulp>
 800d09e:	4602      	mov	r2, r0
 800d0a0:	460b      	mov	r3, r1
 800d0a2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d0a6:	f7f3 f8ef 	bl	8000288 <__aeabi_dsub>
 800d0aa:	2200      	movs	r2, #0
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	4682      	mov	sl, r0
 800d0b0:	468b      	mov	fp, r1
 800d0b2:	f7f3 fd09 	bl	8000ac8 <__aeabi_dcmpeq>
 800d0b6:	2800      	cmp	r0, #0
 800d0b8:	d0c1      	beq.n	800d03e <_strtod_l+0x8e6>
 800d0ba:	e60e      	b.n	800ccda <_strtod_l+0x582>
 800d0bc:	fffffc02 	.word	0xfffffc02
 800d0c0:	7ff00000 	.word	0x7ff00000
 800d0c4:	39500000 	.word	0x39500000
 800d0c8:	000fffff 	.word	0x000fffff
 800d0cc:	7fefffff 	.word	0x7fefffff
 800d0d0:	08010378 	.word	0x08010378
 800d0d4:	4631      	mov	r1, r6
 800d0d6:	4628      	mov	r0, r5
 800d0d8:	f002 f920 	bl	800f31c <__ratio>
 800d0dc:	ec59 8b10 	vmov	r8, r9, d0
 800d0e0:	ee10 0a10 	vmov	r0, s0
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800d0ea:	4649      	mov	r1, r9
 800d0ec:	f7f3 fd00 	bl	8000af0 <__aeabi_dcmple>
 800d0f0:	2800      	cmp	r0, #0
 800d0f2:	d07c      	beq.n	800d1ee <_strtod_l+0xa96>
 800d0f4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d04c      	beq.n	800d194 <_strtod_l+0xa3c>
 800d0fa:	4b95      	ldr	r3, [pc, #596]	; (800d350 <_strtod_l+0xbf8>)
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d102:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800d350 <_strtod_l+0xbf8>
 800d106:	f04f 0800 	mov.w	r8, #0
 800d10a:	4b92      	ldr	r3, [pc, #584]	; (800d354 <_strtod_l+0xbfc>)
 800d10c:	403b      	ands	r3, r7
 800d10e:	9311      	str	r3, [sp, #68]	; 0x44
 800d110:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d112:	4b91      	ldr	r3, [pc, #580]	; (800d358 <_strtod_l+0xc00>)
 800d114:	429a      	cmp	r2, r3
 800d116:	f040 80b2 	bne.w	800d27e <_strtod_l+0xb26>
 800d11a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d11e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d122:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800d126:	ec4b ab10 	vmov	d0, sl, fp
 800d12a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800d12e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d132:	f002 f81b 	bl	800f16c <__ulp>
 800d136:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d13a:	ec53 2b10 	vmov	r2, r3, d0
 800d13e:	f7f3 fa5b 	bl	80005f8 <__aeabi_dmul>
 800d142:	4652      	mov	r2, sl
 800d144:	465b      	mov	r3, fp
 800d146:	f7f3 f8a1 	bl	800028c <__adddf3>
 800d14a:	460b      	mov	r3, r1
 800d14c:	4981      	ldr	r1, [pc, #516]	; (800d354 <_strtod_l+0xbfc>)
 800d14e:	4a83      	ldr	r2, [pc, #524]	; (800d35c <_strtod_l+0xc04>)
 800d150:	4019      	ands	r1, r3
 800d152:	4291      	cmp	r1, r2
 800d154:	4682      	mov	sl, r0
 800d156:	d95e      	bls.n	800d216 <_strtod_l+0xabe>
 800d158:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d15a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800d15e:	4293      	cmp	r3, r2
 800d160:	d103      	bne.n	800d16a <_strtod_l+0xa12>
 800d162:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d164:	3301      	adds	r3, #1
 800d166:	f43f ad43 	beq.w	800cbf0 <_strtod_l+0x498>
 800d16a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800d368 <_strtod_l+0xc10>
 800d16e:	f04f 3aff 	mov.w	sl, #4294967295
 800d172:	991e      	ldr	r1, [sp, #120]	; 0x78
 800d174:	4620      	mov	r0, r4
 800d176:	f001 fccd 	bl	800eb14 <_Bfree>
 800d17a:	9907      	ldr	r1, [sp, #28]
 800d17c:	4620      	mov	r0, r4
 800d17e:	f001 fcc9 	bl	800eb14 <_Bfree>
 800d182:	4631      	mov	r1, r6
 800d184:	4620      	mov	r0, r4
 800d186:	f001 fcc5 	bl	800eb14 <_Bfree>
 800d18a:	4629      	mov	r1, r5
 800d18c:	4620      	mov	r0, r4
 800d18e:	f001 fcc1 	bl	800eb14 <_Bfree>
 800d192:	e613      	b.n	800cdbc <_strtod_l+0x664>
 800d194:	f1ba 0f00 	cmp.w	sl, #0
 800d198:	d11b      	bne.n	800d1d2 <_strtod_l+0xa7a>
 800d19a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d19e:	b9f3      	cbnz	r3, 800d1de <_strtod_l+0xa86>
 800d1a0:	4b6b      	ldr	r3, [pc, #428]	; (800d350 <_strtod_l+0xbf8>)
 800d1a2:	2200      	movs	r2, #0
 800d1a4:	4640      	mov	r0, r8
 800d1a6:	4649      	mov	r1, r9
 800d1a8:	f7f3 fc98 	bl	8000adc <__aeabi_dcmplt>
 800d1ac:	b9d0      	cbnz	r0, 800d1e4 <_strtod_l+0xa8c>
 800d1ae:	4640      	mov	r0, r8
 800d1b0:	4649      	mov	r1, r9
 800d1b2:	4b6b      	ldr	r3, [pc, #428]	; (800d360 <_strtod_l+0xc08>)
 800d1b4:	2200      	movs	r2, #0
 800d1b6:	f7f3 fa1f 	bl	80005f8 <__aeabi_dmul>
 800d1ba:	4680      	mov	r8, r0
 800d1bc:	4689      	mov	r9, r1
 800d1be:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d1c2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800d1c6:	931b      	str	r3, [sp, #108]	; 0x6c
 800d1c8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800d1cc:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d1d0:	e79b      	b.n	800d10a <_strtod_l+0x9b2>
 800d1d2:	f1ba 0f01 	cmp.w	sl, #1
 800d1d6:	d102      	bne.n	800d1de <_strtod_l+0xa86>
 800d1d8:	2f00      	cmp	r7, #0
 800d1da:	f43f ad7e 	beq.w	800ccda <_strtod_l+0x582>
 800d1de:	4b61      	ldr	r3, [pc, #388]	; (800d364 <_strtod_l+0xc0c>)
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	e78c      	b.n	800d0fe <_strtod_l+0x9a6>
 800d1e4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800d360 <_strtod_l+0xc08>
 800d1e8:	f04f 0800 	mov.w	r8, #0
 800d1ec:	e7e7      	b.n	800d1be <_strtod_l+0xa66>
 800d1ee:	4b5c      	ldr	r3, [pc, #368]	; (800d360 <_strtod_l+0xc08>)
 800d1f0:	4640      	mov	r0, r8
 800d1f2:	4649      	mov	r1, r9
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	f7f3 f9ff 	bl	80005f8 <__aeabi_dmul>
 800d1fa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d1fc:	4680      	mov	r8, r0
 800d1fe:	4689      	mov	r9, r1
 800d200:	b933      	cbnz	r3, 800d210 <_strtod_l+0xab8>
 800d202:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d206:	9012      	str	r0, [sp, #72]	; 0x48
 800d208:	9313      	str	r3, [sp, #76]	; 0x4c
 800d20a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800d20e:	e7dd      	b.n	800d1cc <_strtod_l+0xa74>
 800d210:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800d214:	e7f9      	b.n	800d20a <_strtod_l+0xab2>
 800d216:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800d21a:	9b04      	ldr	r3, [sp, #16]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	d1a8      	bne.n	800d172 <_strtod_l+0xa1a>
 800d220:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d224:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d226:	0d1b      	lsrs	r3, r3, #20
 800d228:	051b      	lsls	r3, r3, #20
 800d22a:	429a      	cmp	r2, r3
 800d22c:	d1a1      	bne.n	800d172 <_strtod_l+0xa1a>
 800d22e:	4640      	mov	r0, r8
 800d230:	4649      	mov	r1, r9
 800d232:	f7f3 fd41 	bl	8000cb8 <__aeabi_d2lz>
 800d236:	f7f3 f9b1 	bl	800059c <__aeabi_l2d>
 800d23a:	4602      	mov	r2, r0
 800d23c:	460b      	mov	r3, r1
 800d23e:	4640      	mov	r0, r8
 800d240:	4649      	mov	r1, r9
 800d242:	f7f3 f821 	bl	8000288 <__aeabi_dsub>
 800d246:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d248:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d24c:	ea43 030a 	orr.w	r3, r3, sl
 800d250:	4313      	orrs	r3, r2
 800d252:	4680      	mov	r8, r0
 800d254:	4689      	mov	r9, r1
 800d256:	d053      	beq.n	800d300 <_strtod_l+0xba8>
 800d258:	a335      	add	r3, pc, #212	; (adr r3, 800d330 <_strtod_l+0xbd8>)
 800d25a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d25e:	f7f3 fc3d 	bl	8000adc <__aeabi_dcmplt>
 800d262:	2800      	cmp	r0, #0
 800d264:	f47f acce 	bne.w	800cc04 <_strtod_l+0x4ac>
 800d268:	a333      	add	r3, pc, #204	; (adr r3, 800d338 <_strtod_l+0xbe0>)
 800d26a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d26e:	4640      	mov	r0, r8
 800d270:	4649      	mov	r1, r9
 800d272:	f7f3 fc51 	bl	8000b18 <__aeabi_dcmpgt>
 800d276:	2800      	cmp	r0, #0
 800d278:	f43f af7b 	beq.w	800d172 <_strtod_l+0xa1a>
 800d27c:	e4c2      	b.n	800cc04 <_strtod_l+0x4ac>
 800d27e:	9b04      	ldr	r3, [sp, #16]
 800d280:	b333      	cbz	r3, 800d2d0 <_strtod_l+0xb78>
 800d282:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d284:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800d288:	d822      	bhi.n	800d2d0 <_strtod_l+0xb78>
 800d28a:	a32d      	add	r3, pc, #180	; (adr r3, 800d340 <_strtod_l+0xbe8>)
 800d28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d290:	4640      	mov	r0, r8
 800d292:	4649      	mov	r1, r9
 800d294:	f7f3 fc2c 	bl	8000af0 <__aeabi_dcmple>
 800d298:	b1a0      	cbz	r0, 800d2c4 <_strtod_l+0xb6c>
 800d29a:	4649      	mov	r1, r9
 800d29c:	4640      	mov	r0, r8
 800d29e:	f7f3 fc83 	bl	8000ba8 <__aeabi_d2uiz>
 800d2a2:	2801      	cmp	r0, #1
 800d2a4:	bf38      	it	cc
 800d2a6:	2001      	movcc	r0, #1
 800d2a8:	f7f3 f92c 	bl	8000504 <__aeabi_ui2d>
 800d2ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d2ae:	4680      	mov	r8, r0
 800d2b0:	4689      	mov	r9, r1
 800d2b2:	bb13      	cbnz	r3, 800d2fa <_strtod_l+0xba2>
 800d2b4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d2b8:	9014      	str	r0, [sp, #80]	; 0x50
 800d2ba:	9315      	str	r3, [sp, #84]	; 0x54
 800d2bc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800d2c0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800d2c4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d2c6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d2c8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800d2cc:	1a9b      	subs	r3, r3, r2
 800d2ce:	930d      	str	r3, [sp, #52]	; 0x34
 800d2d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d2d4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d2d8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800d2dc:	f001 ff46 	bl	800f16c <__ulp>
 800d2e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800d2e4:	ec53 2b10 	vmov	r2, r3, d0
 800d2e8:	f7f3 f986 	bl	80005f8 <__aeabi_dmul>
 800d2ec:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d2f0:	f7f2 ffcc 	bl	800028c <__adddf3>
 800d2f4:	4682      	mov	sl, r0
 800d2f6:	468b      	mov	fp, r1
 800d2f8:	e78f      	b.n	800d21a <_strtod_l+0xac2>
 800d2fa:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800d2fe:	e7dd      	b.n	800d2bc <_strtod_l+0xb64>
 800d300:	a311      	add	r3, pc, #68	; (adr r3, 800d348 <_strtod_l+0xbf0>)
 800d302:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d306:	f7f3 fbe9 	bl	8000adc <__aeabi_dcmplt>
 800d30a:	e7b4      	b.n	800d276 <_strtod_l+0xb1e>
 800d30c:	2300      	movs	r3, #0
 800d30e:	930e      	str	r3, [sp, #56]	; 0x38
 800d310:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d312:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800d314:	6013      	str	r3, [r2, #0]
 800d316:	f7ff ba65 	b.w	800c7e4 <_strtod_l+0x8c>
 800d31a:	2b65      	cmp	r3, #101	; 0x65
 800d31c:	f43f ab5d 	beq.w	800c9da <_strtod_l+0x282>
 800d320:	2b45      	cmp	r3, #69	; 0x45
 800d322:	f43f ab5a 	beq.w	800c9da <_strtod_l+0x282>
 800d326:	2201      	movs	r2, #1
 800d328:	f7ff bb92 	b.w	800ca50 <_strtod_l+0x2f8>
 800d32c:	f3af 8000 	nop.w
 800d330:	94a03595 	.word	0x94a03595
 800d334:	3fdfffff 	.word	0x3fdfffff
 800d338:	35afe535 	.word	0x35afe535
 800d33c:	3fe00000 	.word	0x3fe00000
 800d340:	ffc00000 	.word	0xffc00000
 800d344:	41dfffff 	.word	0x41dfffff
 800d348:	94a03595 	.word	0x94a03595
 800d34c:	3fcfffff 	.word	0x3fcfffff
 800d350:	3ff00000 	.word	0x3ff00000
 800d354:	7ff00000 	.word	0x7ff00000
 800d358:	7fe00000 	.word	0x7fe00000
 800d35c:	7c9fffff 	.word	0x7c9fffff
 800d360:	3fe00000 	.word	0x3fe00000
 800d364:	bff00000 	.word	0xbff00000
 800d368:	7fefffff 	.word	0x7fefffff

0800d36c <_strtod_r>:
 800d36c:	4b01      	ldr	r3, [pc, #4]	; (800d374 <_strtod_r+0x8>)
 800d36e:	f7ff b9f3 	b.w	800c758 <_strtod_l>
 800d372:	bf00      	nop
 800d374:	20000194 	.word	0x20000194

0800d378 <_strtol_l.isra.0>:
 800d378:	2b01      	cmp	r3, #1
 800d37a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d37e:	d001      	beq.n	800d384 <_strtol_l.isra.0+0xc>
 800d380:	2b24      	cmp	r3, #36	; 0x24
 800d382:	d906      	bls.n	800d392 <_strtol_l.isra.0+0x1a>
 800d384:	f7fe f8da 	bl	800b53c <__errno>
 800d388:	2316      	movs	r3, #22
 800d38a:	6003      	str	r3, [r0, #0]
 800d38c:	2000      	movs	r0, #0
 800d38e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d392:	4f3a      	ldr	r7, [pc, #232]	; (800d47c <_strtol_l.isra.0+0x104>)
 800d394:	468e      	mov	lr, r1
 800d396:	4676      	mov	r6, lr
 800d398:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800d39c:	5de5      	ldrb	r5, [r4, r7]
 800d39e:	f015 0508 	ands.w	r5, r5, #8
 800d3a2:	d1f8      	bne.n	800d396 <_strtol_l.isra.0+0x1e>
 800d3a4:	2c2d      	cmp	r4, #45	; 0x2d
 800d3a6:	d134      	bne.n	800d412 <_strtol_l.isra.0+0x9a>
 800d3a8:	f89e 4000 	ldrb.w	r4, [lr]
 800d3ac:	f04f 0801 	mov.w	r8, #1
 800d3b0:	f106 0e02 	add.w	lr, r6, #2
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d05c      	beq.n	800d472 <_strtol_l.isra.0+0xfa>
 800d3b8:	2b10      	cmp	r3, #16
 800d3ba:	d10c      	bne.n	800d3d6 <_strtol_l.isra.0+0x5e>
 800d3bc:	2c30      	cmp	r4, #48	; 0x30
 800d3be:	d10a      	bne.n	800d3d6 <_strtol_l.isra.0+0x5e>
 800d3c0:	f89e 4000 	ldrb.w	r4, [lr]
 800d3c4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d3c8:	2c58      	cmp	r4, #88	; 0x58
 800d3ca:	d14d      	bne.n	800d468 <_strtol_l.isra.0+0xf0>
 800d3cc:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800d3d0:	2310      	movs	r3, #16
 800d3d2:	f10e 0e02 	add.w	lr, lr, #2
 800d3d6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800d3da:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d3de:	2600      	movs	r6, #0
 800d3e0:	fbbc f9f3 	udiv	r9, ip, r3
 800d3e4:	4635      	mov	r5, r6
 800d3e6:	fb03 ca19 	mls	sl, r3, r9, ip
 800d3ea:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800d3ee:	2f09      	cmp	r7, #9
 800d3f0:	d818      	bhi.n	800d424 <_strtol_l.isra.0+0xac>
 800d3f2:	463c      	mov	r4, r7
 800d3f4:	42a3      	cmp	r3, r4
 800d3f6:	dd24      	ble.n	800d442 <_strtol_l.isra.0+0xca>
 800d3f8:	2e00      	cmp	r6, #0
 800d3fa:	db1f      	blt.n	800d43c <_strtol_l.isra.0+0xc4>
 800d3fc:	45a9      	cmp	r9, r5
 800d3fe:	d31d      	bcc.n	800d43c <_strtol_l.isra.0+0xc4>
 800d400:	d101      	bne.n	800d406 <_strtol_l.isra.0+0x8e>
 800d402:	45a2      	cmp	sl, r4
 800d404:	db1a      	blt.n	800d43c <_strtol_l.isra.0+0xc4>
 800d406:	fb05 4503 	mla	r5, r5, r3, r4
 800d40a:	2601      	movs	r6, #1
 800d40c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800d410:	e7eb      	b.n	800d3ea <_strtol_l.isra.0+0x72>
 800d412:	2c2b      	cmp	r4, #43	; 0x2b
 800d414:	bf08      	it	eq
 800d416:	f89e 4000 	ldrbeq.w	r4, [lr]
 800d41a:	46a8      	mov	r8, r5
 800d41c:	bf08      	it	eq
 800d41e:	f106 0e02 	addeq.w	lr, r6, #2
 800d422:	e7c7      	b.n	800d3b4 <_strtol_l.isra.0+0x3c>
 800d424:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800d428:	2f19      	cmp	r7, #25
 800d42a:	d801      	bhi.n	800d430 <_strtol_l.isra.0+0xb8>
 800d42c:	3c37      	subs	r4, #55	; 0x37
 800d42e:	e7e1      	b.n	800d3f4 <_strtol_l.isra.0+0x7c>
 800d430:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800d434:	2f19      	cmp	r7, #25
 800d436:	d804      	bhi.n	800d442 <_strtol_l.isra.0+0xca>
 800d438:	3c57      	subs	r4, #87	; 0x57
 800d43a:	e7db      	b.n	800d3f4 <_strtol_l.isra.0+0x7c>
 800d43c:	f04f 36ff 	mov.w	r6, #4294967295
 800d440:	e7e4      	b.n	800d40c <_strtol_l.isra.0+0x94>
 800d442:	2e00      	cmp	r6, #0
 800d444:	da05      	bge.n	800d452 <_strtol_l.isra.0+0xda>
 800d446:	2322      	movs	r3, #34	; 0x22
 800d448:	6003      	str	r3, [r0, #0]
 800d44a:	4665      	mov	r5, ip
 800d44c:	b942      	cbnz	r2, 800d460 <_strtol_l.isra.0+0xe8>
 800d44e:	4628      	mov	r0, r5
 800d450:	e79d      	b.n	800d38e <_strtol_l.isra.0+0x16>
 800d452:	f1b8 0f00 	cmp.w	r8, #0
 800d456:	d000      	beq.n	800d45a <_strtol_l.isra.0+0xe2>
 800d458:	426d      	negs	r5, r5
 800d45a:	2a00      	cmp	r2, #0
 800d45c:	d0f7      	beq.n	800d44e <_strtol_l.isra.0+0xd6>
 800d45e:	b10e      	cbz	r6, 800d464 <_strtol_l.isra.0+0xec>
 800d460:	f10e 31ff 	add.w	r1, lr, #4294967295
 800d464:	6011      	str	r1, [r2, #0]
 800d466:	e7f2      	b.n	800d44e <_strtol_l.isra.0+0xd6>
 800d468:	2430      	movs	r4, #48	; 0x30
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	d1b3      	bne.n	800d3d6 <_strtol_l.isra.0+0x5e>
 800d46e:	2308      	movs	r3, #8
 800d470:	e7b1      	b.n	800d3d6 <_strtol_l.isra.0+0x5e>
 800d472:	2c30      	cmp	r4, #48	; 0x30
 800d474:	d0a4      	beq.n	800d3c0 <_strtol_l.isra.0+0x48>
 800d476:	230a      	movs	r3, #10
 800d478:	e7ad      	b.n	800d3d6 <_strtol_l.isra.0+0x5e>
 800d47a:	bf00      	nop
 800d47c:	080103a1 	.word	0x080103a1

0800d480 <_strtol_r>:
 800d480:	f7ff bf7a 	b.w	800d378 <_strtol_l.isra.0>

0800d484 <_write_r>:
 800d484:	b538      	push	{r3, r4, r5, lr}
 800d486:	4d07      	ldr	r5, [pc, #28]	; (800d4a4 <_write_r+0x20>)
 800d488:	4604      	mov	r4, r0
 800d48a:	4608      	mov	r0, r1
 800d48c:	4611      	mov	r1, r2
 800d48e:	2200      	movs	r2, #0
 800d490:	602a      	str	r2, [r5, #0]
 800d492:	461a      	mov	r2, r3
 800d494:	f7f5 fb0f 	bl	8002ab6 <_write>
 800d498:	1c43      	adds	r3, r0, #1
 800d49a:	d102      	bne.n	800d4a2 <_write_r+0x1e>
 800d49c:	682b      	ldr	r3, [r5, #0]
 800d49e:	b103      	cbz	r3, 800d4a2 <_write_r+0x1e>
 800d4a0:	6023      	str	r3, [r4, #0]
 800d4a2:	bd38      	pop	{r3, r4, r5, pc}
 800d4a4:	20002b44 	.word	0x20002b44

0800d4a8 <_close_r>:
 800d4a8:	b538      	push	{r3, r4, r5, lr}
 800d4aa:	4d06      	ldr	r5, [pc, #24]	; (800d4c4 <_close_r+0x1c>)
 800d4ac:	2300      	movs	r3, #0
 800d4ae:	4604      	mov	r4, r0
 800d4b0:	4608      	mov	r0, r1
 800d4b2:	602b      	str	r3, [r5, #0]
 800d4b4:	f7f5 fb1b 	bl	8002aee <_close>
 800d4b8:	1c43      	adds	r3, r0, #1
 800d4ba:	d102      	bne.n	800d4c2 <_close_r+0x1a>
 800d4bc:	682b      	ldr	r3, [r5, #0]
 800d4be:	b103      	cbz	r3, 800d4c2 <_close_r+0x1a>
 800d4c0:	6023      	str	r3, [r4, #0]
 800d4c2:	bd38      	pop	{r3, r4, r5, pc}
 800d4c4:	20002b44 	.word	0x20002b44

0800d4c8 <quorem>:
 800d4c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4cc:	6903      	ldr	r3, [r0, #16]
 800d4ce:	690c      	ldr	r4, [r1, #16]
 800d4d0:	42a3      	cmp	r3, r4
 800d4d2:	4607      	mov	r7, r0
 800d4d4:	f2c0 8081 	blt.w	800d5da <quorem+0x112>
 800d4d8:	3c01      	subs	r4, #1
 800d4da:	f101 0814 	add.w	r8, r1, #20
 800d4de:	f100 0514 	add.w	r5, r0, #20
 800d4e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d4e6:	9301      	str	r3, [sp, #4]
 800d4e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d4ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d4f0:	3301      	adds	r3, #1
 800d4f2:	429a      	cmp	r2, r3
 800d4f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d4f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d4fc:	fbb2 f6f3 	udiv	r6, r2, r3
 800d500:	d331      	bcc.n	800d566 <quorem+0x9e>
 800d502:	f04f 0e00 	mov.w	lr, #0
 800d506:	4640      	mov	r0, r8
 800d508:	46ac      	mov	ip, r5
 800d50a:	46f2      	mov	sl, lr
 800d50c:	f850 2b04 	ldr.w	r2, [r0], #4
 800d510:	b293      	uxth	r3, r2
 800d512:	fb06 e303 	mla	r3, r6, r3, lr
 800d516:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d51a:	b29b      	uxth	r3, r3
 800d51c:	ebaa 0303 	sub.w	r3, sl, r3
 800d520:	0c12      	lsrs	r2, r2, #16
 800d522:	f8dc a000 	ldr.w	sl, [ip]
 800d526:	fb06 e202 	mla	r2, r6, r2, lr
 800d52a:	fa13 f38a 	uxtah	r3, r3, sl
 800d52e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d532:	fa1f fa82 	uxth.w	sl, r2
 800d536:	f8dc 2000 	ldr.w	r2, [ip]
 800d53a:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800d53e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d542:	b29b      	uxth	r3, r3
 800d544:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d548:	4581      	cmp	r9, r0
 800d54a:	f84c 3b04 	str.w	r3, [ip], #4
 800d54e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d552:	d2db      	bcs.n	800d50c <quorem+0x44>
 800d554:	f855 300b 	ldr.w	r3, [r5, fp]
 800d558:	b92b      	cbnz	r3, 800d566 <quorem+0x9e>
 800d55a:	9b01      	ldr	r3, [sp, #4]
 800d55c:	3b04      	subs	r3, #4
 800d55e:	429d      	cmp	r5, r3
 800d560:	461a      	mov	r2, r3
 800d562:	d32e      	bcc.n	800d5c2 <quorem+0xfa>
 800d564:	613c      	str	r4, [r7, #16]
 800d566:	4638      	mov	r0, r7
 800d568:	f001 fd5c 	bl	800f024 <__mcmp>
 800d56c:	2800      	cmp	r0, #0
 800d56e:	db24      	blt.n	800d5ba <quorem+0xf2>
 800d570:	3601      	adds	r6, #1
 800d572:	4628      	mov	r0, r5
 800d574:	f04f 0c00 	mov.w	ip, #0
 800d578:	f858 2b04 	ldr.w	r2, [r8], #4
 800d57c:	f8d0 e000 	ldr.w	lr, [r0]
 800d580:	b293      	uxth	r3, r2
 800d582:	ebac 0303 	sub.w	r3, ip, r3
 800d586:	0c12      	lsrs	r2, r2, #16
 800d588:	fa13 f38e 	uxtah	r3, r3, lr
 800d58c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d590:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d594:	b29b      	uxth	r3, r3
 800d596:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d59a:	45c1      	cmp	r9, r8
 800d59c:	f840 3b04 	str.w	r3, [r0], #4
 800d5a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d5a4:	d2e8      	bcs.n	800d578 <quorem+0xb0>
 800d5a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d5aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d5ae:	b922      	cbnz	r2, 800d5ba <quorem+0xf2>
 800d5b0:	3b04      	subs	r3, #4
 800d5b2:	429d      	cmp	r5, r3
 800d5b4:	461a      	mov	r2, r3
 800d5b6:	d30a      	bcc.n	800d5ce <quorem+0x106>
 800d5b8:	613c      	str	r4, [r7, #16]
 800d5ba:	4630      	mov	r0, r6
 800d5bc:	b003      	add	sp, #12
 800d5be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d5c2:	6812      	ldr	r2, [r2, #0]
 800d5c4:	3b04      	subs	r3, #4
 800d5c6:	2a00      	cmp	r2, #0
 800d5c8:	d1cc      	bne.n	800d564 <quorem+0x9c>
 800d5ca:	3c01      	subs	r4, #1
 800d5cc:	e7c7      	b.n	800d55e <quorem+0x96>
 800d5ce:	6812      	ldr	r2, [r2, #0]
 800d5d0:	3b04      	subs	r3, #4
 800d5d2:	2a00      	cmp	r2, #0
 800d5d4:	d1f0      	bne.n	800d5b8 <quorem+0xf0>
 800d5d6:	3c01      	subs	r4, #1
 800d5d8:	e7eb      	b.n	800d5b2 <quorem+0xea>
 800d5da:	2000      	movs	r0, #0
 800d5dc:	e7ee      	b.n	800d5bc <quorem+0xf4>
	...

0800d5e0 <_dtoa_r>:
 800d5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5e4:	ed2d 8b02 	vpush	{d8}
 800d5e8:	ec57 6b10 	vmov	r6, r7, d0
 800d5ec:	b095      	sub	sp, #84	; 0x54
 800d5ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d5f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d5f4:	9105      	str	r1, [sp, #20]
 800d5f6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800d5fa:	4604      	mov	r4, r0
 800d5fc:	9209      	str	r2, [sp, #36]	; 0x24
 800d5fe:	930f      	str	r3, [sp, #60]	; 0x3c
 800d600:	b975      	cbnz	r5, 800d620 <_dtoa_r+0x40>
 800d602:	2010      	movs	r0, #16
 800d604:	f001 fa20 	bl	800ea48 <malloc>
 800d608:	4602      	mov	r2, r0
 800d60a:	6260      	str	r0, [r4, #36]	; 0x24
 800d60c:	b920      	cbnz	r0, 800d618 <_dtoa_r+0x38>
 800d60e:	4bb2      	ldr	r3, [pc, #712]	; (800d8d8 <_dtoa_r+0x2f8>)
 800d610:	21ea      	movs	r1, #234	; 0xea
 800d612:	48b2      	ldr	r0, [pc, #712]	; (800d8dc <_dtoa_r+0x2fc>)
 800d614:	f002 f8f0 	bl	800f7f8 <__assert_func>
 800d618:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d61c:	6005      	str	r5, [r0, #0]
 800d61e:	60c5      	str	r5, [r0, #12]
 800d620:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d622:	6819      	ldr	r1, [r3, #0]
 800d624:	b151      	cbz	r1, 800d63c <_dtoa_r+0x5c>
 800d626:	685a      	ldr	r2, [r3, #4]
 800d628:	604a      	str	r2, [r1, #4]
 800d62a:	2301      	movs	r3, #1
 800d62c:	4093      	lsls	r3, r2
 800d62e:	608b      	str	r3, [r1, #8]
 800d630:	4620      	mov	r0, r4
 800d632:	f001 fa6f 	bl	800eb14 <_Bfree>
 800d636:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d638:	2200      	movs	r2, #0
 800d63a:	601a      	str	r2, [r3, #0]
 800d63c:	1e3b      	subs	r3, r7, #0
 800d63e:	bfb9      	ittee	lt
 800d640:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800d644:	9303      	strlt	r3, [sp, #12]
 800d646:	2300      	movge	r3, #0
 800d648:	f8c8 3000 	strge.w	r3, [r8]
 800d64c:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800d650:	4ba3      	ldr	r3, [pc, #652]	; (800d8e0 <_dtoa_r+0x300>)
 800d652:	bfbc      	itt	lt
 800d654:	2201      	movlt	r2, #1
 800d656:	f8c8 2000 	strlt.w	r2, [r8]
 800d65a:	ea33 0309 	bics.w	r3, r3, r9
 800d65e:	d11b      	bne.n	800d698 <_dtoa_r+0xb8>
 800d660:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d662:	f242 730f 	movw	r3, #9999	; 0x270f
 800d666:	6013      	str	r3, [r2, #0]
 800d668:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d66c:	4333      	orrs	r3, r6
 800d66e:	f000 857a 	beq.w	800e166 <_dtoa_r+0xb86>
 800d672:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d674:	b963      	cbnz	r3, 800d690 <_dtoa_r+0xb0>
 800d676:	4b9b      	ldr	r3, [pc, #620]	; (800d8e4 <_dtoa_r+0x304>)
 800d678:	e024      	b.n	800d6c4 <_dtoa_r+0xe4>
 800d67a:	4b9b      	ldr	r3, [pc, #620]	; (800d8e8 <_dtoa_r+0x308>)
 800d67c:	9300      	str	r3, [sp, #0]
 800d67e:	3308      	adds	r3, #8
 800d680:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d682:	6013      	str	r3, [r2, #0]
 800d684:	9800      	ldr	r0, [sp, #0]
 800d686:	b015      	add	sp, #84	; 0x54
 800d688:	ecbd 8b02 	vpop	{d8}
 800d68c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d690:	4b94      	ldr	r3, [pc, #592]	; (800d8e4 <_dtoa_r+0x304>)
 800d692:	9300      	str	r3, [sp, #0]
 800d694:	3303      	adds	r3, #3
 800d696:	e7f3      	b.n	800d680 <_dtoa_r+0xa0>
 800d698:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d69c:	2200      	movs	r2, #0
 800d69e:	ec51 0b17 	vmov	r0, r1, d7
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800d6a8:	f7f3 fa0e 	bl	8000ac8 <__aeabi_dcmpeq>
 800d6ac:	4680      	mov	r8, r0
 800d6ae:	b158      	cbz	r0, 800d6c8 <_dtoa_r+0xe8>
 800d6b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800d6b2:	2301      	movs	r3, #1
 800d6b4:	6013      	str	r3, [r2, #0]
 800d6b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d6b8:	2b00      	cmp	r3, #0
 800d6ba:	f000 8551 	beq.w	800e160 <_dtoa_r+0xb80>
 800d6be:	488b      	ldr	r0, [pc, #556]	; (800d8ec <_dtoa_r+0x30c>)
 800d6c0:	6018      	str	r0, [r3, #0]
 800d6c2:	1e43      	subs	r3, r0, #1
 800d6c4:	9300      	str	r3, [sp, #0]
 800d6c6:	e7dd      	b.n	800d684 <_dtoa_r+0xa4>
 800d6c8:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800d6cc:	aa12      	add	r2, sp, #72	; 0x48
 800d6ce:	a913      	add	r1, sp, #76	; 0x4c
 800d6d0:	4620      	mov	r0, r4
 800d6d2:	f001 fdc7 	bl	800f264 <__d2b>
 800d6d6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d6da:	4683      	mov	fp, r0
 800d6dc:	2d00      	cmp	r5, #0
 800d6de:	d07c      	beq.n	800d7da <_dtoa_r+0x1fa>
 800d6e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6e2:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800d6e6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d6ea:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800d6ee:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d6f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d6f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d6fa:	4b7d      	ldr	r3, [pc, #500]	; (800d8f0 <_dtoa_r+0x310>)
 800d6fc:	2200      	movs	r2, #0
 800d6fe:	4630      	mov	r0, r6
 800d700:	4639      	mov	r1, r7
 800d702:	f7f2 fdc1 	bl	8000288 <__aeabi_dsub>
 800d706:	a36e      	add	r3, pc, #440	; (adr r3, 800d8c0 <_dtoa_r+0x2e0>)
 800d708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d70c:	f7f2 ff74 	bl	80005f8 <__aeabi_dmul>
 800d710:	a36d      	add	r3, pc, #436	; (adr r3, 800d8c8 <_dtoa_r+0x2e8>)
 800d712:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d716:	f7f2 fdb9 	bl	800028c <__adddf3>
 800d71a:	4606      	mov	r6, r0
 800d71c:	4628      	mov	r0, r5
 800d71e:	460f      	mov	r7, r1
 800d720:	f7f2 ff00 	bl	8000524 <__aeabi_i2d>
 800d724:	a36a      	add	r3, pc, #424	; (adr r3, 800d8d0 <_dtoa_r+0x2f0>)
 800d726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d72a:	f7f2 ff65 	bl	80005f8 <__aeabi_dmul>
 800d72e:	4602      	mov	r2, r0
 800d730:	460b      	mov	r3, r1
 800d732:	4630      	mov	r0, r6
 800d734:	4639      	mov	r1, r7
 800d736:	f7f2 fda9 	bl	800028c <__adddf3>
 800d73a:	4606      	mov	r6, r0
 800d73c:	460f      	mov	r7, r1
 800d73e:	f7f3 fa0b 	bl	8000b58 <__aeabi_d2iz>
 800d742:	2200      	movs	r2, #0
 800d744:	4682      	mov	sl, r0
 800d746:	2300      	movs	r3, #0
 800d748:	4630      	mov	r0, r6
 800d74a:	4639      	mov	r1, r7
 800d74c:	f7f3 f9c6 	bl	8000adc <__aeabi_dcmplt>
 800d750:	b148      	cbz	r0, 800d766 <_dtoa_r+0x186>
 800d752:	4650      	mov	r0, sl
 800d754:	f7f2 fee6 	bl	8000524 <__aeabi_i2d>
 800d758:	4632      	mov	r2, r6
 800d75a:	463b      	mov	r3, r7
 800d75c:	f7f3 f9b4 	bl	8000ac8 <__aeabi_dcmpeq>
 800d760:	b908      	cbnz	r0, 800d766 <_dtoa_r+0x186>
 800d762:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d766:	f1ba 0f16 	cmp.w	sl, #22
 800d76a:	d854      	bhi.n	800d816 <_dtoa_r+0x236>
 800d76c:	4b61      	ldr	r3, [pc, #388]	; (800d8f4 <_dtoa_r+0x314>)
 800d76e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d776:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d77a:	f7f3 f9af 	bl	8000adc <__aeabi_dcmplt>
 800d77e:	2800      	cmp	r0, #0
 800d780:	d04b      	beq.n	800d81a <_dtoa_r+0x23a>
 800d782:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d786:	2300      	movs	r3, #0
 800d788:	930e      	str	r3, [sp, #56]	; 0x38
 800d78a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d78c:	1b5d      	subs	r5, r3, r5
 800d78e:	1e6b      	subs	r3, r5, #1
 800d790:	9304      	str	r3, [sp, #16]
 800d792:	bf43      	ittte	mi
 800d794:	2300      	movmi	r3, #0
 800d796:	f1c5 0801 	rsbmi	r8, r5, #1
 800d79a:	9304      	strmi	r3, [sp, #16]
 800d79c:	f04f 0800 	movpl.w	r8, #0
 800d7a0:	f1ba 0f00 	cmp.w	sl, #0
 800d7a4:	db3b      	blt.n	800d81e <_dtoa_r+0x23e>
 800d7a6:	9b04      	ldr	r3, [sp, #16]
 800d7a8:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800d7ac:	4453      	add	r3, sl
 800d7ae:	9304      	str	r3, [sp, #16]
 800d7b0:	2300      	movs	r3, #0
 800d7b2:	9306      	str	r3, [sp, #24]
 800d7b4:	9b05      	ldr	r3, [sp, #20]
 800d7b6:	2b09      	cmp	r3, #9
 800d7b8:	d869      	bhi.n	800d88e <_dtoa_r+0x2ae>
 800d7ba:	2b05      	cmp	r3, #5
 800d7bc:	bfc4      	itt	gt
 800d7be:	3b04      	subgt	r3, #4
 800d7c0:	9305      	strgt	r3, [sp, #20]
 800d7c2:	9b05      	ldr	r3, [sp, #20]
 800d7c4:	f1a3 0302 	sub.w	r3, r3, #2
 800d7c8:	bfcc      	ite	gt
 800d7ca:	2500      	movgt	r5, #0
 800d7cc:	2501      	movle	r5, #1
 800d7ce:	2b03      	cmp	r3, #3
 800d7d0:	d869      	bhi.n	800d8a6 <_dtoa_r+0x2c6>
 800d7d2:	e8df f003 	tbb	[pc, r3]
 800d7d6:	4e2c      	.short	0x4e2c
 800d7d8:	5a4c      	.short	0x5a4c
 800d7da:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800d7de:	441d      	add	r5, r3
 800d7e0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d7e4:	2b20      	cmp	r3, #32
 800d7e6:	bfc1      	itttt	gt
 800d7e8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d7ec:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d7f0:	fa09 f303 	lslgt.w	r3, r9, r3
 800d7f4:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d7f8:	bfda      	itte	le
 800d7fa:	f1c3 0320 	rsble	r3, r3, #32
 800d7fe:	fa06 f003 	lslle.w	r0, r6, r3
 800d802:	4318      	orrgt	r0, r3
 800d804:	f7f2 fe7e 	bl	8000504 <__aeabi_ui2d>
 800d808:	2301      	movs	r3, #1
 800d80a:	4606      	mov	r6, r0
 800d80c:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d810:	3d01      	subs	r5, #1
 800d812:	9310      	str	r3, [sp, #64]	; 0x40
 800d814:	e771      	b.n	800d6fa <_dtoa_r+0x11a>
 800d816:	2301      	movs	r3, #1
 800d818:	e7b6      	b.n	800d788 <_dtoa_r+0x1a8>
 800d81a:	900e      	str	r0, [sp, #56]	; 0x38
 800d81c:	e7b5      	b.n	800d78a <_dtoa_r+0x1aa>
 800d81e:	f1ca 0300 	rsb	r3, sl, #0
 800d822:	9306      	str	r3, [sp, #24]
 800d824:	2300      	movs	r3, #0
 800d826:	eba8 080a 	sub.w	r8, r8, sl
 800d82a:	930d      	str	r3, [sp, #52]	; 0x34
 800d82c:	e7c2      	b.n	800d7b4 <_dtoa_r+0x1d4>
 800d82e:	2300      	movs	r3, #0
 800d830:	9308      	str	r3, [sp, #32]
 800d832:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d834:	2b00      	cmp	r3, #0
 800d836:	dc39      	bgt.n	800d8ac <_dtoa_r+0x2cc>
 800d838:	f04f 0901 	mov.w	r9, #1
 800d83c:	f8cd 9004 	str.w	r9, [sp, #4]
 800d840:	464b      	mov	r3, r9
 800d842:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800d846:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d848:	2200      	movs	r2, #0
 800d84a:	6042      	str	r2, [r0, #4]
 800d84c:	2204      	movs	r2, #4
 800d84e:	f102 0614 	add.w	r6, r2, #20
 800d852:	429e      	cmp	r6, r3
 800d854:	6841      	ldr	r1, [r0, #4]
 800d856:	d92f      	bls.n	800d8b8 <_dtoa_r+0x2d8>
 800d858:	4620      	mov	r0, r4
 800d85a:	f001 f91b 	bl	800ea94 <_Balloc>
 800d85e:	9000      	str	r0, [sp, #0]
 800d860:	2800      	cmp	r0, #0
 800d862:	d14b      	bne.n	800d8fc <_dtoa_r+0x31c>
 800d864:	4b24      	ldr	r3, [pc, #144]	; (800d8f8 <_dtoa_r+0x318>)
 800d866:	4602      	mov	r2, r0
 800d868:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d86c:	e6d1      	b.n	800d612 <_dtoa_r+0x32>
 800d86e:	2301      	movs	r3, #1
 800d870:	e7de      	b.n	800d830 <_dtoa_r+0x250>
 800d872:	2300      	movs	r3, #0
 800d874:	9308      	str	r3, [sp, #32]
 800d876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d878:	eb0a 0903 	add.w	r9, sl, r3
 800d87c:	f109 0301 	add.w	r3, r9, #1
 800d880:	2b01      	cmp	r3, #1
 800d882:	9301      	str	r3, [sp, #4]
 800d884:	bfb8      	it	lt
 800d886:	2301      	movlt	r3, #1
 800d888:	e7dd      	b.n	800d846 <_dtoa_r+0x266>
 800d88a:	2301      	movs	r3, #1
 800d88c:	e7f2      	b.n	800d874 <_dtoa_r+0x294>
 800d88e:	2501      	movs	r5, #1
 800d890:	2300      	movs	r3, #0
 800d892:	9305      	str	r3, [sp, #20]
 800d894:	9508      	str	r5, [sp, #32]
 800d896:	f04f 39ff 	mov.w	r9, #4294967295
 800d89a:	2200      	movs	r2, #0
 800d89c:	f8cd 9004 	str.w	r9, [sp, #4]
 800d8a0:	2312      	movs	r3, #18
 800d8a2:	9209      	str	r2, [sp, #36]	; 0x24
 800d8a4:	e7cf      	b.n	800d846 <_dtoa_r+0x266>
 800d8a6:	2301      	movs	r3, #1
 800d8a8:	9308      	str	r3, [sp, #32]
 800d8aa:	e7f4      	b.n	800d896 <_dtoa_r+0x2b6>
 800d8ac:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800d8b0:	f8cd 9004 	str.w	r9, [sp, #4]
 800d8b4:	464b      	mov	r3, r9
 800d8b6:	e7c6      	b.n	800d846 <_dtoa_r+0x266>
 800d8b8:	3101      	adds	r1, #1
 800d8ba:	6041      	str	r1, [r0, #4]
 800d8bc:	0052      	lsls	r2, r2, #1
 800d8be:	e7c6      	b.n	800d84e <_dtoa_r+0x26e>
 800d8c0:	636f4361 	.word	0x636f4361
 800d8c4:	3fd287a7 	.word	0x3fd287a7
 800d8c8:	8b60c8b3 	.word	0x8b60c8b3
 800d8cc:	3fc68a28 	.word	0x3fc68a28
 800d8d0:	509f79fb 	.word	0x509f79fb
 800d8d4:	3fd34413 	.word	0x3fd34413
 800d8d8:	080104ae 	.word	0x080104ae
 800d8dc:	080104c5 	.word	0x080104c5
 800d8e0:	7ff00000 	.word	0x7ff00000
 800d8e4:	080104aa 	.word	0x080104aa
 800d8e8:	080104a1 	.word	0x080104a1
 800d8ec:	08010325 	.word	0x08010325
 800d8f0:	3ff80000 	.word	0x3ff80000
 800d8f4:	08010640 	.word	0x08010640
 800d8f8:	08010524 	.word	0x08010524
 800d8fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d8fe:	9a00      	ldr	r2, [sp, #0]
 800d900:	601a      	str	r2, [r3, #0]
 800d902:	9b01      	ldr	r3, [sp, #4]
 800d904:	2b0e      	cmp	r3, #14
 800d906:	f200 80ad 	bhi.w	800da64 <_dtoa_r+0x484>
 800d90a:	2d00      	cmp	r5, #0
 800d90c:	f000 80aa 	beq.w	800da64 <_dtoa_r+0x484>
 800d910:	f1ba 0f00 	cmp.w	sl, #0
 800d914:	dd36      	ble.n	800d984 <_dtoa_r+0x3a4>
 800d916:	4ac3      	ldr	r2, [pc, #780]	; (800dc24 <_dtoa_r+0x644>)
 800d918:	f00a 030f 	and.w	r3, sl, #15
 800d91c:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d920:	ed93 7b00 	vldr	d7, [r3]
 800d924:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800d928:	ea4f 172a 	mov.w	r7, sl, asr #4
 800d92c:	eeb0 8a47 	vmov.f32	s16, s14
 800d930:	eef0 8a67 	vmov.f32	s17, s15
 800d934:	d016      	beq.n	800d964 <_dtoa_r+0x384>
 800d936:	4bbc      	ldr	r3, [pc, #752]	; (800dc28 <_dtoa_r+0x648>)
 800d938:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d93c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d940:	f7f2 ff84 	bl	800084c <__aeabi_ddiv>
 800d944:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d948:	f007 070f 	and.w	r7, r7, #15
 800d94c:	2503      	movs	r5, #3
 800d94e:	4eb6      	ldr	r6, [pc, #728]	; (800dc28 <_dtoa_r+0x648>)
 800d950:	b957      	cbnz	r7, 800d968 <_dtoa_r+0x388>
 800d952:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d956:	ec53 2b18 	vmov	r2, r3, d8
 800d95a:	f7f2 ff77 	bl	800084c <__aeabi_ddiv>
 800d95e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d962:	e029      	b.n	800d9b8 <_dtoa_r+0x3d8>
 800d964:	2502      	movs	r5, #2
 800d966:	e7f2      	b.n	800d94e <_dtoa_r+0x36e>
 800d968:	07f9      	lsls	r1, r7, #31
 800d96a:	d508      	bpl.n	800d97e <_dtoa_r+0x39e>
 800d96c:	ec51 0b18 	vmov	r0, r1, d8
 800d970:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d974:	f7f2 fe40 	bl	80005f8 <__aeabi_dmul>
 800d978:	ec41 0b18 	vmov	d8, r0, r1
 800d97c:	3501      	adds	r5, #1
 800d97e:	107f      	asrs	r7, r7, #1
 800d980:	3608      	adds	r6, #8
 800d982:	e7e5      	b.n	800d950 <_dtoa_r+0x370>
 800d984:	f000 80a6 	beq.w	800dad4 <_dtoa_r+0x4f4>
 800d988:	f1ca 0600 	rsb	r6, sl, #0
 800d98c:	4ba5      	ldr	r3, [pc, #660]	; (800dc24 <_dtoa_r+0x644>)
 800d98e:	4fa6      	ldr	r7, [pc, #664]	; (800dc28 <_dtoa_r+0x648>)
 800d990:	f006 020f 	and.w	r2, r6, #15
 800d994:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d998:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d99c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d9a0:	f7f2 fe2a 	bl	80005f8 <__aeabi_dmul>
 800d9a4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d9a8:	1136      	asrs	r6, r6, #4
 800d9aa:	2300      	movs	r3, #0
 800d9ac:	2502      	movs	r5, #2
 800d9ae:	2e00      	cmp	r6, #0
 800d9b0:	f040 8085 	bne.w	800dabe <_dtoa_r+0x4de>
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d1d2      	bne.n	800d95e <_dtoa_r+0x37e>
 800d9b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d9ba:	2b00      	cmp	r3, #0
 800d9bc:	f000 808c 	beq.w	800dad8 <_dtoa_r+0x4f8>
 800d9c0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d9c4:	4b99      	ldr	r3, [pc, #612]	; (800dc2c <_dtoa_r+0x64c>)
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	4630      	mov	r0, r6
 800d9ca:	4639      	mov	r1, r7
 800d9cc:	f7f3 f886 	bl	8000adc <__aeabi_dcmplt>
 800d9d0:	2800      	cmp	r0, #0
 800d9d2:	f000 8081 	beq.w	800dad8 <_dtoa_r+0x4f8>
 800d9d6:	9b01      	ldr	r3, [sp, #4]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d07d      	beq.n	800dad8 <_dtoa_r+0x4f8>
 800d9dc:	f1b9 0f00 	cmp.w	r9, #0
 800d9e0:	dd3c      	ble.n	800da5c <_dtoa_r+0x47c>
 800d9e2:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d9e6:	9307      	str	r3, [sp, #28]
 800d9e8:	2200      	movs	r2, #0
 800d9ea:	4b91      	ldr	r3, [pc, #580]	; (800dc30 <_dtoa_r+0x650>)
 800d9ec:	4630      	mov	r0, r6
 800d9ee:	4639      	mov	r1, r7
 800d9f0:	f7f2 fe02 	bl	80005f8 <__aeabi_dmul>
 800d9f4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d9f8:	3501      	adds	r5, #1
 800d9fa:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800d9fe:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800da02:	4628      	mov	r0, r5
 800da04:	f7f2 fd8e 	bl	8000524 <__aeabi_i2d>
 800da08:	4632      	mov	r2, r6
 800da0a:	463b      	mov	r3, r7
 800da0c:	f7f2 fdf4 	bl	80005f8 <__aeabi_dmul>
 800da10:	4b88      	ldr	r3, [pc, #544]	; (800dc34 <_dtoa_r+0x654>)
 800da12:	2200      	movs	r2, #0
 800da14:	f7f2 fc3a 	bl	800028c <__adddf3>
 800da18:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800da1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800da20:	9303      	str	r3, [sp, #12]
 800da22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800da24:	2b00      	cmp	r3, #0
 800da26:	d15c      	bne.n	800dae2 <_dtoa_r+0x502>
 800da28:	4b83      	ldr	r3, [pc, #524]	; (800dc38 <_dtoa_r+0x658>)
 800da2a:	2200      	movs	r2, #0
 800da2c:	4630      	mov	r0, r6
 800da2e:	4639      	mov	r1, r7
 800da30:	f7f2 fc2a 	bl	8000288 <__aeabi_dsub>
 800da34:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800da38:	4606      	mov	r6, r0
 800da3a:	460f      	mov	r7, r1
 800da3c:	f7f3 f86c 	bl	8000b18 <__aeabi_dcmpgt>
 800da40:	2800      	cmp	r0, #0
 800da42:	f040 8296 	bne.w	800df72 <_dtoa_r+0x992>
 800da46:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800da4a:	4630      	mov	r0, r6
 800da4c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800da50:	4639      	mov	r1, r7
 800da52:	f7f3 f843 	bl	8000adc <__aeabi_dcmplt>
 800da56:	2800      	cmp	r0, #0
 800da58:	f040 8288 	bne.w	800df6c <_dtoa_r+0x98c>
 800da5c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800da60:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800da64:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800da66:	2b00      	cmp	r3, #0
 800da68:	f2c0 8158 	blt.w	800dd1c <_dtoa_r+0x73c>
 800da6c:	f1ba 0f0e 	cmp.w	sl, #14
 800da70:	f300 8154 	bgt.w	800dd1c <_dtoa_r+0x73c>
 800da74:	4b6b      	ldr	r3, [pc, #428]	; (800dc24 <_dtoa_r+0x644>)
 800da76:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800da7a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800da7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da80:	2b00      	cmp	r3, #0
 800da82:	f280 80e3 	bge.w	800dc4c <_dtoa_r+0x66c>
 800da86:	9b01      	ldr	r3, [sp, #4]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	f300 80df 	bgt.w	800dc4c <_dtoa_r+0x66c>
 800da8e:	f040 826d 	bne.w	800df6c <_dtoa_r+0x98c>
 800da92:	4b69      	ldr	r3, [pc, #420]	; (800dc38 <_dtoa_r+0x658>)
 800da94:	2200      	movs	r2, #0
 800da96:	4640      	mov	r0, r8
 800da98:	4649      	mov	r1, r9
 800da9a:	f7f2 fdad 	bl	80005f8 <__aeabi_dmul>
 800da9e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800daa2:	f7f3 f82f 	bl	8000b04 <__aeabi_dcmpge>
 800daa6:	9e01      	ldr	r6, [sp, #4]
 800daa8:	4637      	mov	r7, r6
 800daaa:	2800      	cmp	r0, #0
 800daac:	f040 8243 	bne.w	800df36 <_dtoa_r+0x956>
 800dab0:	9d00      	ldr	r5, [sp, #0]
 800dab2:	2331      	movs	r3, #49	; 0x31
 800dab4:	f805 3b01 	strb.w	r3, [r5], #1
 800dab8:	f10a 0a01 	add.w	sl, sl, #1
 800dabc:	e23f      	b.n	800df3e <_dtoa_r+0x95e>
 800dabe:	07f2      	lsls	r2, r6, #31
 800dac0:	d505      	bpl.n	800dace <_dtoa_r+0x4ee>
 800dac2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800dac6:	f7f2 fd97 	bl	80005f8 <__aeabi_dmul>
 800daca:	3501      	adds	r5, #1
 800dacc:	2301      	movs	r3, #1
 800dace:	1076      	asrs	r6, r6, #1
 800dad0:	3708      	adds	r7, #8
 800dad2:	e76c      	b.n	800d9ae <_dtoa_r+0x3ce>
 800dad4:	2502      	movs	r5, #2
 800dad6:	e76f      	b.n	800d9b8 <_dtoa_r+0x3d8>
 800dad8:	9b01      	ldr	r3, [sp, #4]
 800dada:	f8cd a01c 	str.w	sl, [sp, #28]
 800dade:	930c      	str	r3, [sp, #48]	; 0x30
 800dae0:	e78d      	b.n	800d9fe <_dtoa_r+0x41e>
 800dae2:	9900      	ldr	r1, [sp, #0]
 800dae4:	980c      	ldr	r0, [sp, #48]	; 0x30
 800dae6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800dae8:	4b4e      	ldr	r3, [pc, #312]	; (800dc24 <_dtoa_r+0x644>)
 800daea:	ed9d 7b02 	vldr	d7, [sp, #8]
 800daee:	4401      	add	r1, r0
 800daf0:	9102      	str	r1, [sp, #8]
 800daf2:	9908      	ldr	r1, [sp, #32]
 800daf4:	eeb0 8a47 	vmov.f32	s16, s14
 800daf8:	eef0 8a67 	vmov.f32	s17, s15
 800dafc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800db00:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800db04:	2900      	cmp	r1, #0
 800db06:	d045      	beq.n	800db94 <_dtoa_r+0x5b4>
 800db08:	494c      	ldr	r1, [pc, #304]	; (800dc3c <_dtoa_r+0x65c>)
 800db0a:	2000      	movs	r0, #0
 800db0c:	f7f2 fe9e 	bl	800084c <__aeabi_ddiv>
 800db10:	ec53 2b18 	vmov	r2, r3, d8
 800db14:	f7f2 fbb8 	bl	8000288 <__aeabi_dsub>
 800db18:	9d00      	ldr	r5, [sp, #0]
 800db1a:	ec41 0b18 	vmov	d8, r0, r1
 800db1e:	4639      	mov	r1, r7
 800db20:	4630      	mov	r0, r6
 800db22:	f7f3 f819 	bl	8000b58 <__aeabi_d2iz>
 800db26:	900c      	str	r0, [sp, #48]	; 0x30
 800db28:	f7f2 fcfc 	bl	8000524 <__aeabi_i2d>
 800db2c:	4602      	mov	r2, r0
 800db2e:	460b      	mov	r3, r1
 800db30:	4630      	mov	r0, r6
 800db32:	4639      	mov	r1, r7
 800db34:	f7f2 fba8 	bl	8000288 <__aeabi_dsub>
 800db38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800db3a:	3330      	adds	r3, #48	; 0x30
 800db3c:	f805 3b01 	strb.w	r3, [r5], #1
 800db40:	ec53 2b18 	vmov	r2, r3, d8
 800db44:	4606      	mov	r6, r0
 800db46:	460f      	mov	r7, r1
 800db48:	f7f2 ffc8 	bl	8000adc <__aeabi_dcmplt>
 800db4c:	2800      	cmp	r0, #0
 800db4e:	d165      	bne.n	800dc1c <_dtoa_r+0x63c>
 800db50:	4632      	mov	r2, r6
 800db52:	463b      	mov	r3, r7
 800db54:	4935      	ldr	r1, [pc, #212]	; (800dc2c <_dtoa_r+0x64c>)
 800db56:	2000      	movs	r0, #0
 800db58:	f7f2 fb96 	bl	8000288 <__aeabi_dsub>
 800db5c:	ec53 2b18 	vmov	r2, r3, d8
 800db60:	f7f2 ffbc 	bl	8000adc <__aeabi_dcmplt>
 800db64:	2800      	cmp	r0, #0
 800db66:	f040 80b9 	bne.w	800dcdc <_dtoa_r+0x6fc>
 800db6a:	9b02      	ldr	r3, [sp, #8]
 800db6c:	429d      	cmp	r5, r3
 800db6e:	f43f af75 	beq.w	800da5c <_dtoa_r+0x47c>
 800db72:	4b2f      	ldr	r3, [pc, #188]	; (800dc30 <_dtoa_r+0x650>)
 800db74:	ec51 0b18 	vmov	r0, r1, d8
 800db78:	2200      	movs	r2, #0
 800db7a:	f7f2 fd3d 	bl	80005f8 <__aeabi_dmul>
 800db7e:	4b2c      	ldr	r3, [pc, #176]	; (800dc30 <_dtoa_r+0x650>)
 800db80:	ec41 0b18 	vmov	d8, r0, r1
 800db84:	2200      	movs	r2, #0
 800db86:	4630      	mov	r0, r6
 800db88:	4639      	mov	r1, r7
 800db8a:	f7f2 fd35 	bl	80005f8 <__aeabi_dmul>
 800db8e:	4606      	mov	r6, r0
 800db90:	460f      	mov	r7, r1
 800db92:	e7c4      	b.n	800db1e <_dtoa_r+0x53e>
 800db94:	ec51 0b17 	vmov	r0, r1, d7
 800db98:	f7f2 fd2e 	bl	80005f8 <__aeabi_dmul>
 800db9c:	9b02      	ldr	r3, [sp, #8]
 800db9e:	9d00      	ldr	r5, [sp, #0]
 800dba0:	930c      	str	r3, [sp, #48]	; 0x30
 800dba2:	ec41 0b18 	vmov	d8, r0, r1
 800dba6:	4639      	mov	r1, r7
 800dba8:	4630      	mov	r0, r6
 800dbaa:	f7f2 ffd5 	bl	8000b58 <__aeabi_d2iz>
 800dbae:	9011      	str	r0, [sp, #68]	; 0x44
 800dbb0:	f7f2 fcb8 	bl	8000524 <__aeabi_i2d>
 800dbb4:	4602      	mov	r2, r0
 800dbb6:	460b      	mov	r3, r1
 800dbb8:	4630      	mov	r0, r6
 800dbba:	4639      	mov	r1, r7
 800dbbc:	f7f2 fb64 	bl	8000288 <__aeabi_dsub>
 800dbc0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800dbc2:	3330      	adds	r3, #48	; 0x30
 800dbc4:	f805 3b01 	strb.w	r3, [r5], #1
 800dbc8:	9b02      	ldr	r3, [sp, #8]
 800dbca:	429d      	cmp	r5, r3
 800dbcc:	4606      	mov	r6, r0
 800dbce:	460f      	mov	r7, r1
 800dbd0:	f04f 0200 	mov.w	r2, #0
 800dbd4:	d134      	bne.n	800dc40 <_dtoa_r+0x660>
 800dbd6:	4b19      	ldr	r3, [pc, #100]	; (800dc3c <_dtoa_r+0x65c>)
 800dbd8:	ec51 0b18 	vmov	r0, r1, d8
 800dbdc:	f7f2 fb56 	bl	800028c <__adddf3>
 800dbe0:	4602      	mov	r2, r0
 800dbe2:	460b      	mov	r3, r1
 800dbe4:	4630      	mov	r0, r6
 800dbe6:	4639      	mov	r1, r7
 800dbe8:	f7f2 ff96 	bl	8000b18 <__aeabi_dcmpgt>
 800dbec:	2800      	cmp	r0, #0
 800dbee:	d175      	bne.n	800dcdc <_dtoa_r+0x6fc>
 800dbf0:	ec53 2b18 	vmov	r2, r3, d8
 800dbf4:	4911      	ldr	r1, [pc, #68]	; (800dc3c <_dtoa_r+0x65c>)
 800dbf6:	2000      	movs	r0, #0
 800dbf8:	f7f2 fb46 	bl	8000288 <__aeabi_dsub>
 800dbfc:	4602      	mov	r2, r0
 800dbfe:	460b      	mov	r3, r1
 800dc00:	4630      	mov	r0, r6
 800dc02:	4639      	mov	r1, r7
 800dc04:	f7f2 ff6a 	bl	8000adc <__aeabi_dcmplt>
 800dc08:	2800      	cmp	r0, #0
 800dc0a:	f43f af27 	beq.w	800da5c <_dtoa_r+0x47c>
 800dc0e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dc10:	1e6b      	subs	r3, r5, #1
 800dc12:	930c      	str	r3, [sp, #48]	; 0x30
 800dc14:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800dc18:	2b30      	cmp	r3, #48	; 0x30
 800dc1a:	d0f8      	beq.n	800dc0e <_dtoa_r+0x62e>
 800dc1c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800dc20:	e04a      	b.n	800dcb8 <_dtoa_r+0x6d8>
 800dc22:	bf00      	nop
 800dc24:	08010640 	.word	0x08010640
 800dc28:	08010618 	.word	0x08010618
 800dc2c:	3ff00000 	.word	0x3ff00000
 800dc30:	40240000 	.word	0x40240000
 800dc34:	401c0000 	.word	0x401c0000
 800dc38:	40140000 	.word	0x40140000
 800dc3c:	3fe00000 	.word	0x3fe00000
 800dc40:	4baf      	ldr	r3, [pc, #700]	; (800df00 <_dtoa_r+0x920>)
 800dc42:	f7f2 fcd9 	bl	80005f8 <__aeabi_dmul>
 800dc46:	4606      	mov	r6, r0
 800dc48:	460f      	mov	r7, r1
 800dc4a:	e7ac      	b.n	800dba6 <_dtoa_r+0x5c6>
 800dc4c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800dc50:	9d00      	ldr	r5, [sp, #0]
 800dc52:	4642      	mov	r2, r8
 800dc54:	464b      	mov	r3, r9
 800dc56:	4630      	mov	r0, r6
 800dc58:	4639      	mov	r1, r7
 800dc5a:	f7f2 fdf7 	bl	800084c <__aeabi_ddiv>
 800dc5e:	f7f2 ff7b 	bl	8000b58 <__aeabi_d2iz>
 800dc62:	9002      	str	r0, [sp, #8]
 800dc64:	f7f2 fc5e 	bl	8000524 <__aeabi_i2d>
 800dc68:	4642      	mov	r2, r8
 800dc6a:	464b      	mov	r3, r9
 800dc6c:	f7f2 fcc4 	bl	80005f8 <__aeabi_dmul>
 800dc70:	4602      	mov	r2, r0
 800dc72:	460b      	mov	r3, r1
 800dc74:	4630      	mov	r0, r6
 800dc76:	4639      	mov	r1, r7
 800dc78:	f7f2 fb06 	bl	8000288 <__aeabi_dsub>
 800dc7c:	9e02      	ldr	r6, [sp, #8]
 800dc7e:	9f01      	ldr	r7, [sp, #4]
 800dc80:	3630      	adds	r6, #48	; 0x30
 800dc82:	f805 6b01 	strb.w	r6, [r5], #1
 800dc86:	9e00      	ldr	r6, [sp, #0]
 800dc88:	1bae      	subs	r6, r5, r6
 800dc8a:	42b7      	cmp	r7, r6
 800dc8c:	4602      	mov	r2, r0
 800dc8e:	460b      	mov	r3, r1
 800dc90:	d137      	bne.n	800dd02 <_dtoa_r+0x722>
 800dc92:	f7f2 fafb 	bl	800028c <__adddf3>
 800dc96:	4642      	mov	r2, r8
 800dc98:	464b      	mov	r3, r9
 800dc9a:	4606      	mov	r6, r0
 800dc9c:	460f      	mov	r7, r1
 800dc9e:	f7f2 ff3b 	bl	8000b18 <__aeabi_dcmpgt>
 800dca2:	b9c8      	cbnz	r0, 800dcd8 <_dtoa_r+0x6f8>
 800dca4:	4642      	mov	r2, r8
 800dca6:	464b      	mov	r3, r9
 800dca8:	4630      	mov	r0, r6
 800dcaa:	4639      	mov	r1, r7
 800dcac:	f7f2 ff0c 	bl	8000ac8 <__aeabi_dcmpeq>
 800dcb0:	b110      	cbz	r0, 800dcb8 <_dtoa_r+0x6d8>
 800dcb2:	9b02      	ldr	r3, [sp, #8]
 800dcb4:	07d9      	lsls	r1, r3, #31
 800dcb6:	d40f      	bmi.n	800dcd8 <_dtoa_r+0x6f8>
 800dcb8:	4620      	mov	r0, r4
 800dcba:	4659      	mov	r1, fp
 800dcbc:	f000 ff2a 	bl	800eb14 <_Bfree>
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	702b      	strb	r3, [r5, #0]
 800dcc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800dcc6:	f10a 0001 	add.w	r0, sl, #1
 800dcca:	6018      	str	r0, [r3, #0]
 800dccc:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	f43f acd8 	beq.w	800d684 <_dtoa_r+0xa4>
 800dcd4:	601d      	str	r5, [r3, #0]
 800dcd6:	e4d5      	b.n	800d684 <_dtoa_r+0xa4>
 800dcd8:	f8cd a01c 	str.w	sl, [sp, #28]
 800dcdc:	462b      	mov	r3, r5
 800dcde:	461d      	mov	r5, r3
 800dce0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dce4:	2a39      	cmp	r2, #57	; 0x39
 800dce6:	d108      	bne.n	800dcfa <_dtoa_r+0x71a>
 800dce8:	9a00      	ldr	r2, [sp, #0]
 800dcea:	429a      	cmp	r2, r3
 800dcec:	d1f7      	bne.n	800dcde <_dtoa_r+0x6fe>
 800dcee:	9a07      	ldr	r2, [sp, #28]
 800dcf0:	9900      	ldr	r1, [sp, #0]
 800dcf2:	3201      	adds	r2, #1
 800dcf4:	9207      	str	r2, [sp, #28]
 800dcf6:	2230      	movs	r2, #48	; 0x30
 800dcf8:	700a      	strb	r2, [r1, #0]
 800dcfa:	781a      	ldrb	r2, [r3, #0]
 800dcfc:	3201      	adds	r2, #1
 800dcfe:	701a      	strb	r2, [r3, #0]
 800dd00:	e78c      	b.n	800dc1c <_dtoa_r+0x63c>
 800dd02:	4b7f      	ldr	r3, [pc, #508]	; (800df00 <_dtoa_r+0x920>)
 800dd04:	2200      	movs	r2, #0
 800dd06:	f7f2 fc77 	bl	80005f8 <__aeabi_dmul>
 800dd0a:	2200      	movs	r2, #0
 800dd0c:	2300      	movs	r3, #0
 800dd0e:	4606      	mov	r6, r0
 800dd10:	460f      	mov	r7, r1
 800dd12:	f7f2 fed9 	bl	8000ac8 <__aeabi_dcmpeq>
 800dd16:	2800      	cmp	r0, #0
 800dd18:	d09b      	beq.n	800dc52 <_dtoa_r+0x672>
 800dd1a:	e7cd      	b.n	800dcb8 <_dtoa_r+0x6d8>
 800dd1c:	9a08      	ldr	r2, [sp, #32]
 800dd1e:	2a00      	cmp	r2, #0
 800dd20:	f000 80c4 	beq.w	800deac <_dtoa_r+0x8cc>
 800dd24:	9a05      	ldr	r2, [sp, #20]
 800dd26:	2a01      	cmp	r2, #1
 800dd28:	f300 80a8 	bgt.w	800de7c <_dtoa_r+0x89c>
 800dd2c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800dd2e:	2a00      	cmp	r2, #0
 800dd30:	f000 80a0 	beq.w	800de74 <_dtoa_r+0x894>
 800dd34:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dd38:	9e06      	ldr	r6, [sp, #24]
 800dd3a:	4645      	mov	r5, r8
 800dd3c:	9a04      	ldr	r2, [sp, #16]
 800dd3e:	2101      	movs	r1, #1
 800dd40:	441a      	add	r2, r3
 800dd42:	4620      	mov	r0, r4
 800dd44:	4498      	add	r8, r3
 800dd46:	9204      	str	r2, [sp, #16]
 800dd48:	f000 ffea 	bl	800ed20 <__i2b>
 800dd4c:	4607      	mov	r7, r0
 800dd4e:	2d00      	cmp	r5, #0
 800dd50:	dd0b      	ble.n	800dd6a <_dtoa_r+0x78a>
 800dd52:	9b04      	ldr	r3, [sp, #16]
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	dd08      	ble.n	800dd6a <_dtoa_r+0x78a>
 800dd58:	42ab      	cmp	r3, r5
 800dd5a:	9a04      	ldr	r2, [sp, #16]
 800dd5c:	bfa8      	it	ge
 800dd5e:	462b      	movge	r3, r5
 800dd60:	eba8 0803 	sub.w	r8, r8, r3
 800dd64:	1aed      	subs	r5, r5, r3
 800dd66:	1ad3      	subs	r3, r2, r3
 800dd68:	9304      	str	r3, [sp, #16]
 800dd6a:	9b06      	ldr	r3, [sp, #24]
 800dd6c:	b1fb      	cbz	r3, 800ddae <_dtoa_r+0x7ce>
 800dd6e:	9b08      	ldr	r3, [sp, #32]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	f000 809f 	beq.w	800deb4 <_dtoa_r+0x8d4>
 800dd76:	2e00      	cmp	r6, #0
 800dd78:	dd11      	ble.n	800dd9e <_dtoa_r+0x7be>
 800dd7a:	4639      	mov	r1, r7
 800dd7c:	4632      	mov	r2, r6
 800dd7e:	4620      	mov	r0, r4
 800dd80:	f001 f88a 	bl	800ee98 <__pow5mult>
 800dd84:	465a      	mov	r2, fp
 800dd86:	4601      	mov	r1, r0
 800dd88:	4607      	mov	r7, r0
 800dd8a:	4620      	mov	r0, r4
 800dd8c:	f000 ffde 	bl	800ed4c <__multiply>
 800dd90:	4659      	mov	r1, fp
 800dd92:	9007      	str	r0, [sp, #28]
 800dd94:	4620      	mov	r0, r4
 800dd96:	f000 febd 	bl	800eb14 <_Bfree>
 800dd9a:	9b07      	ldr	r3, [sp, #28]
 800dd9c:	469b      	mov	fp, r3
 800dd9e:	9b06      	ldr	r3, [sp, #24]
 800dda0:	1b9a      	subs	r2, r3, r6
 800dda2:	d004      	beq.n	800ddae <_dtoa_r+0x7ce>
 800dda4:	4659      	mov	r1, fp
 800dda6:	4620      	mov	r0, r4
 800dda8:	f001 f876 	bl	800ee98 <__pow5mult>
 800ddac:	4683      	mov	fp, r0
 800ddae:	2101      	movs	r1, #1
 800ddb0:	4620      	mov	r0, r4
 800ddb2:	f000 ffb5 	bl	800ed20 <__i2b>
 800ddb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	4606      	mov	r6, r0
 800ddbc:	dd7c      	ble.n	800deb8 <_dtoa_r+0x8d8>
 800ddbe:	461a      	mov	r2, r3
 800ddc0:	4601      	mov	r1, r0
 800ddc2:	4620      	mov	r0, r4
 800ddc4:	f001 f868 	bl	800ee98 <__pow5mult>
 800ddc8:	9b05      	ldr	r3, [sp, #20]
 800ddca:	2b01      	cmp	r3, #1
 800ddcc:	4606      	mov	r6, r0
 800ddce:	dd76      	ble.n	800debe <_dtoa_r+0x8de>
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	9306      	str	r3, [sp, #24]
 800ddd4:	6933      	ldr	r3, [r6, #16]
 800ddd6:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800ddda:	6918      	ldr	r0, [r3, #16]
 800dddc:	f000 ff50 	bl	800ec80 <__hi0bits>
 800dde0:	f1c0 0020 	rsb	r0, r0, #32
 800dde4:	9b04      	ldr	r3, [sp, #16]
 800dde6:	4418      	add	r0, r3
 800dde8:	f010 001f 	ands.w	r0, r0, #31
 800ddec:	f000 8086 	beq.w	800defc <_dtoa_r+0x91c>
 800ddf0:	f1c0 0320 	rsb	r3, r0, #32
 800ddf4:	2b04      	cmp	r3, #4
 800ddf6:	dd7f      	ble.n	800def8 <_dtoa_r+0x918>
 800ddf8:	f1c0 001c 	rsb	r0, r0, #28
 800ddfc:	9b04      	ldr	r3, [sp, #16]
 800ddfe:	4403      	add	r3, r0
 800de00:	4480      	add	r8, r0
 800de02:	4405      	add	r5, r0
 800de04:	9304      	str	r3, [sp, #16]
 800de06:	f1b8 0f00 	cmp.w	r8, #0
 800de0a:	dd05      	ble.n	800de18 <_dtoa_r+0x838>
 800de0c:	4659      	mov	r1, fp
 800de0e:	4642      	mov	r2, r8
 800de10:	4620      	mov	r0, r4
 800de12:	f001 f89b 	bl	800ef4c <__lshift>
 800de16:	4683      	mov	fp, r0
 800de18:	9b04      	ldr	r3, [sp, #16]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	dd05      	ble.n	800de2a <_dtoa_r+0x84a>
 800de1e:	4631      	mov	r1, r6
 800de20:	461a      	mov	r2, r3
 800de22:	4620      	mov	r0, r4
 800de24:	f001 f892 	bl	800ef4c <__lshift>
 800de28:	4606      	mov	r6, r0
 800de2a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	d069      	beq.n	800df04 <_dtoa_r+0x924>
 800de30:	4631      	mov	r1, r6
 800de32:	4658      	mov	r0, fp
 800de34:	f001 f8f6 	bl	800f024 <__mcmp>
 800de38:	2800      	cmp	r0, #0
 800de3a:	da63      	bge.n	800df04 <_dtoa_r+0x924>
 800de3c:	2300      	movs	r3, #0
 800de3e:	4659      	mov	r1, fp
 800de40:	220a      	movs	r2, #10
 800de42:	4620      	mov	r0, r4
 800de44:	f000 fe88 	bl	800eb58 <__multadd>
 800de48:	9b08      	ldr	r3, [sp, #32]
 800de4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800de4e:	4683      	mov	fp, r0
 800de50:	2b00      	cmp	r3, #0
 800de52:	f000 818f 	beq.w	800e174 <_dtoa_r+0xb94>
 800de56:	4639      	mov	r1, r7
 800de58:	2300      	movs	r3, #0
 800de5a:	220a      	movs	r2, #10
 800de5c:	4620      	mov	r0, r4
 800de5e:	f000 fe7b 	bl	800eb58 <__multadd>
 800de62:	f1b9 0f00 	cmp.w	r9, #0
 800de66:	4607      	mov	r7, r0
 800de68:	f300 808e 	bgt.w	800df88 <_dtoa_r+0x9a8>
 800de6c:	9b05      	ldr	r3, [sp, #20]
 800de6e:	2b02      	cmp	r3, #2
 800de70:	dc50      	bgt.n	800df14 <_dtoa_r+0x934>
 800de72:	e089      	b.n	800df88 <_dtoa_r+0x9a8>
 800de74:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800de76:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800de7a:	e75d      	b.n	800dd38 <_dtoa_r+0x758>
 800de7c:	9b01      	ldr	r3, [sp, #4]
 800de7e:	1e5e      	subs	r6, r3, #1
 800de80:	9b06      	ldr	r3, [sp, #24]
 800de82:	42b3      	cmp	r3, r6
 800de84:	bfbf      	itttt	lt
 800de86:	9b06      	ldrlt	r3, [sp, #24]
 800de88:	9606      	strlt	r6, [sp, #24]
 800de8a:	1af2      	sublt	r2, r6, r3
 800de8c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800de8e:	bfb6      	itet	lt
 800de90:	189b      	addlt	r3, r3, r2
 800de92:	1b9e      	subge	r6, r3, r6
 800de94:	930d      	strlt	r3, [sp, #52]	; 0x34
 800de96:	9b01      	ldr	r3, [sp, #4]
 800de98:	bfb8      	it	lt
 800de9a:	2600      	movlt	r6, #0
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	bfb5      	itete	lt
 800dea0:	eba8 0503 	sublt.w	r5, r8, r3
 800dea4:	9b01      	ldrge	r3, [sp, #4]
 800dea6:	2300      	movlt	r3, #0
 800dea8:	4645      	movge	r5, r8
 800deaa:	e747      	b.n	800dd3c <_dtoa_r+0x75c>
 800deac:	9e06      	ldr	r6, [sp, #24]
 800deae:	9f08      	ldr	r7, [sp, #32]
 800deb0:	4645      	mov	r5, r8
 800deb2:	e74c      	b.n	800dd4e <_dtoa_r+0x76e>
 800deb4:	9a06      	ldr	r2, [sp, #24]
 800deb6:	e775      	b.n	800dda4 <_dtoa_r+0x7c4>
 800deb8:	9b05      	ldr	r3, [sp, #20]
 800deba:	2b01      	cmp	r3, #1
 800debc:	dc18      	bgt.n	800def0 <_dtoa_r+0x910>
 800debe:	9b02      	ldr	r3, [sp, #8]
 800dec0:	b9b3      	cbnz	r3, 800def0 <_dtoa_r+0x910>
 800dec2:	9b03      	ldr	r3, [sp, #12]
 800dec4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dec8:	b9a3      	cbnz	r3, 800def4 <_dtoa_r+0x914>
 800deca:	9b03      	ldr	r3, [sp, #12]
 800decc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800ded0:	0d1b      	lsrs	r3, r3, #20
 800ded2:	051b      	lsls	r3, r3, #20
 800ded4:	b12b      	cbz	r3, 800dee2 <_dtoa_r+0x902>
 800ded6:	9b04      	ldr	r3, [sp, #16]
 800ded8:	3301      	adds	r3, #1
 800deda:	9304      	str	r3, [sp, #16]
 800dedc:	f108 0801 	add.w	r8, r8, #1
 800dee0:	2301      	movs	r3, #1
 800dee2:	9306      	str	r3, [sp, #24]
 800dee4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dee6:	2b00      	cmp	r3, #0
 800dee8:	f47f af74 	bne.w	800ddd4 <_dtoa_r+0x7f4>
 800deec:	2001      	movs	r0, #1
 800deee:	e779      	b.n	800dde4 <_dtoa_r+0x804>
 800def0:	2300      	movs	r3, #0
 800def2:	e7f6      	b.n	800dee2 <_dtoa_r+0x902>
 800def4:	9b02      	ldr	r3, [sp, #8]
 800def6:	e7f4      	b.n	800dee2 <_dtoa_r+0x902>
 800def8:	d085      	beq.n	800de06 <_dtoa_r+0x826>
 800defa:	4618      	mov	r0, r3
 800defc:	301c      	adds	r0, #28
 800defe:	e77d      	b.n	800ddfc <_dtoa_r+0x81c>
 800df00:	40240000 	.word	0x40240000
 800df04:	9b01      	ldr	r3, [sp, #4]
 800df06:	2b00      	cmp	r3, #0
 800df08:	dc38      	bgt.n	800df7c <_dtoa_r+0x99c>
 800df0a:	9b05      	ldr	r3, [sp, #20]
 800df0c:	2b02      	cmp	r3, #2
 800df0e:	dd35      	ble.n	800df7c <_dtoa_r+0x99c>
 800df10:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800df14:	f1b9 0f00 	cmp.w	r9, #0
 800df18:	d10d      	bne.n	800df36 <_dtoa_r+0x956>
 800df1a:	4631      	mov	r1, r6
 800df1c:	464b      	mov	r3, r9
 800df1e:	2205      	movs	r2, #5
 800df20:	4620      	mov	r0, r4
 800df22:	f000 fe19 	bl	800eb58 <__multadd>
 800df26:	4601      	mov	r1, r0
 800df28:	4606      	mov	r6, r0
 800df2a:	4658      	mov	r0, fp
 800df2c:	f001 f87a 	bl	800f024 <__mcmp>
 800df30:	2800      	cmp	r0, #0
 800df32:	f73f adbd 	bgt.w	800dab0 <_dtoa_r+0x4d0>
 800df36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df38:	9d00      	ldr	r5, [sp, #0]
 800df3a:	ea6f 0a03 	mvn.w	sl, r3
 800df3e:	f04f 0800 	mov.w	r8, #0
 800df42:	4631      	mov	r1, r6
 800df44:	4620      	mov	r0, r4
 800df46:	f000 fde5 	bl	800eb14 <_Bfree>
 800df4a:	2f00      	cmp	r7, #0
 800df4c:	f43f aeb4 	beq.w	800dcb8 <_dtoa_r+0x6d8>
 800df50:	f1b8 0f00 	cmp.w	r8, #0
 800df54:	d005      	beq.n	800df62 <_dtoa_r+0x982>
 800df56:	45b8      	cmp	r8, r7
 800df58:	d003      	beq.n	800df62 <_dtoa_r+0x982>
 800df5a:	4641      	mov	r1, r8
 800df5c:	4620      	mov	r0, r4
 800df5e:	f000 fdd9 	bl	800eb14 <_Bfree>
 800df62:	4639      	mov	r1, r7
 800df64:	4620      	mov	r0, r4
 800df66:	f000 fdd5 	bl	800eb14 <_Bfree>
 800df6a:	e6a5      	b.n	800dcb8 <_dtoa_r+0x6d8>
 800df6c:	2600      	movs	r6, #0
 800df6e:	4637      	mov	r7, r6
 800df70:	e7e1      	b.n	800df36 <_dtoa_r+0x956>
 800df72:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800df74:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800df78:	4637      	mov	r7, r6
 800df7a:	e599      	b.n	800dab0 <_dtoa_r+0x4d0>
 800df7c:	9b08      	ldr	r3, [sp, #32]
 800df7e:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800df82:	2b00      	cmp	r3, #0
 800df84:	f000 80fd 	beq.w	800e182 <_dtoa_r+0xba2>
 800df88:	2d00      	cmp	r5, #0
 800df8a:	dd05      	ble.n	800df98 <_dtoa_r+0x9b8>
 800df8c:	4639      	mov	r1, r7
 800df8e:	462a      	mov	r2, r5
 800df90:	4620      	mov	r0, r4
 800df92:	f000 ffdb 	bl	800ef4c <__lshift>
 800df96:	4607      	mov	r7, r0
 800df98:	9b06      	ldr	r3, [sp, #24]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d05c      	beq.n	800e058 <_dtoa_r+0xa78>
 800df9e:	6879      	ldr	r1, [r7, #4]
 800dfa0:	4620      	mov	r0, r4
 800dfa2:	f000 fd77 	bl	800ea94 <_Balloc>
 800dfa6:	4605      	mov	r5, r0
 800dfa8:	b928      	cbnz	r0, 800dfb6 <_dtoa_r+0x9d6>
 800dfaa:	4b80      	ldr	r3, [pc, #512]	; (800e1ac <_dtoa_r+0xbcc>)
 800dfac:	4602      	mov	r2, r0
 800dfae:	f240 21ea 	movw	r1, #746	; 0x2ea
 800dfb2:	f7ff bb2e 	b.w	800d612 <_dtoa_r+0x32>
 800dfb6:	693a      	ldr	r2, [r7, #16]
 800dfb8:	3202      	adds	r2, #2
 800dfba:	0092      	lsls	r2, r2, #2
 800dfbc:	f107 010c 	add.w	r1, r7, #12
 800dfc0:	300c      	adds	r0, #12
 800dfc2:	f7fd fbde 	bl	800b782 <memcpy>
 800dfc6:	2201      	movs	r2, #1
 800dfc8:	4629      	mov	r1, r5
 800dfca:	4620      	mov	r0, r4
 800dfcc:	f000 ffbe 	bl	800ef4c <__lshift>
 800dfd0:	9b00      	ldr	r3, [sp, #0]
 800dfd2:	3301      	adds	r3, #1
 800dfd4:	9301      	str	r3, [sp, #4]
 800dfd6:	9b00      	ldr	r3, [sp, #0]
 800dfd8:	444b      	add	r3, r9
 800dfda:	9307      	str	r3, [sp, #28]
 800dfdc:	9b02      	ldr	r3, [sp, #8]
 800dfde:	f003 0301 	and.w	r3, r3, #1
 800dfe2:	46b8      	mov	r8, r7
 800dfe4:	9306      	str	r3, [sp, #24]
 800dfe6:	4607      	mov	r7, r0
 800dfe8:	9b01      	ldr	r3, [sp, #4]
 800dfea:	4631      	mov	r1, r6
 800dfec:	3b01      	subs	r3, #1
 800dfee:	4658      	mov	r0, fp
 800dff0:	9302      	str	r3, [sp, #8]
 800dff2:	f7ff fa69 	bl	800d4c8 <quorem>
 800dff6:	4603      	mov	r3, r0
 800dff8:	3330      	adds	r3, #48	; 0x30
 800dffa:	9004      	str	r0, [sp, #16]
 800dffc:	4641      	mov	r1, r8
 800dffe:	4658      	mov	r0, fp
 800e000:	9308      	str	r3, [sp, #32]
 800e002:	f001 f80f 	bl	800f024 <__mcmp>
 800e006:	463a      	mov	r2, r7
 800e008:	4681      	mov	r9, r0
 800e00a:	4631      	mov	r1, r6
 800e00c:	4620      	mov	r0, r4
 800e00e:	f001 f825 	bl	800f05c <__mdiff>
 800e012:	68c2      	ldr	r2, [r0, #12]
 800e014:	9b08      	ldr	r3, [sp, #32]
 800e016:	4605      	mov	r5, r0
 800e018:	bb02      	cbnz	r2, 800e05c <_dtoa_r+0xa7c>
 800e01a:	4601      	mov	r1, r0
 800e01c:	4658      	mov	r0, fp
 800e01e:	f001 f801 	bl	800f024 <__mcmp>
 800e022:	9b08      	ldr	r3, [sp, #32]
 800e024:	4602      	mov	r2, r0
 800e026:	4629      	mov	r1, r5
 800e028:	4620      	mov	r0, r4
 800e02a:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800e02e:	f000 fd71 	bl	800eb14 <_Bfree>
 800e032:	9b05      	ldr	r3, [sp, #20]
 800e034:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e036:	9d01      	ldr	r5, [sp, #4]
 800e038:	ea43 0102 	orr.w	r1, r3, r2
 800e03c:	9b06      	ldr	r3, [sp, #24]
 800e03e:	430b      	orrs	r3, r1
 800e040:	9b08      	ldr	r3, [sp, #32]
 800e042:	d10d      	bne.n	800e060 <_dtoa_r+0xa80>
 800e044:	2b39      	cmp	r3, #57	; 0x39
 800e046:	d029      	beq.n	800e09c <_dtoa_r+0xabc>
 800e048:	f1b9 0f00 	cmp.w	r9, #0
 800e04c:	dd01      	ble.n	800e052 <_dtoa_r+0xa72>
 800e04e:	9b04      	ldr	r3, [sp, #16]
 800e050:	3331      	adds	r3, #49	; 0x31
 800e052:	9a02      	ldr	r2, [sp, #8]
 800e054:	7013      	strb	r3, [r2, #0]
 800e056:	e774      	b.n	800df42 <_dtoa_r+0x962>
 800e058:	4638      	mov	r0, r7
 800e05a:	e7b9      	b.n	800dfd0 <_dtoa_r+0x9f0>
 800e05c:	2201      	movs	r2, #1
 800e05e:	e7e2      	b.n	800e026 <_dtoa_r+0xa46>
 800e060:	f1b9 0f00 	cmp.w	r9, #0
 800e064:	db06      	blt.n	800e074 <_dtoa_r+0xa94>
 800e066:	9905      	ldr	r1, [sp, #20]
 800e068:	ea41 0909 	orr.w	r9, r1, r9
 800e06c:	9906      	ldr	r1, [sp, #24]
 800e06e:	ea59 0101 	orrs.w	r1, r9, r1
 800e072:	d120      	bne.n	800e0b6 <_dtoa_r+0xad6>
 800e074:	2a00      	cmp	r2, #0
 800e076:	ddec      	ble.n	800e052 <_dtoa_r+0xa72>
 800e078:	4659      	mov	r1, fp
 800e07a:	2201      	movs	r2, #1
 800e07c:	4620      	mov	r0, r4
 800e07e:	9301      	str	r3, [sp, #4]
 800e080:	f000 ff64 	bl	800ef4c <__lshift>
 800e084:	4631      	mov	r1, r6
 800e086:	4683      	mov	fp, r0
 800e088:	f000 ffcc 	bl	800f024 <__mcmp>
 800e08c:	2800      	cmp	r0, #0
 800e08e:	9b01      	ldr	r3, [sp, #4]
 800e090:	dc02      	bgt.n	800e098 <_dtoa_r+0xab8>
 800e092:	d1de      	bne.n	800e052 <_dtoa_r+0xa72>
 800e094:	07da      	lsls	r2, r3, #31
 800e096:	d5dc      	bpl.n	800e052 <_dtoa_r+0xa72>
 800e098:	2b39      	cmp	r3, #57	; 0x39
 800e09a:	d1d8      	bne.n	800e04e <_dtoa_r+0xa6e>
 800e09c:	9a02      	ldr	r2, [sp, #8]
 800e09e:	2339      	movs	r3, #57	; 0x39
 800e0a0:	7013      	strb	r3, [r2, #0]
 800e0a2:	462b      	mov	r3, r5
 800e0a4:	461d      	mov	r5, r3
 800e0a6:	3b01      	subs	r3, #1
 800e0a8:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800e0ac:	2a39      	cmp	r2, #57	; 0x39
 800e0ae:	d050      	beq.n	800e152 <_dtoa_r+0xb72>
 800e0b0:	3201      	adds	r2, #1
 800e0b2:	701a      	strb	r2, [r3, #0]
 800e0b4:	e745      	b.n	800df42 <_dtoa_r+0x962>
 800e0b6:	2a00      	cmp	r2, #0
 800e0b8:	dd03      	ble.n	800e0c2 <_dtoa_r+0xae2>
 800e0ba:	2b39      	cmp	r3, #57	; 0x39
 800e0bc:	d0ee      	beq.n	800e09c <_dtoa_r+0xabc>
 800e0be:	3301      	adds	r3, #1
 800e0c0:	e7c7      	b.n	800e052 <_dtoa_r+0xa72>
 800e0c2:	9a01      	ldr	r2, [sp, #4]
 800e0c4:	9907      	ldr	r1, [sp, #28]
 800e0c6:	f802 3c01 	strb.w	r3, [r2, #-1]
 800e0ca:	428a      	cmp	r2, r1
 800e0cc:	d02a      	beq.n	800e124 <_dtoa_r+0xb44>
 800e0ce:	4659      	mov	r1, fp
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	220a      	movs	r2, #10
 800e0d4:	4620      	mov	r0, r4
 800e0d6:	f000 fd3f 	bl	800eb58 <__multadd>
 800e0da:	45b8      	cmp	r8, r7
 800e0dc:	4683      	mov	fp, r0
 800e0de:	f04f 0300 	mov.w	r3, #0
 800e0e2:	f04f 020a 	mov.w	r2, #10
 800e0e6:	4641      	mov	r1, r8
 800e0e8:	4620      	mov	r0, r4
 800e0ea:	d107      	bne.n	800e0fc <_dtoa_r+0xb1c>
 800e0ec:	f000 fd34 	bl	800eb58 <__multadd>
 800e0f0:	4680      	mov	r8, r0
 800e0f2:	4607      	mov	r7, r0
 800e0f4:	9b01      	ldr	r3, [sp, #4]
 800e0f6:	3301      	adds	r3, #1
 800e0f8:	9301      	str	r3, [sp, #4]
 800e0fa:	e775      	b.n	800dfe8 <_dtoa_r+0xa08>
 800e0fc:	f000 fd2c 	bl	800eb58 <__multadd>
 800e100:	4639      	mov	r1, r7
 800e102:	4680      	mov	r8, r0
 800e104:	2300      	movs	r3, #0
 800e106:	220a      	movs	r2, #10
 800e108:	4620      	mov	r0, r4
 800e10a:	f000 fd25 	bl	800eb58 <__multadd>
 800e10e:	4607      	mov	r7, r0
 800e110:	e7f0      	b.n	800e0f4 <_dtoa_r+0xb14>
 800e112:	f1b9 0f00 	cmp.w	r9, #0
 800e116:	9a00      	ldr	r2, [sp, #0]
 800e118:	bfcc      	ite	gt
 800e11a:	464d      	movgt	r5, r9
 800e11c:	2501      	movle	r5, #1
 800e11e:	4415      	add	r5, r2
 800e120:	f04f 0800 	mov.w	r8, #0
 800e124:	4659      	mov	r1, fp
 800e126:	2201      	movs	r2, #1
 800e128:	4620      	mov	r0, r4
 800e12a:	9301      	str	r3, [sp, #4]
 800e12c:	f000 ff0e 	bl	800ef4c <__lshift>
 800e130:	4631      	mov	r1, r6
 800e132:	4683      	mov	fp, r0
 800e134:	f000 ff76 	bl	800f024 <__mcmp>
 800e138:	2800      	cmp	r0, #0
 800e13a:	dcb2      	bgt.n	800e0a2 <_dtoa_r+0xac2>
 800e13c:	d102      	bne.n	800e144 <_dtoa_r+0xb64>
 800e13e:	9b01      	ldr	r3, [sp, #4]
 800e140:	07db      	lsls	r3, r3, #31
 800e142:	d4ae      	bmi.n	800e0a2 <_dtoa_r+0xac2>
 800e144:	462b      	mov	r3, r5
 800e146:	461d      	mov	r5, r3
 800e148:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e14c:	2a30      	cmp	r2, #48	; 0x30
 800e14e:	d0fa      	beq.n	800e146 <_dtoa_r+0xb66>
 800e150:	e6f7      	b.n	800df42 <_dtoa_r+0x962>
 800e152:	9a00      	ldr	r2, [sp, #0]
 800e154:	429a      	cmp	r2, r3
 800e156:	d1a5      	bne.n	800e0a4 <_dtoa_r+0xac4>
 800e158:	f10a 0a01 	add.w	sl, sl, #1
 800e15c:	2331      	movs	r3, #49	; 0x31
 800e15e:	e779      	b.n	800e054 <_dtoa_r+0xa74>
 800e160:	4b13      	ldr	r3, [pc, #76]	; (800e1b0 <_dtoa_r+0xbd0>)
 800e162:	f7ff baaf 	b.w	800d6c4 <_dtoa_r+0xe4>
 800e166:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e168:	2b00      	cmp	r3, #0
 800e16a:	f47f aa86 	bne.w	800d67a <_dtoa_r+0x9a>
 800e16e:	4b11      	ldr	r3, [pc, #68]	; (800e1b4 <_dtoa_r+0xbd4>)
 800e170:	f7ff baa8 	b.w	800d6c4 <_dtoa_r+0xe4>
 800e174:	f1b9 0f00 	cmp.w	r9, #0
 800e178:	dc03      	bgt.n	800e182 <_dtoa_r+0xba2>
 800e17a:	9b05      	ldr	r3, [sp, #20]
 800e17c:	2b02      	cmp	r3, #2
 800e17e:	f73f aec9 	bgt.w	800df14 <_dtoa_r+0x934>
 800e182:	9d00      	ldr	r5, [sp, #0]
 800e184:	4631      	mov	r1, r6
 800e186:	4658      	mov	r0, fp
 800e188:	f7ff f99e 	bl	800d4c8 <quorem>
 800e18c:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800e190:	f805 3b01 	strb.w	r3, [r5], #1
 800e194:	9a00      	ldr	r2, [sp, #0]
 800e196:	1aaa      	subs	r2, r5, r2
 800e198:	4591      	cmp	r9, r2
 800e19a:	ddba      	ble.n	800e112 <_dtoa_r+0xb32>
 800e19c:	4659      	mov	r1, fp
 800e19e:	2300      	movs	r3, #0
 800e1a0:	220a      	movs	r2, #10
 800e1a2:	4620      	mov	r0, r4
 800e1a4:	f000 fcd8 	bl	800eb58 <__multadd>
 800e1a8:	4683      	mov	fp, r0
 800e1aa:	e7eb      	b.n	800e184 <_dtoa_r+0xba4>
 800e1ac:	08010524 	.word	0x08010524
 800e1b0:	08010324 	.word	0x08010324
 800e1b4:	080104a1 	.word	0x080104a1

0800e1b8 <__sflush_r>:
 800e1b8:	898a      	ldrh	r2, [r1, #12]
 800e1ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1be:	4605      	mov	r5, r0
 800e1c0:	0710      	lsls	r0, r2, #28
 800e1c2:	460c      	mov	r4, r1
 800e1c4:	d458      	bmi.n	800e278 <__sflush_r+0xc0>
 800e1c6:	684b      	ldr	r3, [r1, #4]
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	dc05      	bgt.n	800e1d8 <__sflush_r+0x20>
 800e1cc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e1ce:	2b00      	cmp	r3, #0
 800e1d0:	dc02      	bgt.n	800e1d8 <__sflush_r+0x20>
 800e1d2:	2000      	movs	r0, #0
 800e1d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1d8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e1da:	2e00      	cmp	r6, #0
 800e1dc:	d0f9      	beq.n	800e1d2 <__sflush_r+0x1a>
 800e1de:	2300      	movs	r3, #0
 800e1e0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e1e4:	682f      	ldr	r7, [r5, #0]
 800e1e6:	602b      	str	r3, [r5, #0]
 800e1e8:	d032      	beq.n	800e250 <__sflush_r+0x98>
 800e1ea:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e1ec:	89a3      	ldrh	r3, [r4, #12]
 800e1ee:	075a      	lsls	r2, r3, #29
 800e1f0:	d505      	bpl.n	800e1fe <__sflush_r+0x46>
 800e1f2:	6863      	ldr	r3, [r4, #4]
 800e1f4:	1ac0      	subs	r0, r0, r3
 800e1f6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e1f8:	b10b      	cbz	r3, 800e1fe <__sflush_r+0x46>
 800e1fa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e1fc:	1ac0      	subs	r0, r0, r3
 800e1fe:	2300      	movs	r3, #0
 800e200:	4602      	mov	r2, r0
 800e202:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e204:	6a21      	ldr	r1, [r4, #32]
 800e206:	4628      	mov	r0, r5
 800e208:	47b0      	blx	r6
 800e20a:	1c43      	adds	r3, r0, #1
 800e20c:	89a3      	ldrh	r3, [r4, #12]
 800e20e:	d106      	bne.n	800e21e <__sflush_r+0x66>
 800e210:	6829      	ldr	r1, [r5, #0]
 800e212:	291d      	cmp	r1, #29
 800e214:	d82c      	bhi.n	800e270 <__sflush_r+0xb8>
 800e216:	4a2a      	ldr	r2, [pc, #168]	; (800e2c0 <__sflush_r+0x108>)
 800e218:	40ca      	lsrs	r2, r1
 800e21a:	07d6      	lsls	r6, r2, #31
 800e21c:	d528      	bpl.n	800e270 <__sflush_r+0xb8>
 800e21e:	2200      	movs	r2, #0
 800e220:	6062      	str	r2, [r4, #4]
 800e222:	04d9      	lsls	r1, r3, #19
 800e224:	6922      	ldr	r2, [r4, #16]
 800e226:	6022      	str	r2, [r4, #0]
 800e228:	d504      	bpl.n	800e234 <__sflush_r+0x7c>
 800e22a:	1c42      	adds	r2, r0, #1
 800e22c:	d101      	bne.n	800e232 <__sflush_r+0x7a>
 800e22e:	682b      	ldr	r3, [r5, #0]
 800e230:	b903      	cbnz	r3, 800e234 <__sflush_r+0x7c>
 800e232:	6560      	str	r0, [r4, #84]	; 0x54
 800e234:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e236:	602f      	str	r7, [r5, #0]
 800e238:	2900      	cmp	r1, #0
 800e23a:	d0ca      	beq.n	800e1d2 <__sflush_r+0x1a>
 800e23c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e240:	4299      	cmp	r1, r3
 800e242:	d002      	beq.n	800e24a <__sflush_r+0x92>
 800e244:	4628      	mov	r0, r5
 800e246:	f001 f8ef 	bl	800f428 <_free_r>
 800e24a:	2000      	movs	r0, #0
 800e24c:	6360      	str	r0, [r4, #52]	; 0x34
 800e24e:	e7c1      	b.n	800e1d4 <__sflush_r+0x1c>
 800e250:	6a21      	ldr	r1, [r4, #32]
 800e252:	2301      	movs	r3, #1
 800e254:	4628      	mov	r0, r5
 800e256:	47b0      	blx	r6
 800e258:	1c41      	adds	r1, r0, #1
 800e25a:	d1c7      	bne.n	800e1ec <__sflush_r+0x34>
 800e25c:	682b      	ldr	r3, [r5, #0]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d0c4      	beq.n	800e1ec <__sflush_r+0x34>
 800e262:	2b1d      	cmp	r3, #29
 800e264:	d001      	beq.n	800e26a <__sflush_r+0xb2>
 800e266:	2b16      	cmp	r3, #22
 800e268:	d101      	bne.n	800e26e <__sflush_r+0xb6>
 800e26a:	602f      	str	r7, [r5, #0]
 800e26c:	e7b1      	b.n	800e1d2 <__sflush_r+0x1a>
 800e26e:	89a3      	ldrh	r3, [r4, #12]
 800e270:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e274:	81a3      	strh	r3, [r4, #12]
 800e276:	e7ad      	b.n	800e1d4 <__sflush_r+0x1c>
 800e278:	690f      	ldr	r7, [r1, #16]
 800e27a:	2f00      	cmp	r7, #0
 800e27c:	d0a9      	beq.n	800e1d2 <__sflush_r+0x1a>
 800e27e:	0793      	lsls	r3, r2, #30
 800e280:	680e      	ldr	r6, [r1, #0]
 800e282:	bf08      	it	eq
 800e284:	694b      	ldreq	r3, [r1, #20]
 800e286:	600f      	str	r7, [r1, #0]
 800e288:	bf18      	it	ne
 800e28a:	2300      	movne	r3, #0
 800e28c:	eba6 0807 	sub.w	r8, r6, r7
 800e290:	608b      	str	r3, [r1, #8]
 800e292:	f1b8 0f00 	cmp.w	r8, #0
 800e296:	dd9c      	ble.n	800e1d2 <__sflush_r+0x1a>
 800e298:	6a21      	ldr	r1, [r4, #32]
 800e29a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e29c:	4643      	mov	r3, r8
 800e29e:	463a      	mov	r2, r7
 800e2a0:	4628      	mov	r0, r5
 800e2a2:	47b0      	blx	r6
 800e2a4:	2800      	cmp	r0, #0
 800e2a6:	dc06      	bgt.n	800e2b6 <__sflush_r+0xfe>
 800e2a8:	89a3      	ldrh	r3, [r4, #12]
 800e2aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2ae:	81a3      	strh	r3, [r4, #12]
 800e2b0:	f04f 30ff 	mov.w	r0, #4294967295
 800e2b4:	e78e      	b.n	800e1d4 <__sflush_r+0x1c>
 800e2b6:	4407      	add	r7, r0
 800e2b8:	eba8 0800 	sub.w	r8, r8, r0
 800e2bc:	e7e9      	b.n	800e292 <__sflush_r+0xda>
 800e2be:	bf00      	nop
 800e2c0:	20400001 	.word	0x20400001

0800e2c4 <_fflush_r>:
 800e2c4:	b538      	push	{r3, r4, r5, lr}
 800e2c6:	690b      	ldr	r3, [r1, #16]
 800e2c8:	4605      	mov	r5, r0
 800e2ca:	460c      	mov	r4, r1
 800e2cc:	b913      	cbnz	r3, 800e2d4 <_fflush_r+0x10>
 800e2ce:	2500      	movs	r5, #0
 800e2d0:	4628      	mov	r0, r5
 800e2d2:	bd38      	pop	{r3, r4, r5, pc}
 800e2d4:	b118      	cbz	r0, 800e2de <_fflush_r+0x1a>
 800e2d6:	6983      	ldr	r3, [r0, #24]
 800e2d8:	b90b      	cbnz	r3, 800e2de <_fflush_r+0x1a>
 800e2da:	f7fd f98d 	bl	800b5f8 <__sinit>
 800e2de:	4b14      	ldr	r3, [pc, #80]	; (800e330 <_fflush_r+0x6c>)
 800e2e0:	429c      	cmp	r4, r3
 800e2e2:	d11b      	bne.n	800e31c <_fflush_r+0x58>
 800e2e4:	686c      	ldr	r4, [r5, #4]
 800e2e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2ea:	2b00      	cmp	r3, #0
 800e2ec:	d0ef      	beq.n	800e2ce <_fflush_r+0xa>
 800e2ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e2f0:	07d0      	lsls	r0, r2, #31
 800e2f2:	d404      	bmi.n	800e2fe <_fflush_r+0x3a>
 800e2f4:	0599      	lsls	r1, r3, #22
 800e2f6:	d402      	bmi.n	800e2fe <_fflush_r+0x3a>
 800e2f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e2fa:	f7fd fa40 	bl	800b77e <__retarget_lock_acquire_recursive>
 800e2fe:	4628      	mov	r0, r5
 800e300:	4621      	mov	r1, r4
 800e302:	f7ff ff59 	bl	800e1b8 <__sflush_r>
 800e306:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e308:	07da      	lsls	r2, r3, #31
 800e30a:	4605      	mov	r5, r0
 800e30c:	d4e0      	bmi.n	800e2d0 <_fflush_r+0xc>
 800e30e:	89a3      	ldrh	r3, [r4, #12]
 800e310:	059b      	lsls	r3, r3, #22
 800e312:	d4dd      	bmi.n	800e2d0 <_fflush_r+0xc>
 800e314:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e316:	f7fd fa33 	bl	800b780 <__retarget_lock_release_recursive>
 800e31a:	e7d9      	b.n	800e2d0 <_fflush_r+0xc>
 800e31c:	4b05      	ldr	r3, [pc, #20]	; (800e334 <_fflush_r+0x70>)
 800e31e:	429c      	cmp	r4, r3
 800e320:	d101      	bne.n	800e326 <_fflush_r+0x62>
 800e322:	68ac      	ldr	r4, [r5, #8]
 800e324:	e7df      	b.n	800e2e6 <_fflush_r+0x22>
 800e326:	4b04      	ldr	r3, [pc, #16]	; (800e338 <_fflush_r+0x74>)
 800e328:	429c      	cmp	r4, r3
 800e32a:	bf08      	it	eq
 800e32c:	68ec      	ldreq	r4, [r5, #12]
 800e32e:	e7da      	b.n	800e2e6 <_fflush_r+0x22>
 800e330:	080102d0 	.word	0x080102d0
 800e334:	080102f0 	.word	0x080102f0
 800e338:	080102b0 	.word	0x080102b0

0800e33c <rshift>:
 800e33c:	6903      	ldr	r3, [r0, #16]
 800e33e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800e342:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e346:	ea4f 1261 	mov.w	r2, r1, asr #5
 800e34a:	f100 0414 	add.w	r4, r0, #20
 800e34e:	dd45      	ble.n	800e3dc <rshift+0xa0>
 800e350:	f011 011f 	ands.w	r1, r1, #31
 800e354:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800e358:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800e35c:	d10c      	bne.n	800e378 <rshift+0x3c>
 800e35e:	f100 0710 	add.w	r7, r0, #16
 800e362:	4629      	mov	r1, r5
 800e364:	42b1      	cmp	r1, r6
 800e366:	d334      	bcc.n	800e3d2 <rshift+0x96>
 800e368:	1a9b      	subs	r3, r3, r2
 800e36a:	009b      	lsls	r3, r3, #2
 800e36c:	1eea      	subs	r2, r5, #3
 800e36e:	4296      	cmp	r6, r2
 800e370:	bf38      	it	cc
 800e372:	2300      	movcc	r3, #0
 800e374:	4423      	add	r3, r4
 800e376:	e015      	b.n	800e3a4 <rshift+0x68>
 800e378:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800e37c:	f1c1 0820 	rsb	r8, r1, #32
 800e380:	40cf      	lsrs	r7, r1
 800e382:	f105 0e04 	add.w	lr, r5, #4
 800e386:	46a1      	mov	r9, r4
 800e388:	4576      	cmp	r6, lr
 800e38a:	46f4      	mov	ip, lr
 800e38c:	d815      	bhi.n	800e3ba <rshift+0x7e>
 800e38e:	1a9b      	subs	r3, r3, r2
 800e390:	009a      	lsls	r2, r3, #2
 800e392:	3a04      	subs	r2, #4
 800e394:	3501      	adds	r5, #1
 800e396:	42ae      	cmp	r6, r5
 800e398:	bf38      	it	cc
 800e39a:	2200      	movcc	r2, #0
 800e39c:	18a3      	adds	r3, r4, r2
 800e39e:	50a7      	str	r7, [r4, r2]
 800e3a0:	b107      	cbz	r7, 800e3a4 <rshift+0x68>
 800e3a2:	3304      	adds	r3, #4
 800e3a4:	1b1a      	subs	r2, r3, r4
 800e3a6:	42a3      	cmp	r3, r4
 800e3a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800e3ac:	bf08      	it	eq
 800e3ae:	2300      	moveq	r3, #0
 800e3b0:	6102      	str	r2, [r0, #16]
 800e3b2:	bf08      	it	eq
 800e3b4:	6143      	streq	r3, [r0, #20]
 800e3b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e3ba:	f8dc c000 	ldr.w	ip, [ip]
 800e3be:	fa0c fc08 	lsl.w	ip, ip, r8
 800e3c2:	ea4c 0707 	orr.w	r7, ip, r7
 800e3c6:	f849 7b04 	str.w	r7, [r9], #4
 800e3ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 800e3ce:	40cf      	lsrs	r7, r1
 800e3d0:	e7da      	b.n	800e388 <rshift+0x4c>
 800e3d2:	f851 cb04 	ldr.w	ip, [r1], #4
 800e3d6:	f847 cf04 	str.w	ip, [r7, #4]!
 800e3da:	e7c3      	b.n	800e364 <rshift+0x28>
 800e3dc:	4623      	mov	r3, r4
 800e3de:	e7e1      	b.n	800e3a4 <rshift+0x68>

0800e3e0 <__hexdig_fun>:
 800e3e0:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800e3e4:	2b09      	cmp	r3, #9
 800e3e6:	d802      	bhi.n	800e3ee <__hexdig_fun+0xe>
 800e3e8:	3820      	subs	r0, #32
 800e3ea:	b2c0      	uxtb	r0, r0
 800e3ec:	4770      	bx	lr
 800e3ee:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800e3f2:	2b05      	cmp	r3, #5
 800e3f4:	d801      	bhi.n	800e3fa <__hexdig_fun+0x1a>
 800e3f6:	3847      	subs	r0, #71	; 0x47
 800e3f8:	e7f7      	b.n	800e3ea <__hexdig_fun+0xa>
 800e3fa:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800e3fe:	2b05      	cmp	r3, #5
 800e400:	d801      	bhi.n	800e406 <__hexdig_fun+0x26>
 800e402:	3827      	subs	r0, #39	; 0x27
 800e404:	e7f1      	b.n	800e3ea <__hexdig_fun+0xa>
 800e406:	2000      	movs	r0, #0
 800e408:	4770      	bx	lr
	...

0800e40c <__gethex>:
 800e40c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e410:	ed2d 8b02 	vpush	{d8}
 800e414:	b089      	sub	sp, #36	; 0x24
 800e416:	ee08 0a10 	vmov	s16, r0
 800e41a:	9304      	str	r3, [sp, #16]
 800e41c:	4bbc      	ldr	r3, [pc, #752]	; (800e710 <__gethex+0x304>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	9301      	str	r3, [sp, #4]
 800e422:	4618      	mov	r0, r3
 800e424:	468b      	mov	fp, r1
 800e426:	4690      	mov	r8, r2
 800e428:	f7f1 fed2 	bl	80001d0 <strlen>
 800e42c:	9b01      	ldr	r3, [sp, #4]
 800e42e:	f8db 2000 	ldr.w	r2, [fp]
 800e432:	4403      	add	r3, r0
 800e434:	4682      	mov	sl, r0
 800e436:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800e43a:	9305      	str	r3, [sp, #20]
 800e43c:	1c93      	adds	r3, r2, #2
 800e43e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800e442:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800e446:	32fe      	adds	r2, #254	; 0xfe
 800e448:	18d1      	adds	r1, r2, r3
 800e44a:	461f      	mov	r7, r3
 800e44c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e450:	9100      	str	r1, [sp, #0]
 800e452:	2830      	cmp	r0, #48	; 0x30
 800e454:	d0f8      	beq.n	800e448 <__gethex+0x3c>
 800e456:	f7ff ffc3 	bl	800e3e0 <__hexdig_fun>
 800e45a:	4604      	mov	r4, r0
 800e45c:	2800      	cmp	r0, #0
 800e45e:	d13a      	bne.n	800e4d6 <__gethex+0xca>
 800e460:	9901      	ldr	r1, [sp, #4]
 800e462:	4652      	mov	r2, sl
 800e464:	4638      	mov	r0, r7
 800e466:	f001 f9a7 	bl	800f7b8 <strncmp>
 800e46a:	4605      	mov	r5, r0
 800e46c:	2800      	cmp	r0, #0
 800e46e:	d168      	bne.n	800e542 <__gethex+0x136>
 800e470:	f817 000a 	ldrb.w	r0, [r7, sl]
 800e474:	eb07 060a 	add.w	r6, r7, sl
 800e478:	f7ff ffb2 	bl	800e3e0 <__hexdig_fun>
 800e47c:	2800      	cmp	r0, #0
 800e47e:	d062      	beq.n	800e546 <__gethex+0x13a>
 800e480:	4633      	mov	r3, r6
 800e482:	7818      	ldrb	r0, [r3, #0]
 800e484:	2830      	cmp	r0, #48	; 0x30
 800e486:	461f      	mov	r7, r3
 800e488:	f103 0301 	add.w	r3, r3, #1
 800e48c:	d0f9      	beq.n	800e482 <__gethex+0x76>
 800e48e:	f7ff ffa7 	bl	800e3e0 <__hexdig_fun>
 800e492:	2301      	movs	r3, #1
 800e494:	fab0 f480 	clz	r4, r0
 800e498:	0964      	lsrs	r4, r4, #5
 800e49a:	4635      	mov	r5, r6
 800e49c:	9300      	str	r3, [sp, #0]
 800e49e:	463a      	mov	r2, r7
 800e4a0:	4616      	mov	r6, r2
 800e4a2:	3201      	adds	r2, #1
 800e4a4:	7830      	ldrb	r0, [r6, #0]
 800e4a6:	f7ff ff9b 	bl	800e3e0 <__hexdig_fun>
 800e4aa:	2800      	cmp	r0, #0
 800e4ac:	d1f8      	bne.n	800e4a0 <__gethex+0x94>
 800e4ae:	9901      	ldr	r1, [sp, #4]
 800e4b0:	4652      	mov	r2, sl
 800e4b2:	4630      	mov	r0, r6
 800e4b4:	f001 f980 	bl	800f7b8 <strncmp>
 800e4b8:	b980      	cbnz	r0, 800e4dc <__gethex+0xd0>
 800e4ba:	b94d      	cbnz	r5, 800e4d0 <__gethex+0xc4>
 800e4bc:	eb06 050a 	add.w	r5, r6, sl
 800e4c0:	462a      	mov	r2, r5
 800e4c2:	4616      	mov	r6, r2
 800e4c4:	3201      	adds	r2, #1
 800e4c6:	7830      	ldrb	r0, [r6, #0]
 800e4c8:	f7ff ff8a 	bl	800e3e0 <__hexdig_fun>
 800e4cc:	2800      	cmp	r0, #0
 800e4ce:	d1f8      	bne.n	800e4c2 <__gethex+0xb6>
 800e4d0:	1bad      	subs	r5, r5, r6
 800e4d2:	00ad      	lsls	r5, r5, #2
 800e4d4:	e004      	b.n	800e4e0 <__gethex+0xd4>
 800e4d6:	2400      	movs	r4, #0
 800e4d8:	4625      	mov	r5, r4
 800e4da:	e7e0      	b.n	800e49e <__gethex+0x92>
 800e4dc:	2d00      	cmp	r5, #0
 800e4de:	d1f7      	bne.n	800e4d0 <__gethex+0xc4>
 800e4e0:	7833      	ldrb	r3, [r6, #0]
 800e4e2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800e4e6:	2b50      	cmp	r3, #80	; 0x50
 800e4e8:	d13b      	bne.n	800e562 <__gethex+0x156>
 800e4ea:	7873      	ldrb	r3, [r6, #1]
 800e4ec:	2b2b      	cmp	r3, #43	; 0x2b
 800e4ee:	d02c      	beq.n	800e54a <__gethex+0x13e>
 800e4f0:	2b2d      	cmp	r3, #45	; 0x2d
 800e4f2:	d02e      	beq.n	800e552 <__gethex+0x146>
 800e4f4:	1c71      	adds	r1, r6, #1
 800e4f6:	f04f 0900 	mov.w	r9, #0
 800e4fa:	7808      	ldrb	r0, [r1, #0]
 800e4fc:	f7ff ff70 	bl	800e3e0 <__hexdig_fun>
 800e500:	1e43      	subs	r3, r0, #1
 800e502:	b2db      	uxtb	r3, r3
 800e504:	2b18      	cmp	r3, #24
 800e506:	d82c      	bhi.n	800e562 <__gethex+0x156>
 800e508:	f1a0 0210 	sub.w	r2, r0, #16
 800e50c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800e510:	f7ff ff66 	bl	800e3e0 <__hexdig_fun>
 800e514:	1e43      	subs	r3, r0, #1
 800e516:	b2db      	uxtb	r3, r3
 800e518:	2b18      	cmp	r3, #24
 800e51a:	d91d      	bls.n	800e558 <__gethex+0x14c>
 800e51c:	f1b9 0f00 	cmp.w	r9, #0
 800e520:	d000      	beq.n	800e524 <__gethex+0x118>
 800e522:	4252      	negs	r2, r2
 800e524:	4415      	add	r5, r2
 800e526:	f8cb 1000 	str.w	r1, [fp]
 800e52a:	b1e4      	cbz	r4, 800e566 <__gethex+0x15a>
 800e52c:	9b00      	ldr	r3, [sp, #0]
 800e52e:	2b00      	cmp	r3, #0
 800e530:	bf14      	ite	ne
 800e532:	2700      	movne	r7, #0
 800e534:	2706      	moveq	r7, #6
 800e536:	4638      	mov	r0, r7
 800e538:	b009      	add	sp, #36	; 0x24
 800e53a:	ecbd 8b02 	vpop	{d8}
 800e53e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e542:	463e      	mov	r6, r7
 800e544:	4625      	mov	r5, r4
 800e546:	2401      	movs	r4, #1
 800e548:	e7ca      	b.n	800e4e0 <__gethex+0xd4>
 800e54a:	f04f 0900 	mov.w	r9, #0
 800e54e:	1cb1      	adds	r1, r6, #2
 800e550:	e7d3      	b.n	800e4fa <__gethex+0xee>
 800e552:	f04f 0901 	mov.w	r9, #1
 800e556:	e7fa      	b.n	800e54e <__gethex+0x142>
 800e558:	230a      	movs	r3, #10
 800e55a:	fb03 0202 	mla	r2, r3, r2, r0
 800e55e:	3a10      	subs	r2, #16
 800e560:	e7d4      	b.n	800e50c <__gethex+0x100>
 800e562:	4631      	mov	r1, r6
 800e564:	e7df      	b.n	800e526 <__gethex+0x11a>
 800e566:	1bf3      	subs	r3, r6, r7
 800e568:	3b01      	subs	r3, #1
 800e56a:	4621      	mov	r1, r4
 800e56c:	2b07      	cmp	r3, #7
 800e56e:	dc0b      	bgt.n	800e588 <__gethex+0x17c>
 800e570:	ee18 0a10 	vmov	r0, s16
 800e574:	f000 fa8e 	bl	800ea94 <_Balloc>
 800e578:	4604      	mov	r4, r0
 800e57a:	b940      	cbnz	r0, 800e58e <__gethex+0x182>
 800e57c:	4b65      	ldr	r3, [pc, #404]	; (800e714 <__gethex+0x308>)
 800e57e:	4602      	mov	r2, r0
 800e580:	21de      	movs	r1, #222	; 0xde
 800e582:	4865      	ldr	r0, [pc, #404]	; (800e718 <__gethex+0x30c>)
 800e584:	f001 f938 	bl	800f7f8 <__assert_func>
 800e588:	3101      	adds	r1, #1
 800e58a:	105b      	asrs	r3, r3, #1
 800e58c:	e7ee      	b.n	800e56c <__gethex+0x160>
 800e58e:	f100 0914 	add.w	r9, r0, #20
 800e592:	f04f 0b00 	mov.w	fp, #0
 800e596:	f1ca 0301 	rsb	r3, sl, #1
 800e59a:	f8cd 9008 	str.w	r9, [sp, #8]
 800e59e:	f8cd b000 	str.w	fp, [sp]
 800e5a2:	9306      	str	r3, [sp, #24]
 800e5a4:	42b7      	cmp	r7, r6
 800e5a6:	d340      	bcc.n	800e62a <__gethex+0x21e>
 800e5a8:	9802      	ldr	r0, [sp, #8]
 800e5aa:	9b00      	ldr	r3, [sp, #0]
 800e5ac:	f840 3b04 	str.w	r3, [r0], #4
 800e5b0:	eba0 0009 	sub.w	r0, r0, r9
 800e5b4:	1080      	asrs	r0, r0, #2
 800e5b6:	0146      	lsls	r6, r0, #5
 800e5b8:	6120      	str	r0, [r4, #16]
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	f000 fb60 	bl	800ec80 <__hi0bits>
 800e5c0:	1a30      	subs	r0, r6, r0
 800e5c2:	f8d8 6000 	ldr.w	r6, [r8]
 800e5c6:	42b0      	cmp	r0, r6
 800e5c8:	dd63      	ble.n	800e692 <__gethex+0x286>
 800e5ca:	1b87      	subs	r7, r0, r6
 800e5cc:	4639      	mov	r1, r7
 800e5ce:	4620      	mov	r0, r4
 800e5d0:	f000 fefa 	bl	800f3c8 <__any_on>
 800e5d4:	4682      	mov	sl, r0
 800e5d6:	b1a8      	cbz	r0, 800e604 <__gethex+0x1f8>
 800e5d8:	1e7b      	subs	r3, r7, #1
 800e5da:	1159      	asrs	r1, r3, #5
 800e5dc:	f003 021f 	and.w	r2, r3, #31
 800e5e0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800e5e4:	f04f 0a01 	mov.w	sl, #1
 800e5e8:	fa0a f202 	lsl.w	r2, sl, r2
 800e5ec:	420a      	tst	r2, r1
 800e5ee:	d009      	beq.n	800e604 <__gethex+0x1f8>
 800e5f0:	4553      	cmp	r3, sl
 800e5f2:	dd05      	ble.n	800e600 <__gethex+0x1f4>
 800e5f4:	1eb9      	subs	r1, r7, #2
 800e5f6:	4620      	mov	r0, r4
 800e5f8:	f000 fee6 	bl	800f3c8 <__any_on>
 800e5fc:	2800      	cmp	r0, #0
 800e5fe:	d145      	bne.n	800e68c <__gethex+0x280>
 800e600:	f04f 0a02 	mov.w	sl, #2
 800e604:	4639      	mov	r1, r7
 800e606:	4620      	mov	r0, r4
 800e608:	f7ff fe98 	bl	800e33c <rshift>
 800e60c:	443d      	add	r5, r7
 800e60e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e612:	42ab      	cmp	r3, r5
 800e614:	da4c      	bge.n	800e6b0 <__gethex+0x2a4>
 800e616:	ee18 0a10 	vmov	r0, s16
 800e61a:	4621      	mov	r1, r4
 800e61c:	f000 fa7a 	bl	800eb14 <_Bfree>
 800e620:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e622:	2300      	movs	r3, #0
 800e624:	6013      	str	r3, [r2, #0]
 800e626:	27a3      	movs	r7, #163	; 0xa3
 800e628:	e785      	b.n	800e536 <__gethex+0x12a>
 800e62a:	1e73      	subs	r3, r6, #1
 800e62c:	9a05      	ldr	r2, [sp, #20]
 800e62e:	9303      	str	r3, [sp, #12]
 800e630:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e634:	4293      	cmp	r3, r2
 800e636:	d019      	beq.n	800e66c <__gethex+0x260>
 800e638:	f1bb 0f20 	cmp.w	fp, #32
 800e63c:	d107      	bne.n	800e64e <__gethex+0x242>
 800e63e:	9b02      	ldr	r3, [sp, #8]
 800e640:	9a00      	ldr	r2, [sp, #0]
 800e642:	f843 2b04 	str.w	r2, [r3], #4
 800e646:	9302      	str	r3, [sp, #8]
 800e648:	2300      	movs	r3, #0
 800e64a:	9300      	str	r3, [sp, #0]
 800e64c:	469b      	mov	fp, r3
 800e64e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800e652:	f7ff fec5 	bl	800e3e0 <__hexdig_fun>
 800e656:	9b00      	ldr	r3, [sp, #0]
 800e658:	f000 000f 	and.w	r0, r0, #15
 800e65c:	fa00 f00b 	lsl.w	r0, r0, fp
 800e660:	4303      	orrs	r3, r0
 800e662:	9300      	str	r3, [sp, #0]
 800e664:	f10b 0b04 	add.w	fp, fp, #4
 800e668:	9b03      	ldr	r3, [sp, #12]
 800e66a:	e00d      	b.n	800e688 <__gethex+0x27c>
 800e66c:	9b03      	ldr	r3, [sp, #12]
 800e66e:	9a06      	ldr	r2, [sp, #24]
 800e670:	4413      	add	r3, r2
 800e672:	42bb      	cmp	r3, r7
 800e674:	d3e0      	bcc.n	800e638 <__gethex+0x22c>
 800e676:	4618      	mov	r0, r3
 800e678:	9901      	ldr	r1, [sp, #4]
 800e67a:	9307      	str	r3, [sp, #28]
 800e67c:	4652      	mov	r2, sl
 800e67e:	f001 f89b 	bl	800f7b8 <strncmp>
 800e682:	9b07      	ldr	r3, [sp, #28]
 800e684:	2800      	cmp	r0, #0
 800e686:	d1d7      	bne.n	800e638 <__gethex+0x22c>
 800e688:	461e      	mov	r6, r3
 800e68a:	e78b      	b.n	800e5a4 <__gethex+0x198>
 800e68c:	f04f 0a03 	mov.w	sl, #3
 800e690:	e7b8      	b.n	800e604 <__gethex+0x1f8>
 800e692:	da0a      	bge.n	800e6aa <__gethex+0x29e>
 800e694:	1a37      	subs	r7, r6, r0
 800e696:	4621      	mov	r1, r4
 800e698:	ee18 0a10 	vmov	r0, s16
 800e69c:	463a      	mov	r2, r7
 800e69e:	f000 fc55 	bl	800ef4c <__lshift>
 800e6a2:	1bed      	subs	r5, r5, r7
 800e6a4:	4604      	mov	r4, r0
 800e6a6:	f100 0914 	add.w	r9, r0, #20
 800e6aa:	f04f 0a00 	mov.w	sl, #0
 800e6ae:	e7ae      	b.n	800e60e <__gethex+0x202>
 800e6b0:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800e6b4:	42a8      	cmp	r0, r5
 800e6b6:	dd72      	ble.n	800e79e <__gethex+0x392>
 800e6b8:	1b45      	subs	r5, r0, r5
 800e6ba:	42ae      	cmp	r6, r5
 800e6bc:	dc36      	bgt.n	800e72c <__gethex+0x320>
 800e6be:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e6c2:	2b02      	cmp	r3, #2
 800e6c4:	d02a      	beq.n	800e71c <__gethex+0x310>
 800e6c6:	2b03      	cmp	r3, #3
 800e6c8:	d02c      	beq.n	800e724 <__gethex+0x318>
 800e6ca:	2b01      	cmp	r3, #1
 800e6cc:	d115      	bne.n	800e6fa <__gethex+0x2ee>
 800e6ce:	42ae      	cmp	r6, r5
 800e6d0:	d113      	bne.n	800e6fa <__gethex+0x2ee>
 800e6d2:	2e01      	cmp	r6, #1
 800e6d4:	d10b      	bne.n	800e6ee <__gethex+0x2e2>
 800e6d6:	9a04      	ldr	r2, [sp, #16]
 800e6d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e6dc:	6013      	str	r3, [r2, #0]
 800e6de:	2301      	movs	r3, #1
 800e6e0:	6123      	str	r3, [r4, #16]
 800e6e2:	f8c9 3000 	str.w	r3, [r9]
 800e6e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e6e8:	2762      	movs	r7, #98	; 0x62
 800e6ea:	601c      	str	r4, [r3, #0]
 800e6ec:	e723      	b.n	800e536 <__gethex+0x12a>
 800e6ee:	1e71      	subs	r1, r6, #1
 800e6f0:	4620      	mov	r0, r4
 800e6f2:	f000 fe69 	bl	800f3c8 <__any_on>
 800e6f6:	2800      	cmp	r0, #0
 800e6f8:	d1ed      	bne.n	800e6d6 <__gethex+0x2ca>
 800e6fa:	ee18 0a10 	vmov	r0, s16
 800e6fe:	4621      	mov	r1, r4
 800e700:	f000 fa08 	bl	800eb14 <_Bfree>
 800e704:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e706:	2300      	movs	r3, #0
 800e708:	6013      	str	r3, [r2, #0]
 800e70a:	2750      	movs	r7, #80	; 0x50
 800e70c:	e713      	b.n	800e536 <__gethex+0x12a>
 800e70e:	bf00      	nop
 800e710:	080105a0 	.word	0x080105a0
 800e714:	08010524 	.word	0x08010524
 800e718:	08010535 	.word	0x08010535
 800e71c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e71e:	2b00      	cmp	r3, #0
 800e720:	d1eb      	bne.n	800e6fa <__gethex+0x2ee>
 800e722:	e7d8      	b.n	800e6d6 <__gethex+0x2ca>
 800e724:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e726:	2b00      	cmp	r3, #0
 800e728:	d1d5      	bne.n	800e6d6 <__gethex+0x2ca>
 800e72a:	e7e6      	b.n	800e6fa <__gethex+0x2ee>
 800e72c:	1e6f      	subs	r7, r5, #1
 800e72e:	f1ba 0f00 	cmp.w	sl, #0
 800e732:	d131      	bne.n	800e798 <__gethex+0x38c>
 800e734:	b127      	cbz	r7, 800e740 <__gethex+0x334>
 800e736:	4639      	mov	r1, r7
 800e738:	4620      	mov	r0, r4
 800e73a:	f000 fe45 	bl	800f3c8 <__any_on>
 800e73e:	4682      	mov	sl, r0
 800e740:	117b      	asrs	r3, r7, #5
 800e742:	2101      	movs	r1, #1
 800e744:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e748:	f007 071f 	and.w	r7, r7, #31
 800e74c:	fa01 f707 	lsl.w	r7, r1, r7
 800e750:	421f      	tst	r7, r3
 800e752:	4629      	mov	r1, r5
 800e754:	4620      	mov	r0, r4
 800e756:	bf18      	it	ne
 800e758:	f04a 0a02 	orrne.w	sl, sl, #2
 800e75c:	1b76      	subs	r6, r6, r5
 800e75e:	f7ff fded 	bl	800e33c <rshift>
 800e762:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e766:	2702      	movs	r7, #2
 800e768:	f1ba 0f00 	cmp.w	sl, #0
 800e76c:	d048      	beq.n	800e800 <__gethex+0x3f4>
 800e76e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e772:	2b02      	cmp	r3, #2
 800e774:	d015      	beq.n	800e7a2 <__gethex+0x396>
 800e776:	2b03      	cmp	r3, #3
 800e778:	d017      	beq.n	800e7aa <__gethex+0x39e>
 800e77a:	2b01      	cmp	r3, #1
 800e77c:	d109      	bne.n	800e792 <__gethex+0x386>
 800e77e:	f01a 0f02 	tst.w	sl, #2
 800e782:	d006      	beq.n	800e792 <__gethex+0x386>
 800e784:	f8d9 0000 	ldr.w	r0, [r9]
 800e788:	ea4a 0a00 	orr.w	sl, sl, r0
 800e78c:	f01a 0f01 	tst.w	sl, #1
 800e790:	d10e      	bne.n	800e7b0 <__gethex+0x3a4>
 800e792:	f047 0710 	orr.w	r7, r7, #16
 800e796:	e033      	b.n	800e800 <__gethex+0x3f4>
 800e798:	f04f 0a01 	mov.w	sl, #1
 800e79c:	e7d0      	b.n	800e740 <__gethex+0x334>
 800e79e:	2701      	movs	r7, #1
 800e7a0:	e7e2      	b.n	800e768 <__gethex+0x35c>
 800e7a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e7a4:	f1c3 0301 	rsb	r3, r3, #1
 800e7a8:	9315      	str	r3, [sp, #84]	; 0x54
 800e7aa:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e7ac:	2b00      	cmp	r3, #0
 800e7ae:	d0f0      	beq.n	800e792 <__gethex+0x386>
 800e7b0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e7b4:	f104 0314 	add.w	r3, r4, #20
 800e7b8:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e7bc:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e7c0:	f04f 0c00 	mov.w	ip, #0
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e7ca:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e7ce:	d01c      	beq.n	800e80a <__gethex+0x3fe>
 800e7d0:	3201      	adds	r2, #1
 800e7d2:	6002      	str	r2, [r0, #0]
 800e7d4:	2f02      	cmp	r7, #2
 800e7d6:	f104 0314 	add.w	r3, r4, #20
 800e7da:	d13f      	bne.n	800e85c <__gethex+0x450>
 800e7dc:	f8d8 2000 	ldr.w	r2, [r8]
 800e7e0:	3a01      	subs	r2, #1
 800e7e2:	42b2      	cmp	r2, r6
 800e7e4:	d10a      	bne.n	800e7fc <__gethex+0x3f0>
 800e7e6:	1171      	asrs	r1, r6, #5
 800e7e8:	2201      	movs	r2, #1
 800e7ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e7ee:	f006 061f 	and.w	r6, r6, #31
 800e7f2:	fa02 f606 	lsl.w	r6, r2, r6
 800e7f6:	421e      	tst	r6, r3
 800e7f8:	bf18      	it	ne
 800e7fa:	4617      	movne	r7, r2
 800e7fc:	f047 0720 	orr.w	r7, r7, #32
 800e800:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e802:	601c      	str	r4, [r3, #0]
 800e804:	9b04      	ldr	r3, [sp, #16]
 800e806:	601d      	str	r5, [r3, #0]
 800e808:	e695      	b.n	800e536 <__gethex+0x12a>
 800e80a:	4299      	cmp	r1, r3
 800e80c:	f843 cc04 	str.w	ip, [r3, #-4]
 800e810:	d8d8      	bhi.n	800e7c4 <__gethex+0x3b8>
 800e812:	68a3      	ldr	r3, [r4, #8]
 800e814:	459b      	cmp	fp, r3
 800e816:	db19      	blt.n	800e84c <__gethex+0x440>
 800e818:	6861      	ldr	r1, [r4, #4]
 800e81a:	ee18 0a10 	vmov	r0, s16
 800e81e:	3101      	adds	r1, #1
 800e820:	f000 f938 	bl	800ea94 <_Balloc>
 800e824:	4681      	mov	r9, r0
 800e826:	b918      	cbnz	r0, 800e830 <__gethex+0x424>
 800e828:	4b1a      	ldr	r3, [pc, #104]	; (800e894 <__gethex+0x488>)
 800e82a:	4602      	mov	r2, r0
 800e82c:	2184      	movs	r1, #132	; 0x84
 800e82e:	e6a8      	b.n	800e582 <__gethex+0x176>
 800e830:	6922      	ldr	r2, [r4, #16]
 800e832:	3202      	adds	r2, #2
 800e834:	f104 010c 	add.w	r1, r4, #12
 800e838:	0092      	lsls	r2, r2, #2
 800e83a:	300c      	adds	r0, #12
 800e83c:	f7fc ffa1 	bl	800b782 <memcpy>
 800e840:	4621      	mov	r1, r4
 800e842:	ee18 0a10 	vmov	r0, s16
 800e846:	f000 f965 	bl	800eb14 <_Bfree>
 800e84a:	464c      	mov	r4, r9
 800e84c:	6923      	ldr	r3, [r4, #16]
 800e84e:	1c5a      	adds	r2, r3, #1
 800e850:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e854:	6122      	str	r2, [r4, #16]
 800e856:	2201      	movs	r2, #1
 800e858:	615a      	str	r2, [r3, #20]
 800e85a:	e7bb      	b.n	800e7d4 <__gethex+0x3c8>
 800e85c:	6922      	ldr	r2, [r4, #16]
 800e85e:	455a      	cmp	r2, fp
 800e860:	dd0b      	ble.n	800e87a <__gethex+0x46e>
 800e862:	2101      	movs	r1, #1
 800e864:	4620      	mov	r0, r4
 800e866:	f7ff fd69 	bl	800e33c <rshift>
 800e86a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e86e:	3501      	adds	r5, #1
 800e870:	42ab      	cmp	r3, r5
 800e872:	f6ff aed0 	blt.w	800e616 <__gethex+0x20a>
 800e876:	2701      	movs	r7, #1
 800e878:	e7c0      	b.n	800e7fc <__gethex+0x3f0>
 800e87a:	f016 061f 	ands.w	r6, r6, #31
 800e87e:	d0fa      	beq.n	800e876 <__gethex+0x46a>
 800e880:	449a      	add	sl, r3
 800e882:	f1c6 0620 	rsb	r6, r6, #32
 800e886:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800e88a:	f000 f9f9 	bl	800ec80 <__hi0bits>
 800e88e:	42b0      	cmp	r0, r6
 800e890:	dbe7      	blt.n	800e862 <__gethex+0x456>
 800e892:	e7f0      	b.n	800e876 <__gethex+0x46a>
 800e894:	08010524 	.word	0x08010524

0800e898 <L_shift>:
 800e898:	f1c2 0208 	rsb	r2, r2, #8
 800e89c:	0092      	lsls	r2, r2, #2
 800e89e:	b570      	push	{r4, r5, r6, lr}
 800e8a0:	f1c2 0620 	rsb	r6, r2, #32
 800e8a4:	6843      	ldr	r3, [r0, #4]
 800e8a6:	6804      	ldr	r4, [r0, #0]
 800e8a8:	fa03 f506 	lsl.w	r5, r3, r6
 800e8ac:	432c      	orrs	r4, r5
 800e8ae:	40d3      	lsrs	r3, r2
 800e8b0:	6004      	str	r4, [r0, #0]
 800e8b2:	f840 3f04 	str.w	r3, [r0, #4]!
 800e8b6:	4288      	cmp	r0, r1
 800e8b8:	d3f4      	bcc.n	800e8a4 <L_shift+0xc>
 800e8ba:	bd70      	pop	{r4, r5, r6, pc}

0800e8bc <__match>:
 800e8bc:	b530      	push	{r4, r5, lr}
 800e8be:	6803      	ldr	r3, [r0, #0]
 800e8c0:	3301      	adds	r3, #1
 800e8c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e8c6:	b914      	cbnz	r4, 800e8ce <__match+0x12>
 800e8c8:	6003      	str	r3, [r0, #0]
 800e8ca:	2001      	movs	r0, #1
 800e8cc:	bd30      	pop	{r4, r5, pc}
 800e8ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e8d2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e8d6:	2d19      	cmp	r5, #25
 800e8d8:	bf98      	it	ls
 800e8da:	3220      	addls	r2, #32
 800e8dc:	42a2      	cmp	r2, r4
 800e8de:	d0f0      	beq.n	800e8c2 <__match+0x6>
 800e8e0:	2000      	movs	r0, #0
 800e8e2:	e7f3      	b.n	800e8cc <__match+0x10>

0800e8e4 <__hexnan>:
 800e8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8e8:	680b      	ldr	r3, [r1, #0]
 800e8ea:	6801      	ldr	r1, [r0, #0]
 800e8ec:	115e      	asrs	r6, r3, #5
 800e8ee:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e8f2:	f013 031f 	ands.w	r3, r3, #31
 800e8f6:	b087      	sub	sp, #28
 800e8f8:	bf18      	it	ne
 800e8fa:	3604      	addne	r6, #4
 800e8fc:	2500      	movs	r5, #0
 800e8fe:	1f37      	subs	r7, r6, #4
 800e900:	4682      	mov	sl, r0
 800e902:	4690      	mov	r8, r2
 800e904:	9301      	str	r3, [sp, #4]
 800e906:	f846 5c04 	str.w	r5, [r6, #-4]
 800e90a:	46b9      	mov	r9, r7
 800e90c:	463c      	mov	r4, r7
 800e90e:	9502      	str	r5, [sp, #8]
 800e910:	46ab      	mov	fp, r5
 800e912:	784a      	ldrb	r2, [r1, #1]
 800e914:	1c4b      	adds	r3, r1, #1
 800e916:	9303      	str	r3, [sp, #12]
 800e918:	b342      	cbz	r2, 800e96c <__hexnan+0x88>
 800e91a:	4610      	mov	r0, r2
 800e91c:	9105      	str	r1, [sp, #20]
 800e91e:	9204      	str	r2, [sp, #16]
 800e920:	f7ff fd5e 	bl	800e3e0 <__hexdig_fun>
 800e924:	2800      	cmp	r0, #0
 800e926:	d14f      	bne.n	800e9c8 <__hexnan+0xe4>
 800e928:	9a04      	ldr	r2, [sp, #16]
 800e92a:	9905      	ldr	r1, [sp, #20]
 800e92c:	2a20      	cmp	r2, #32
 800e92e:	d818      	bhi.n	800e962 <__hexnan+0x7e>
 800e930:	9b02      	ldr	r3, [sp, #8]
 800e932:	459b      	cmp	fp, r3
 800e934:	dd13      	ble.n	800e95e <__hexnan+0x7a>
 800e936:	454c      	cmp	r4, r9
 800e938:	d206      	bcs.n	800e948 <__hexnan+0x64>
 800e93a:	2d07      	cmp	r5, #7
 800e93c:	dc04      	bgt.n	800e948 <__hexnan+0x64>
 800e93e:	462a      	mov	r2, r5
 800e940:	4649      	mov	r1, r9
 800e942:	4620      	mov	r0, r4
 800e944:	f7ff ffa8 	bl	800e898 <L_shift>
 800e948:	4544      	cmp	r4, r8
 800e94a:	d950      	bls.n	800e9ee <__hexnan+0x10a>
 800e94c:	2300      	movs	r3, #0
 800e94e:	f1a4 0904 	sub.w	r9, r4, #4
 800e952:	f844 3c04 	str.w	r3, [r4, #-4]
 800e956:	f8cd b008 	str.w	fp, [sp, #8]
 800e95a:	464c      	mov	r4, r9
 800e95c:	461d      	mov	r5, r3
 800e95e:	9903      	ldr	r1, [sp, #12]
 800e960:	e7d7      	b.n	800e912 <__hexnan+0x2e>
 800e962:	2a29      	cmp	r2, #41	; 0x29
 800e964:	d156      	bne.n	800ea14 <__hexnan+0x130>
 800e966:	3102      	adds	r1, #2
 800e968:	f8ca 1000 	str.w	r1, [sl]
 800e96c:	f1bb 0f00 	cmp.w	fp, #0
 800e970:	d050      	beq.n	800ea14 <__hexnan+0x130>
 800e972:	454c      	cmp	r4, r9
 800e974:	d206      	bcs.n	800e984 <__hexnan+0xa0>
 800e976:	2d07      	cmp	r5, #7
 800e978:	dc04      	bgt.n	800e984 <__hexnan+0xa0>
 800e97a:	462a      	mov	r2, r5
 800e97c:	4649      	mov	r1, r9
 800e97e:	4620      	mov	r0, r4
 800e980:	f7ff ff8a 	bl	800e898 <L_shift>
 800e984:	4544      	cmp	r4, r8
 800e986:	d934      	bls.n	800e9f2 <__hexnan+0x10e>
 800e988:	f1a8 0204 	sub.w	r2, r8, #4
 800e98c:	4623      	mov	r3, r4
 800e98e:	f853 1b04 	ldr.w	r1, [r3], #4
 800e992:	f842 1f04 	str.w	r1, [r2, #4]!
 800e996:	429f      	cmp	r7, r3
 800e998:	d2f9      	bcs.n	800e98e <__hexnan+0xaa>
 800e99a:	1b3b      	subs	r3, r7, r4
 800e99c:	f023 0303 	bic.w	r3, r3, #3
 800e9a0:	3304      	adds	r3, #4
 800e9a2:	3401      	adds	r4, #1
 800e9a4:	3e03      	subs	r6, #3
 800e9a6:	42b4      	cmp	r4, r6
 800e9a8:	bf88      	it	hi
 800e9aa:	2304      	movhi	r3, #4
 800e9ac:	4443      	add	r3, r8
 800e9ae:	2200      	movs	r2, #0
 800e9b0:	f843 2b04 	str.w	r2, [r3], #4
 800e9b4:	429f      	cmp	r7, r3
 800e9b6:	d2fb      	bcs.n	800e9b0 <__hexnan+0xcc>
 800e9b8:	683b      	ldr	r3, [r7, #0]
 800e9ba:	b91b      	cbnz	r3, 800e9c4 <__hexnan+0xe0>
 800e9bc:	4547      	cmp	r7, r8
 800e9be:	d127      	bne.n	800ea10 <__hexnan+0x12c>
 800e9c0:	2301      	movs	r3, #1
 800e9c2:	603b      	str	r3, [r7, #0]
 800e9c4:	2005      	movs	r0, #5
 800e9c6:	e026      	b.n	800ea16 <__hexnan+0x132>
 800e9c8:	3501      	adds	r5, #1
 800e9ca:	2d08      	cmp	r5, #8
 800e9cc:	f10b 0b01 	add.w	fp, fp, #1
 800e9d0:	dd06      	ble.n	800e9e0 <__hexnan+0xfc>
 800e9d2:	4544      	cmp	r4, r8
 800e9d4:	d9c3      	bls.n	800e95e <__hexnan+0x7a>
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	f844 3c04 	str.w	r3, [r4, #-4]
 800e9dc:	2501      	movs	r5, #1
 800e9de:	3c04      	subs	r4, #4
 800e9e0:	6822      	ldr	r2, [r4, #0]
 800e9e2:	f000 000f 	and.w	r0, r0, #15
 800e9e6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e9ea:	6022      	str	r2, [r4, #0]
 800e9ec:	e7b7      	b.n	800e95e <__hexnan+0x7a>
 800e9ee:	2508      	movs	r5, #8
 800e9f0:	e7b5      	b.n	800e95e <__hexnan+0x7a>
 800e9f2:	9b01      	ldr	r3, [sp, #4]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	d0df      	beq.n	800e9b8 <__hexnan+0xd4>
 800e9f8:	f04f 32ff 	mov.w	r2, #4294967295
 800e9fc:	f1c3 0320 	rsb	r3, r3, #32
 800ea00:	fa22 f303 	lsr.w	r3, r2, r3
 800ea04:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ea08:	401a      	ands	r2, r3
 800ea0a:	f846 2c04 	str.w	r2, [r6, #-4]
 800ea0e:	e7d3      	b.n	800e9b8 <__hexnan+0xd4>
 800ea10:	3f04      	subs	r7, #4
 800ea12:	e7d1      	b.n	800e9b8 <__hexnan+0xd4>
 800ea14:	2004      	movs	r0, #4
 800ea16:	b007      	add	sp, #28
 800ea18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ea1c <_localeconv_r>:
 800ea1c:	4800      	ldr	r0, [pc, #0]	; (800ea20 <_localeconv_r+0x4>)
 800ea1e:	4770      	bx	lr
 800ea20:	20000284 	.word	0x20000284

0800ea24 <_lseek_r>:
 800ea24:	b538      	push	{r3, r4, r5, lr}
 800ea26:	4d07      	ldr	r5, [pc, #28]	; (800ea44 <_lseek_r+0x20>)
 800ea28:	4604      	mov	r4, r0
 800ea2a:	4608      	mov	r0, r1
 800ea2c:	4611      	mov	r1, r2
 800ea2e:	2200      	movs	r2, #0
 800ea30:	602a      	str	r2, [r5, #0]
 800ea32:	461a      	mov	r2, r3
 800ea34:	f7f4 f882 	bl	8002b3c <_lseek>
 800ea38:	1c43      	adds	r3, r0, #1
 800ea3a:	d102      	bne.n	800ea42 <_lseek_r+0x1e>
 800ea3c:	682b      	ldr	r3, [r5, #0]
 800ea3e:	b103      	cbz	r3, 800ea42 <_lseek_r+0x1e>
 800ea40:	6023      	str	r3, [r4, #0]
 800ea42:	bd38      	pop	{r3, r4, r5, pc}
 800ea44:	20002b44 	.word	0x20002b44

0800ea48 <malloc>:
 800ea48:	4b02      	ldr	r3, [pc, #8]	; (800ea54 <malloc+0xc>)
 800ea4a:	4601      	mov	r1, r0
 800ea4c:	6818      	ldr	r0, [r3, #0]
 800ea4e:	f7fc beaf 	b.w	800b7b0 <_malloc_r>
 800ea52:	bf00      	nop
 800ea54:	2000012c 	.word	0x2000012c

0800ea58 <__ascii_mbtowc>:
 800ea58:	b082      	sub	sp, #8
 800ea5a:	b901      	cbnz	r1, 800ea5e <__ascii_mbtowc+0x6>
 800ea5c:	a901      	add	r1, sp, #4
 800ea5e:	b142      	cbz	r2, 800ea72 <__ascii_mbtowc+0x1a>
 800ea60:	b14b      	cbz	r3, 800ea76 <__ascii_mbtowc+0x1e>
 800ea62:	7813      	ldrb	r3, [r2, #0]
 800ea64:	600b      	str	r3, [r1, #0]
 800ea66:	7812      	ldrb	r2, [r2, #0]
 800ea68:	1e10      	subs	r0, r2, #0
 800ea6a:	bf18      	it	ne
 800ea6c:	2001      	movne	r0, #1
 800ea6e:	b002      	add	sp, #8
 800ea70:	4770      	bx	lr
 800ea72:	4610      	mov	r0, r2
 800ea74:	e7fb      	b.n	800ea6e <__ascii_mbtowc+0x16>
 800ea76:	f06f 0001 	mvn.w	r0, #1
 800ea7a:	e7f8      	b.n	800ea6e <__ascii_mbtowc+0x16>

0800ea7c <__malloc_lock>:
 800ea7c:	4801      	ldr	r0, [pc, #4]	; (800ea84 <__malloc_lock+0x8>)
 800ea7e:	f7fc be7e 	b.w	800b77e <__retarget_lock_acquire_recursive>
 800ea82:	bf00      	nop
 800ea84:	20002b3c 	.word	0x20002b3c

0800ea88 <__malloc_unlock>:
 800ea88:	4801      	ldr	r0, [pc, #4]	; (800ea90 <__malloc_unlock+0x8>)
 800ea8a:	f7fc be79 	b.w	800b780 <__retarget_lock_release_recursive>
 800ea8e:	bf00      	nop
 800ea90:	20002b3c 	.word	0x20002b3c

0800ea94 <_Balloc>:
 800ea94:	b570      	push	{r4, r5, r6, lr}
 800ea96:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ea98:	4604      	mov	r4, r0
 800ea9a:	460d      	mov	r5, r1
 800ea9c:	b976      	cbnz	r6, 800eabc <_Balloc+0x28>
 800ea9e:	2010      	movs	r0, #16
 800eaa0:	f7ff ffd2 	bl	800ea48 <malloc>
 800eaa4:	4602      	mov	r2, r0
 800eaa6:	6260      	str	r0, [r4, #36]	; 0x24
 800eaa8:	b920      	cbnz	r0, 800eab4 <_Balloc+0x20>
 800eaaa:	4b18      	ldr	r3, [pc, #96]	; (800eb0c <_Balloc+0x78>)
 800eaac:	4818      	ldr	r0, [pc, #96]	; (800eb10 <_Balloc+0x7c>)
 800eaae:	2166      	movs	r1, #102	; 0x66
 800eab0:	f000 fea2 	bl	800f7f8 <__assert_func>
 800eab4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eab8:	6006      	str	r6, [r0, #0]
 800eaba:	60c6      	str	r6, [r0, #12]
 800eabc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800eabe:	68f3      	ldr	r3, [r6, #12]
 800eac0:	b183      	cbz	r3, 800eae4 <_Balloc+0x50>
 800eac2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eac4:	68db      	ldr	r3, [r3, #12]
 800eac6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eaca:	b9b8      	cbnz	r0, 800eafc <_Balloc+0x68>
 800eacc:	2101      	movs	r1, #1
 800eace:	fa01 f605 	lsl.w	r6, r1, r5
 800ead2:	1d72      	adds	r2, r6, #5
 800ead4:	0092      	lsls	r2, r2, #2
 800ead6:	4620      	mov	r0, r4
 800ead8:	f000 fc97 	bl	800f40a <_calloc_r>
 800eadc:	b160      	cbz	r0, 800eaf8 <_Balloc+0x64>
 800eade:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800eae2:	e00e      	b.n	800eb02 <_Balloc+0x6e>
 800eae4:	2221      	movs	r2, #33	; 0x21
 800eae6:	2104      	movs	r1, #4
 800eae8:	4620      	mov	r0, r4
 800eaea:	f000 fc8e 	bl	800f40a <_calloc_r>
 800eaee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800eaf0:	60f0      	str	r0, [r6, #12]
 800eaf2:	68db      	ldr	r3, [r3, #12]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d1e4      	bne.n	800eac2 <_Balloc+0x2e>
 800eaf8:	2000      	movs	r0, #0
 800eafa:	bd70      	pop	{r4, r5, r6, pc}
 800eafc:	6802      	ldr	r2, [r0, #0]
 800eafe:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800eb02:	2300      	movs	r3, #0
 800eb04:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800eb08:	e7f7      	b.n	800eafa <_Balloc+0x66>
 800eb0a:	bf00      	nop
 800eb0c:	080104ae 	.word	0x080104ae
 800eb10:	080105b4 	.word	0x080105b4

0800eb14 <_Bfree>:
 800eb14:	b570      	push	{r4, r5, r6, lr}
 800eb16:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800eb18:	4605      	mov	r5, r0
 800eb1a:	460c      	mov	r4, r1
 800eb1c:	b976      	cbnz	r6, 800eb3c <_Bfree+0x28>
 800eb1e:	2010      	movs	r0, #16
 800eb20:	f7ff ff92 	bl	800ea48 <malloc>
 800eb24:	4602      	mov	r2, r0
 800eb26:	6268      	str	r0, [r5, #36]	; 0x24
 800eb28:	b920      	cbnz	r0, 800eb34 <_Bfree+0x20>
 800eb2a:	4b09      	ldr	r3, [pc, #36]	; (800eb50 <_Bfree+0x3c>)
 800eb2c:	4809      	ldr	r0, [pc, #36]	; (800eb54 <_Bfree+0x40>)
 800eb2e:	218a      	movs	r1, #138	; 0x8a
 800eb30:	f000 fe62 	bl	800f7f8 <__assert_func>
 800eb34:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eb38:	6006      	str	r6, [r0, #0]
 800eb3a:	60c6      	str	r6, [r0, #12]
 800eb3c:	b13c      	cbz	r4, 800eb4e <_Bfree+0x3a>
 800eb3e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800eb40:	6862      	ldr	r2, [r4, #4]
 800eb42:	68db      	ldr	r3, [r3, #12]
 800eb44:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eb48:	6021      	str	r1, [r4, #0]
 800eb4a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eb4e:	bd70      	pop	{r4, r5, r6, pc}
 800eb50:	080104ae 	.word	0x080104ae
 800eb54:	080105b4 	.word	0x080105b4

0800eb58 <__multadd>:
 800eb58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb5c:	690e      	ldr	r6, [r1, #16]
 800eb5e:	4607      	mov	r7, r0
 800eb60:	4698      	mov	r8, r3
 800eb62:	460c      	mov	r4, r1
 800eb64:	f101 0014 	add.w	r0, r1, #20
 800eb68:	2300      	movs	r3, #0
 800eb6a:	6805      	ldr	r5, [r0, #0]
 800eb6c:	b2a9      	uxth	r1, r5
 800eb6e:	fb02 8101 	mla	r1, r2, r1, r8
 800eb72:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800eb76:	0c2d      	lsrs	r5, r5, #16
 800eb78:	fb02 c505 	mla	r5, r2, r5, ip
 800eb7c:	b289      	uxth	r1, r1
 800eb7e:	3301      	adds	r3, #1
 800eb80:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800eb84:	429e      	cmp	r6, r3
 800eb86:	f840 1b04 	str.w	r1, [r0], #4
 800eb8a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800eb8e:	dcec      	bgt.n	800eb6a <__multadd+0x12>
 800eb90:	f1b8 0f00 	cmp.w	r8, #0
 800eb94:	d022      	beq.n	800ebdc <__multadd+0x84>
 800eb96:	68a3      	ldr	r3, [r4, #8]
 800eb98:	42b3      	cmp	r3, r6
 800eb9a:	dc19      	bgt.n	800ebd0 <__multadd+0x78>
 800eb9c:	6861      	ldr	r1, [r4, #4]
 800eb9e:	4638      	mov	r0, r7
 800eba0:	3101      	adds	r1, #1
 800eba2:	f7ff ff77 	bl	800ea94 <_Balloc>
 800eba6:	4605      	mov	r5, r0
 800eba8:	b928      	cbnz	r0, 800ebb6 <__multadd+0x5e>
 800ebaa:	4602      	mov	r2, r0
 800ebac:	4b0d      	ldr	r3, [pc, #52]	; (800ebe4 <__multadd+0x8c>)
 800ebae:	480e      	ldr	r0, [pc, #56]	; (800ebe8 <__multadd+0x90>)
 800ebb0:	21b5      	movs	r1, #181	; 0xb5
 800ebb2:	f000 fe21 	bl	800f7f8 <__assert_func>
 800ebb6:	6922      	ldr	r2, [r4, #16]
 800ebb8:	3202      	adds	r2, #2
 800ebba:	f104 010c 	add.w	r1, r4, #12
 800ebbe:	0092      	lsls	r2, r2, #2
 800ebc0:	300c      	adds	r0, #12
 800ebc2:	f7fc fdde 	bl	800b782 <memcpy>
 800ebc6:	4621      	mov	r1, r4
 800ebc8:	4638      	mov	r0, r7
 800ebca:	f7ff ffa3 	bl	800eb14 <_Bfree>
 800ebce:	462c      	mov	r4, r5
 800ebd0:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800ebd4:	3601      	adds	r6, #1
 800ebd6:	f8c3 8014 	str.w	r8, [r3, #20]
 800ebda:	6126      	str	r6, [r4, #16]
 800ebdc:	4620      	mov	r0, r4
 800ebde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ebe2:	bf00      	nop
 800ebe4:	08010524 	.word	0x08010524
 800ebe8:	080105b4 	.word	0x080105b4

0800ebec <__s2b>:
 800ebec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebf0:	460c      	mov	r4, r1
 800ebf2:	4615      	mov	r5, r2
 800ebf4:	461f      	mov	r7, r3
 800ebf6:	2209      	movs	r2, #9
 800ebf8:	3308      	adds	r3, #8
 800ebfa:	4606      	mov	r6, r0
 800ebfc:	fb93 f3f2 	sdiv	r3, r3, r2
 800ec00:	2100      	movs	r1, #0
 800ec02:	2201      	movs	r2, #1
 800ec04:	429a      	cmp	r2, r3
 800ec06:	db09      	blt.n	800ec1c <__s2b+0x30>
 800ec08:	4630      	mov	r0, r6
 800ec0a:	f7ff ff43 	bl	800ea94 <_Balloc>
 800ec0e:	b940      	cbnz	r0, 800ec22 <__s2b+0x36>
 800ec10:	4602      	mov	r2, r0
 800ec12:	4b19      	ldr	r3, [pc, #100]	; (800ec78 <__s2b+0x8c>)
 800ec14:	4819      	ldr	r0, [pc, #100]	; (800ec7c <__s2b+0x90>)
 800ec16:	21ce      	movs	r1, #206	; 0xce
 800ec18:	f000 fdee 	bl	800f7f8 <__assert_func>
 800ec1c:	0052      	lsls	r2, r2, #1
 800ec1e:	3101      	adds	r1, #1
 800ec20:	e7f0      	b.n	800ec04 <__s2b+0x18>
 800ec22:	9b08      	ldr	r3, [sp, #32]
 800ec24:	6143      	str	r3, [r0, #20]
 800ec26:	2d09      	cmp	r5, #9
 800ec28:	f04f 0301 	mov.w	r3, #1
 800ec2c:	6103      	str	r3, [r0, #16]
 800ec2e:	dd16      	ble.n	800ec5e <__s2b+0x72>
 800ec30:	f104 0909 	add.w	r9, r4, #9
 800ec34:	46c8      	mov	r8, r9
 800ec36:	442c      	add	r4, r5
 800ec38:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ec3c:	4601      	mov	r1, r0
 800ec3e:	3b30      	subs	r3, #48	; 0x30
 800ec40:	220a      	movs	r2, #10
 800ec42:	4630      	mov	r0, r6
 800ec44:	f7ff ff88 	bl	800eb58 <__multadd>
 800ec48:	45a0      	cmp	r8, r4
 800ec4a:	d1f5      	bne.n	800ec38 <__s2b+0x4c>
 800ec4c:	f1a5 0408 	sub.w	r4, r5, #8
 800ec50:	444c      	add	r4, r9
 800ec52:	1b2d      	subs	r5, r5, r4
 800ec54:	1963      	adds	r3, r4, r5
 800ec56:	42bb      	cmp	r3, r7
 800ec58:	db04      	blt.n	800ec64 <__s2b+0x78>
 800ec5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ec5e:	340a      	adds	r4, #10
 800ec60:	2509      	movs	r5, #9
 800ec62:	e7f6      	b.n	800ec52 <__s2b+0x66>
 800ec64:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ec68:	4601      	mov	r1, r0
 800ec6a:	3b30      	subs	r3, #48	; 0x30
 800ec6c:	220a      	movs	r2, #10
 800ec6e:	4630      	mov	r0, r6
 800ec70:	f7ff ff72 	bl	800eb58 <__multadd>
 800ec74:	e7ee      	b.n	800ec54 <__s2b+0x68>
 800ec76:	bf00      	nop
 800ec78:	08010524 	.word	0x08010524
 800ec7c:	080105b4 	.word	0x080105b4

0800ec80 <__hi0bits>:
 800ec80:	0c03      	lsrs	r3, r0, #16
 800ec82:	041b      	lsls	r3, r3, #16
 800ec84:	b9d3      	cbnz	r3, 800ecbc <__hi0bits+0x3c>
 800ec86:	0400      	lsls	r0, r0, #16
 800ec88:	2310      	movs	r3, #16
 800ec8a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ec8e:	bf04      	itt	eq
 800ec90:	0200      	lsleq	r0, r0, #8
 800ec92:	3308      	addeq	r3, #8
 800ec94:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800ec98:	bf04      	itt	eq
 800ec9a:	0100      	lsleq	r0, r0, #4
 800ec9c:	3304      	addeq	r3, #4
 800ec9e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800eca2:	bf04      	itt	eq
 800eca4:	0080      	lsleq	r0, r0, #2
 800eca6:	3302      	addeq	r3, #2
 800eca8:	2800      	cmp	r0, #0
 800ecaa:	db05      	blt.n	800ecb8 <__hi0bits+0x38>
 800ecac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ecb0:	f103 0301 	add.w	r3, r3, #1
 800ecb4:	bf08      	it	eq
 800ecb6:	2320      	moveq	r3, #32
 800ecb8:	4618      	mov	r0, r3
 800ecba:	4770      	bx	lr
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	e7e4      	b.n	800ec8a <__hi0bits+0xa>

0800ecc0 <__lo0bits>:
 800ecc0:	6803      	ldr	r3, [r0, #0]
 800ecc2:	f013 0207 	ands.w	r2, r3, #7
 800ecc6:	4601      	mov	r1, r0
 800ecc8:	d00b      	beq.n	800ece2 <__lo0bits+0x22>
 800ecca:	07da      	lsls	r2, r3, #31
 800eccc:	d424      	bmi.n	800ed18 <__lo0bits+0x58>
 800ecce:	0798      	lsls	r0, r3, #30
 800ecd0:	bf49      	itett	mi
 800ecd2:	085b      	lsrmi	r3, r3, #1
 800ecd4:	089b      	lsrpl	r3, r3, #2
 800ecd6:	2001      	movmi	r0, #1
 800ecd8:	600b      	strmi	r3, [r1, #0]
 800ecda:	bf5c      	itt	pl
 800ecdc:	600b      	strpl	r3, [r1, #0]
 800ecde:	2002      	movpl	r0, #2
 800ece0:	4770      	bx	lr
 800ece2:	b298      	uxth	r0, r3
 800ece4:	b9b0      	cbnz	r0, 800ed14 <__lo0bits+0x54>
 800ece6:	0c1b      	lsrs	r3, r3, #16
 800ece8:	2010      	movs	r0, #16
 800ecea:	f013 0fff 	tst.w	r3, #255	; 0xff
 800ecee:	bf04      	itt	eq
 800ecf0:	0a1b      	lsreq	r3, r3, #8
 800ecf2:	3008      	addeq	r0, #8
 800ecf4:	071a      	lsls	r2, r3, #28
 800ecf6:	bf04      	itt	eq
 800ecf8:	091b      	lsreq	r3, r3, #4
 800ecfa:	3004      	addeq	r0, #4
 800ecfc:	079a      	lsls	r2, r3, #30
 800ecfe:	bf04      	itt	eq
 800ed00:	089b      	lsreq	r3, r3, #2
 800ed02:	3002      	addeq	r0, #2
 800ed04:	07da      	lsls	r2, r3, #31
 800ed06:	d403      	bmi.n	800ed10 <__lo0bits+0x50>
 800ed08:	085b      	lsrs	r3, r3, #1
 800ed0a:	f100 0001 	add.w	r0, r0, #1
 800ed0e:	d005      	beq.n	800ed1c <__lo0bits+0x5c>
 800ed10:	600b      	str	r3, [r1, #0]
 800ed12:	4770      	bx	lr
 800ed14:	4610      	mov	r0, r2
 800ed16:	e7e8      	b.n	800ecea <__lo0bits+0x2a>
 800ed18:	2000      	movs	r0, #0
 800ed1a:	4770      	bx	lr
 800ed1c:	2020      	movs	r0, #32
 800ed1e:	4770      	bx	lr

0800ed20 <__i2b>:
 800ed20:	b510      	push	{r4, lr}
 800ed22:	460c      	mov	r4, r1
 800ed24:	2101      	movs	r1, #1
 800ed26:	f7ff feb5 	bl	800ea94 <_Balloc>
 800ed2a:	4602      	mov	r2, r0
 800ed2c:	b928      	cbnz	r0, 800ed3a <__i2b+0x1a>
 800ed2e:	4b05      	ldr	r3, [pc, #20]	; (800ed44 <__i2b+0x24>)
 800ed30:	4805      	ldr	r0, [pc, #20]	; (800ed48 <__i2b+0x28>)
 800ed32:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ed36:	f000 fd5f 	bl	800f7f8 <__assert_func>
 800ed3a:	2301      	movs	r3, #1
 800ed3c:	6144      	str	r4, [r0, #20]
 800ed3e:	6103      	str	r3, [r0, #16]
 800ed40:	bd10      	pop	{r4, pc}
 800ed42:	bf00      	nop
 800ed44:	08010524 	.word	0x08010524
 800ed48:	080105b4 	.word	0x080105b4

0800ed4c <__multiply>:
 800ed4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed50:	4614      	mov	r4, r2
 800ed52:	690a      	ldr	r2, [r1, #16]
 800ed54:	6923      	ldr	r3, [r4, #16]
 800ed56:	429a      	cmp	r2, r3
 800ed58:	bfb8      	it	lt
 800ed5a:	460b      	movlt	r3, r1
 800ed5c:	460d      	mov	r5, r1
 800ed5e:	bfbc      	itt	lt
 800ed60:	4625      	movlt	r5, r4
 800ed62:	461c      	movlt	r4, r3
 800ed64:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800ed68:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800ed6c:	68ab      	ldr	r3, [r5, #8]
 800ed6e:	6869      	ldr	r1, [r5, #4]
 800ed70:	eb0a 0709 	add.w	r7, sl, r9
 800ed74:	42bb      	cmp	r3, r7
 800ed76:	b085      	sub	sp, #20
 800ed78:	bfb8      	it	lt
 800ed7a:	3101      	addlt	r1, #1
 800ed7c:	f7ff fe8a 	bl	800ea94 <_Balloc>
 800ed80:	b930      	cbnz	r0, 800ed90 <__multiply+0x44>
 800ed82:	4602      	mov	r2, r0
 800ed84:	4b42      	ldr	r3, [pc, #264]	; (800ee90 <__multiply+0x144>)
 800ed86:	4843      	ldr	r0, [pc, #268]	; (800ee94 <__multiply+0x148>)
 800ed88:	f240 115d 	movw	r1, #349	; 0x15d
 800ed8c:	f000 fd34 	bl	800f7f8 <__assert_func>
 800ed90:	f100 0614 	add.w	r6, r0, #20
 800ed94:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800ed98:	4633      	mov	r3, r6
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	4543      	cmp	r3, r8
 800ed9e:	d31e      	bcc.n	800edde <__multiply+0x92>
 800eda0:	f105 0c14 	add.w	ip, r5, #20
 800eda4:	f104 0314 	add.w	r3, r4, #20
 800eda8:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800edac:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800edb0:	9202      	str	r2, [sp, #8]
 800edb2:	ebac 0205 	sub.w	r2, ip, r5
 800edb6:	3a15      	subs	r2, #21
 800edb8:	f022 0203 	bic.w	r2, r2, #3
 800edbc:	3204      	adds	r2, #4
 800edbe:	f105 0115 	add.w	r1, r5, #21
 800edc2:	458c      	cmp	ip, r1
 800edc4:	bf38      	it	cc
 800edc6:	2204      	movcc	r2, #4
 800edc8:	9201      	str	r2, [sp, #4]
 800edca:	9a02      	ldr	r2, [sp, #8]
 800edcc:	9303      	str	r3, [sp, #12]
 800edce:	429a      	cmp	r2, r3
 800edd0:	d808      	bhi.n	800ede4 <__multiply+0x98>
 800edd2:	2f00      	cmp	r7, #0
 800edd4:	dc55      	bgt.n	800ee82 <__multiply+0x136>
 800edd6:	6107      	str	r7, [r0, #16]
 800edd8:	b005      	add	sp, #20
 800edda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edde:	f843 2b04 	str.w	r2, [r3], #4
 800ede2:	e7db      	b.n	800ed9c <__multiply+0x50>
 800ede4:	f8b3 a000 	ldrh.w	sl, [r3]
 800ede8:	f1ba 0f00 	cmp.w	sl, #0
 800edec:	d020      	beq.n	800ee30 <__multiply+0xe4>
 800edee:	f105 0e14 	add.w	lr, r5, #20
 800edf2:	46b1      	mov	r9, r6
 800edf4:	2200      	movs	r2, #0
 800edf6:	f85e 4b04 	ldr.w	r4, [lr], #4
 800edfa:	f8d9 b000 	ldr.w	fp, [r9]
 800edfe:	b2a1      	uxth	r1, r4
 800ee00:	fa1f fb8b 	uxth.w	fp, fp
 800ee04:	fb0a b101 	mla	r1, sl, r1, fp
 800ee08:	4411      	add	r1, r2
 800ee0a:	f8d9 2000 	ldr.w	r2, [r9]
 800ee0e:	0c24      	lsrs	r4, r4, #16
 800ee10:	0c12      	lsrs	r2, r2, #16
 800ee12:	fb0a 2404 	mla	r4, sl, r4, r2
 800ee16:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800ee1a:	b289      	uxth	r1, r1
 800ee1c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800ee20:	45f4      	cmp	ip, lr
 800ee22:	f849 1b04 	str.w	r1, [r9], #4
 800ee26:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800ee2a:	d8e4      	bhi.n	800edf6 <__multiply+0xaa>
 800ee2c:	9901      	ldr	r1, [sp, #4]
 800ee2e:	5072      	str	r2, [r6, r1]
 800ee30:	9a03      	ldr	r2, [sp, #12]
 800ee32:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ee36:	3304      	adds	r3, #4
 800ee38:	f1b9 0f00 	cmp.w	r9, #0
 800ee3c:	d01f      	beq.n	800ee7e <__multiply+0x132>
 800ee3e:	6834      	ldr	r4, [r6, #0]
 800ee40:	f105 0114 	add.w	r1, r5, #20
 800ee44:	46b6      	mov	lr, r6
 800ee46:	f04f 0a00 	mov.w	sl, #0
 800ee4a:	880a      	ldrh	r2, [r1, #0]
 800ee4c:	f8be b002 	ldrh.w	fp, [lr, #2]
 800ee50:	fb09 b202 	mla	r2, r9, r2, fp
 800ee54:	4492      	add	sl, r2
 800ee56:	b2a4      	uxth	r4, r4
 800ee58:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800ee5c:	f84e 4b04 	str.w	r4, [lr], #4
 800ee60:	f851 4b04 	ldr.w	r4, [r1], #4
 800ee64:	f8be 2000 	ldrh.w	r2, [lr]
 800ee68:	0c24      	lsrs	r4, r4, #16
 800ee6a:	fb09 2404 	mla	r4, r9, r4, r2
 800ee6e:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800ee72:	458c      	cmp	ip, r1
 800ee74:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800ee78:	d8e7      	bhi.n	800ee4a <__multiply+0xfe>
 800ee7a:	9a01      	ldr	r2, [sp, #4]
 800ee7c:	50b4      	str	r4, [r6, r2]
 800ee7e:	3604      	adds	r6, #4
 800ee80:	e7a3      	b.n	800edca <__multiply+0x7e>
 800ee82:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d1a5      	bne.n	800edd6 <__multiply+0x8a>
 800ee8a:	3f01      	subs	r7, #1
 800ee8c:	e7a1      	b.n	800edd2 <__multiply+0x86>
 800ee8e:	bf00      	nop
 800ee90:	08010524 	.word	0x08010524
 800ee94:	080105b4 	.word	0x080105b4

0800ee98 <__pow5mult>:
 800ee98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee9c:	4615      	mov	r5, r2
 800ee9e:	f012 0203 	ands.w	r2, r2, #3
 800eea2:	4606      	mov	r6, r0
 800eea4:	460f      	mov	r7, r1
 800eea6:	d007      	beq.n	800eeb8 <__pow5mult+0x20>
 800eea8:	4c25      	ldr	r4, [pc, #148]	; (800ef40 <__pow5mult+0xa8>)
 800eeaa:	3a01      	subs	r2, #1
 800eeac:	2300      	movs	r3, #0
 800eeae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800eeb2:	f7ff fe51 	bl	800eb58 <__multadd>
 800eeb6:	4607      	mov	r7, r0
 800eeb8:	10ad      	asrs	r5, r5, #2
 800eeba:	d03d      	beq.n	800ef38 <__pow5mult+0xa0>
 800eebc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800eebe:	b97c      	cbnz	r4, 800eee0 <__pow5mult+0x48>
 800eec0:	2010      	movs	r0, #16
 800eec2:	f7ff fdc1 	bl	800ea48 <malloc>
 800eec6:	4602      	mov	r2, r0
 800eec8:	6270      	str	r0, [r6, #36]	; 0x24
 800eeca:	b928      	cbnz	r0, 800eed8 <__pow5mult+0x40>
 800eecc:	4b1d      	ldr	r3, [pc, #116]	; (800ef44 <__pow5mult+0xac>)
 800eece:	481e      	ldr	r0, [pc, #120]	; (800ef48 <__pow5mult+0xb0>)
 800eed0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800eed4:	f000 fc90 	bl	800f7f8 <__assert_func>
 800eed8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800eedc:	6004      	str	r4, [r0, #0]
 800eede:	60c4      	str	r4, [r0, #12]
 800eee0:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800eee4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800eee8:	b94c      	cbnz	r4, 800eefe <__pow5mult+0x66>
 800eeea:	f240 2171 	movw	r1, #625	; 0x271
 800eeee:	4630      	mov	r0, r6
 800eef0:	f7ff ff16 	bl	800ed20 <__i2b>
 800eef4:	2300      	movs	r3, #0
 800eef6:	f8c8 0008 	str.w	r0, [r8, #8]
 800eefa:	4604      	mov	r4, r0
 800eefc:	6003      	str	r3, [r0, #0]
 800eefe:	f04f 0900 	mov.w	r9, #0
 800ef02:	07eb      	lsls	r3, r5, #31
 800ef04:	d50a      	bpl.n	800ef1c <__pow5mult+0x84>
 800ef06:	4639      	mov	r1, r7
 800ef08:	4622      	mov	r2, r4
 800ef0a:	4630      	mov	r0, r6
 800ef0c:	f7ff ff1e 	bl	800ed4c <__multiply>
 800ef10:	4639      	mov	r1, r7
 800ef12:	4680      	mov	r8, r0
 800ef14:	4630      	mov	r0, r6
 800ef16:	f7ff fdfd 	bl	800eb14 <_Bfree>
 800ef1a:	4647      	mov	r7, r8
 800ef1c:	106d      	asrs	r5, r5, #1
 800ef1e:	d00b      	beq.n	800ef38 <__pow5mult+0xa0>
 800ef20:	6820      	ldr	r0, [r4, #0]
 800ef22:	b938      	cbnz	r0, 800ef34 <__pow5mult+0x9c>
 800ef24:	4622      	mov	r2, r4
 800ef26:	4621      	mov	r1, r4
 800ef28:	4630      	mov	r0, r6
 800ef2a:	f7ff ff0f 	bl	800ed4c <__multiply>
 800ef2e:	6020      	str	r0, [r4, #0]
 800ef30:	f8c0 9000 	str.w	r9, [r0]
 800ef34:	4604      	mov	r4, r0
 800ef36:	e7e4      	b.n	800ef02 <__pow5mult+0x6a>
 800ef38:	4638      	mov	r0, r7
 800ef3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ef3e:	bf00      	nop
 800ef40:	08010708 	.word	0x08010708
 800ef44:	080104ae 	.word	0x080104ae
 800ef48:	080105b4 	.word	0x080105b4

0800ef4c <__lshift>:
 800ef4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef50:	460c      	mov	r4, r1
 800ef52:	6849      	ldr	r1, [r1, #4]
 800ef54:	6923      	ldr	r3, [r4, #16]
 800ef56:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ef5a:	68a3      	ldr	r3, [r4, #8]
 800ef5c:	4607      	mov	r7, r0
 800ef5e:	4691      	mov	r9, r2
 800ef60:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ef64:	f108 0601 	add.w	r6, r8, #1
 800ef68:	42b3      	cmp	r3, r6
 800ef6a:	db0b      	blt.n	800ef84 <__lshift+0x38>
 800ef6c:	4638      	mov	r0, r7
 800ef6e:	f7ff fd91 	bl	800ea94 <_Balloc>
 800ef72:	4605      	mov	r5, r0
 800ef74:	b948      	cbnz	r0, 800ef8a <__lshift+0x3e>
 800ef76:	4602      	mov	r2, r0
 800ef78:	4b28      	ldr	r3, [pc, #160]	; (800f01c <__lshift+0xd0>)
 800ef7a:	4829      	ldr	r0, [pc, #164]	; (800f020 <__lshift+0xd4>)
 800ef7c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ef80:	f000 fc3a 	bl	800f7f8 <__assert_func>
 800ef84:	3101      	adds	r1, #1
 800ef86:	005b      	lsls	r3, r3, #1
 800ef88:	e7ee      	b.n	800ef68 <__lshift+0x1c>
 800ef8a:	2300      	movs	r3, #0
 800ef8c:	f100 0114 	add.w	r1, r0, #20
 800ef90:	f100 0210 	add.w	r2, r0, #16
 800ef94:	4618      	mov	r0, r3
 800ef96:	4553      	cmp	r3, sl
 800ef98:	db33      	blt.n	800f002 <__lshift+0xb6>
 800ef9a:	6920      	ldr	r0, [r4, #16]
 800ef9c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800efa0:	f104 0314 	add.w	r3, r4, #20
 800efa4:	f019 091f 	ands.w	r9, r9, #31
 800efa8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800efac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800efb0:	d02b      	beq.n	800f00a <__lshift+0xbe>
 800efb2:	f1c9 0e20 	rsb	lr, r9, #32
 800efb6:	468a      	mov	sl, r1
 800efb8:	2200      	movs	r2, #0
 800efba:	6818      	ldr	r0, [r3, #0]
 800efbc:	fa00 f009 	lsl.w	r0, r0, r9
 800efc0:	4302      	orrs	r2, r0
 800efc2:	f84a 2b04 	str.w	r2, [sl], #4
 800efc6:	f853 2b04 	ldr.w	r2, [r3], #4
 800efca:	459c      	cmp	ip, r3
 800efcc:	fa22 f20e 	lsr.w	r2, r2, lr
 800efd0:	d8f3      	bhi.n	800efba <__lshift+0x6e>
 800efd2:	ebac 0304 	sub.w	r3, ip, r4
 800efd6:	3b15      	subs	r3, #21
 800efd8:	f023 0303 	bic.w	r3, r3, #3
 800efdc:	3304      	adds	r3, #4
 800efde:	f104 0015 	add.w	r0, r4, #21
 800efe2:	4584      	cmp	ip, r0
 800efe4:	bf38      	it	cc
 800efe6:	2304      	movcc	r3, #4
 800efe8:	50ca      	str	r2, [r1, r3]
 800efea:	b10a      	cbz	r2, 800eff0 <__lshift+0xa4>
 800efec:	f108 0602 	add.w	r6, r8, #2
 800eff0:	3e01      	subs	r6, #1
 800eff2:	4638      	mov	r0, r7
 800eff4:	612e      	str	r6, [r5, #16]
 800eff6:	4621      	mov	r1, r4
 800eff8:	f7ff fd8c 	bl	800eb14 <_Bfree>
 800effc:	4628      	mov	r0, r5
 800effe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f002:	f842 0f04 	str.w	r0, [r2, #4]!
 800f006:	3301      	adds	r3, #1
 800f008:	e7c5      	b.n	800ef96 <__lshift+0x4a>
 800f00a:	3904      	subs	r1, #4
 800f00c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f010:	f841 2f04 	str.w	r2, [r1, #4]!
 800f014:	459c      	cmp	ip, r3
 800f016:	d8f9      	bhi.n	800f00c <__lshift+0xc0>
 800f018:	e7ea      	b.n	800eff0 <__lshift+0xa4>
 800f01a:	bf00      	nop
 800f01c:	08010524 	.word	0x08010524
 800f020:	080105b4 	.word	0x080105b4

0800f024 <__mcmp>:
 800f024:	b530      	push	{r4, r5, lr}
 800f026:	6902      	ldr	r2, [r0, #16]
 800f028:	690c      	ldr	r4, [r1, #16]
 800f02a:	1b12      	subs	r2, r2, r4
 800f02c:	d10e      	bne.n	800f04c <__mcmp+0x28>
 800f02e:	f100 0314 	add.w	r3, r0, #20
 800f032:	3114      	adds	r1, #20
 800f034:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800f038:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800f03c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800f040:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800f044:	42a5      	cmp	r5, r4
 800f046:	d003      	beq.n	800f050 <__mcmp+0x2c>
 800f048:	d305      	bcc.n	800f056 <__mcmp+0x32>
 800f04a:	2201      	movs	r2, #1
 800f04c:	4610      	mov	r0, r2
 800f04e:	bd30      	pop	{r4, r5, pc}
 800f050:	4283      	cmp	r3, r0
 800f052:	d3f3      	bcc.n	800f03c <__mcmp+0x18>
 800f054:	e7fa      	b.n	800f04c <__mcmp+0x28>
 800f056:	f04f 32ff 	mov.w	r2, #4294967295
 800f05a:	e7f7      	b.n	800f04c <__mcmp+0x28>

0800f05c <__mdiff>:
 800f05c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f060:	460c      	mov	r4, r1
 800f062:	4606      	mov	r6, r0
 800f064:	4611      	mov	r1, r2
 800f066:	4620      	mov	r0, r4
 800f068:	4617      	mov	r7, r2
 800f06a:	f7ff ffdb 	bl	800f024 <__mcmp>
 800f06e:	1e05      	subs	r5, r0, #0
 800f070:	d110      	bne.n	800f094 <__mdiff+0x38>
 800f072:	4629      	mov	r1, r5
 800f074:	4630      	mov	r0, r6
 800f076:	f7ff fd0d 	bl	800ea94 <_Balloc>
 800f07a:	b930      	cbnz	r0, 800f08a <__mdiff+0x2e>
 800f07c:	4b39      	ldr	r3, [pc, #228]	; (800f164 <__mdiff+0x108>)
 800f07e:	4602      	mov	r2, r0
 800f080:	f240 2132 	movw	r1, #562	; 0x232
 800f084:	4838      	ldr	r0, [pc, #224]	; (800f168 <__mdiff+0x10c>)
 800f086:	f000 fbb7 	bl	800f7f8 <__assert_func>
 800f08a:	2301      	movs	r3, #1
 800f08c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f090:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f094:	bfa4      	itt	ge
 800f096:	463b      	movge	r3, r7
 800f098:	4627      	movge	r7, r4
 800f09a:	4630      	mov	r0, r6
 800f09c:	6879      	ldr	r1, [r7, #4]
 800f09e:	bfa6      	itte	ge
 800f0a0:	461c      	movge	r4, r3
 800f0a2:	2500      	movge	r5, #0
 800f0a4:	2501      	movlt	r5, #1
 800f0a6:	f7ff fcf5 	bl	800ea94 <_Balloc>
 800f0aa:	b920      	cbnz	r0, 800f0b6 <__mdiff+0x5a>
 800f0ac:	4b2d      	ldr	r3, [pc, #180]	; (800f164 <__mdiff+0x108>)
 800f0ae:	4602      	mov	r2, r0
 800f0b0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800f0b4:	e7e6      	b.n	800f084 <__mdiff+0x28>
 800f0b6:	693e      	ldr	r6, [r7, #16]
 800f0b8:	60c5      	str	r5, [r0, #12]
 800f0ba:	6925      	ldr	r5, [r4, #16]
 800f0bc:	f107 0114 	add.w	r1, r7, #20
 800f0c0:	f104 0914 	add.w	r9, r4, #20
 800f0c4:	f100 0e14 	add.w	lr, r0, #20
 800f0c8:	f107 0210 	add.w	r2, r7, #16
 800f0cc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800f0d0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800f0d4:	46f2      	mov	sl, lr
 800f0d6:	2700      	movs	r7, #0
 800f0d8:	f859 3b04 	ldr.w	r3, [r9], #4
 800f0dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800f0e0:	fa1f f883 	uxth.w	r8, r3
 800f0e4:	fa17 f78b 	uxtah	r7, r7, fp
 800f0e8:	0c1b      	lsrs	r3, r3, #16
 800f0ea:	eba7 0808 	sub.w	r8, r7, r8
 800f0ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800f0f2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800f0f6:	fa1f f888 	uxth.w	r8, r8
 800f0fa:	141f      	asrs	r7, r3, #16
 800f0fc:	454d      	cmp	r5, r9
 800f0fe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800f102:	f84a 3b04 	str.w	r3, [sl], #4
 800f106:	d8e7      	bhi.n	800f0d8 <__mdiff+0x7c>
 800f108:	1b2b      	subs	r3, r5, r4
 800f10a:	3b15      	subs	r3, #21
 800f10c:	f023 0303 	bic.w	r3, r3, #3
 800f110:	3304      	adds	r3, #4
 800f112:	3415      	adds	r4, #21
 800f114:	42a5      	cmp	r5, r4
 800f116:	bf38      	it	cc
 800f118:	2304      	movcc	r3, #4
 800f11a:	4419      	add	r1, r3
 800f11c:	4473      	add	r3, lr
 800f11e:	469e      	mov	lr, r3
 800f120:	460d      	mov	r5, r1
 800f122:	4565      	cmp	r5, ip
 800f124:	d30e      	bcc.n	800f144 <__mdiff+0xe8>
 800f126:	f10c 0203 	add.w	r2, ip, #3
 800f12a:	1a52      	subs	r2, r2, r1
 800f12c:	f022 0203 	bic.w	r2, r2, #3
 800f130:	3903      	subs	r1, #3
 800f132:	458c      	cmp	ip, r1
 800f134:	bf38      	it	cc
 800f136:	2200      	movcc	r2, #0
 800f138:	441a      	add	r2, r3
 800f13a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800f13e:	b17b      	cbz	r3, 800f160 <__mdiff+0x104>
 800f140:	6106      	str	r6, [r0, #16]
 800f142:	e7a5      	b.n	800f090 <__mdiff+0x34>
 800f144:	f855 8b04 	ldr.w	r8, [r5], #4
 800f148:	fa17 f488 	uxtah	r4, r7, r8
 800f14c:	1422      	asrs	r2, r4, #16
 800f14e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800f152:	b2a4      	uxth	r4, r4
 800f154:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800f158:	f84e 4b04 	str.w	r4, [lr], #4
 800f15c:	1417      	asrs	r7, r2, #16
 800f15e:	e7e0      	b.n	800f122 <__mdiff+0xc6>
 800f160:	3e01      	subs	r6, #1
 800f162:	e7ea      	b.n	800f13a <__mdiff+0xde>
 800f164:	08010524 	.word	0x08010524
 800f168:	080105b4 	.word	0x080105b4

0800f16c <__ulp>:
 800f16c:	b082      	sub	sp, #8
 800f16e:	ed8d 0b00 	vstr	d0, [sp]
 800f172:	9b01      	ldr	r3, [sp, #4]
 800f174:	4912      	ldr	r1, [pc, #72]	; (800f1c0 <__ulp+0x54>)
 800f176:	4019      	ands	r1, r3
 800f178:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800f17c:	2900      	cmp	r1, #0
 800f17e:	dd05      	ble.n	800f18c <__ulp+0x20>
 800f180:	2200      	movs	r2, #0
 800f182:	460b      	mov	r3, r1
 800f184:	ec43 2b10 	vmov	d0, r2, r3
 800f188:	b002      	add	sp, #8
 800f18a:	4770      	bx	lr
 800f18c:	4249      	negs	r1, r1
 800f18e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800f192:	ea4f 5021 	mov.w	r0, r1, asr #20
 800f196:	f04f 0200 	mov.w	r2, #0
 800f19a:	f04f 0300 	mov.w	r3, #0
 800f19e:	da04      	bge.n	800f1aa <__ulp+0x3e>
 800f1a0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800f1a4:	fa41 f300 	asr.w	r3, r1, r0
 800f1a8:	e7ec      	b.n	800f184 <__ulp+0x18>
 800f1aa:	f1a0 0114 	sub.w	r1, r0, #20
 800f1ae:	291e      	cmp	r1, #30
 800f1b0:	bfda      	itte	le
 800f1b2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800f1b6:	fa20 f101 	lsrle.w	r1, r0, r1
 800f1ba:	2101      	movgt	r1, #1
 800f1bc:	460a      	mov	r2, r1
 800f1be:	e7e1      	b.n	800f184 <__ulp+0x18>
 800f1c0:	7ff00000 	.word	0x7ff00000

0800f1c4 <__b2d>:
 800f1c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f1c6:	6905      	ldr	r5, [r0, #16]
 800f1c8:	f100 0714 	add.w	r7, r0, #20
 800f1cc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800f1d0:	1f2e      	subs	r6, r5, #4
 800f1d2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800f1d6:	4620      	mov	r0, r4
 800f1d8:	f7ff fd52 	bl	800ec80 <__hi0bits>
 800f1dc:	f1c0 0320 	rsb	r3, r0, #32
 800f1e0:	280a      	cmp	r0, #10
 800f1e2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800f260 <__b2d+0x9c>
 800f1e6:	600b      	str	r3, [r1, #0]
 800f1e8:	dc14      	bgt.n	800f214 <__b2d+0x50>
 800f1ea:	f1c0 0e0b 	rsb	lr, r0, #11
 800f1ee:	fa24 f10e 	lsr.w	r1, r4, lr
 800f1f2:	42b7      	cmp	r7, r6
 800f1f4:	ea41 030c 	orr.w	r3, r1, ip
 800f1f8:	bf34      	ite	cc
 800f1fa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f1fe:	2100      	movcs	r1, #0
 800f200:	3015      	adds	r0, #21
 800f202:	fa04 f000 	lsl.w	r0, r4, r0
 800f206:	fa21 f10e 	lsr.w	r1, r1, lr
 800f20a:	ea40 0201 	orr.w	r2, r0, r1
 800f20e:	ec43 2b10 	vmov	d0, r2, r3
 800f212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f214:	42b7      	cmp	r7, r6
 800f216:	bf3a      	itte	cc
 800f218:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800f21c:	f1a5 0608 	subcc.w	r6, r5, #8
 800f220:	2100      	movcs	r1, #0
 800f222:	380b      	subs	r0, #11
 800f224:	d017      	beq.n	800f256 <__b2d+0x92>
 800f226:	f1c0 0c20 	rsb	ip, r0, #32
 800f22a:	fa04 f500 	lsl.w	r5, r4, r0
 800f22e:	42be      	cmp	r6, r7
 800f230:	fa21 f40c 	lsr.w	r4, r1, ip
 800f234:	ea45 0504 	orr.w	r5, r5, r4
 800f238:	bf8c      	ite	hi
 800f23a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800f23e:	2400      	movls	r4, #0
 800f240:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800f244:	fa01 f000 	lsl.w	r0, r1, r0
 800f248:	fa24 f40c 	lsr.w	r4, r4, ip
 800f24c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800f250:	ea40 0204 	orr.w	r2, r0, r4
 800f254:	e7db      	b.n	800f20e <__b2d+0x4a>
 800f256:	ea44 030c 	orr.w	r3, r4, ip
 800f25a:	460a      	mov	r2, r1
 800f25c:	e7d7      	b.n	800f20e <__b2d+0x4a>
 800f25e:	bf00      	nop
 800f260:	3ff00000 	.word	0x3ff00000

0800f264 <__d2b>:
 800f264:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f268:	4689      	mov	r9, r1
 800f26a:	2101      	movs	r1, #1
 800f26c:	ec57 6b10 	vmov	r6, r7, d0
 800f270:	4690      	mov	r8, r2
 800f272:	f7ff fc0f 	bl	800ea94 <_Balloc>
 800f276:	4604      	mov	r4, r0
 800f278:	b930      	cbnz	r0, 800f288 <__d2b+0x24>
 800f27a:	4602      	mov	r2, r0
 800f27c:	4b25      	ldr	r3, [pc, #148]	; (800f314 <__d2b+0xb0>)
 800f27e:	4826      	ldr	r0, [pc, #152]	; (800f318 <__d2b+0xb4>)
 800f280:	f240 310a 	movw	r1, #778	; 0x30a
 800f284:	f000 fab8 	bl	800f7f8 <__assert_func>
 800f288:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800f28c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800f290:	bb35      	cbnz	r5, 800f2e0 <__d2b+0x7c>
 800f292:	2e00      	cmp	r6, #0
 800f294:	9301      	str	r3, [sp, #4]
 800f296:	d028      	beq.n	800f2ea <__d2b+0x86>
 800f298:	4668      	mov	r0, sp
 800f29a:	9600      	str	r6, [sp, #0]
 800f29c:	f7ff fd10 	bl	800ecc0 <__lo0bits>
 800f2a0:	9900      	ldr	r1, [sp, #0]
 800f2a2:	b300      	cbz	r0, 800f2e6 <__d2b+0x82>
 800f2a4:	9a01      	ldr	r2, [sp, #4]
 800f2a6:	f1c0 0320 	rsb	r3, r0, #32
 800f2aa:	fa02 f303 	lsl.w	r3, r2, r3
 800f2ae:	430b      	orrs	r3, r1
 800f2b0:	40c2      	lsrs	r2, r0
 800f2b2:	6163      	str	r3, [r4, #20]
 800f2b4:	9201      	str	r2, [sp, #4]
 800f2b6:	9b01      	ldr	r3, [sp, #4]
 800f2b8:	61a3      	str	r3, [r4, #24]
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	bf14      	ite	ne
 800f2be:	2202      	movne	r2, #2
 800f2c0:	2201      	moveq	r2, #1
 800f2c2:	6122      	str	r2, [r4, #16]
 800f2c4:	b1d5      	cbz	r5, 800f2fc <__d2b+0x98>
 800f2c6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800f2ca:	4405      	add	r5, r0
 800f2cc:	f8c9 5000 	str.w	r5, [r9]
 800f2d0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800f2d4:	f8c8 0000 	str.w	r0, [r8]
 800f2d8:	4620      	mov	r0, r4
 800f2da:	b003      	add	sp, #12
 800f2dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800f2e4:	e7d5      	b.n	800f292 <__d2b+0x2e>
 800f2e6:	6161      	str	r1, [r4, #20]
 800f2e8:	e7e5      	b.n	800f2b6 <__d2b+0x52>
 800f2ea:	a801      	add	r0, sp, #4
 800f2ec:	f7ff fce8 	bl	800ecc0 <__lo0bits>
 800f2f0:	9b01      	ldr	r3, [sp, #4]
 800f2f2:	6163      	str	r3, [r4, #20]
 800f2f4:	2201      	movs	r2, #1
 800f2f6:	6122      	str	r2, [r4, #16]
 800f2f8:	3020      	adds	r0, #32
 800f2fa:	e7e3      	b.n	800f2c4 <__d2b+0x60>
 800f2fc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f300:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800f304:	f8c9 0000 	str.w	r0, [r9]
 800f308:	6918      	ldr	r0, [r3, #16]
 800f30a:	f7ff fcb9 	bl	800ec80 <__hi0bits>
 800f30e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f312:	e7df      	b.n	800f2d4 <__d2b+0x70>
 800f314:	08010524 	.word	0x08010524
 800f318:	080105b4 	.word	0x080105b4

0800f31c <__ratio>:
 800f31c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f320:	4688      	mov	r8, r1
 800f322:	4669      	mov	r1, sp
 800f324:	4681      	mov	r9, r0
 800f326:	f7ff ff4d 	bl	800f1c4 <__b2d>
 800f32a:	a901      	add	r1, sp, #4
 800f32c:	4640      	mov	r0, r8
 800f32e:	ec55 4b10 	vmov	r4, r5, d0
 800f332:	f7ff ff47 	bl	800f1c4 <__b2d>
 800f336:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f33a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800f33e:	eba3 0c02 	sub.w	ip, r3, r2
 800f342:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f346:	1a9b      	subs	r3, r3, r2
 800f348:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800f34c:	ec51 0b10 	vmov	r0, r1, d0
 800f350:	2b00      	cmp	r3, #0
 800f352:	bfd6      	itet	le
 800f354:	460a      	movle	r2, r1
 800f356:	462a      	movgt	r2, r5
 800f358:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800f35c:	468b      	mov	fp, r1
 800f35e:	462f      	mov	r7, r5
 800f360:	bfd4      	ite	le
 800f362:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800f366:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800f36a:	4620      	mov	r0, r4
 800f36c:	ee10 2a10 	vmov	r2, s0
 800f370:	465b      	mov	r3, fp
 800f372:	4639      	mov	r1, r7
 800f374:	f7f1 fa6a 	bl	800084c <__aeabi_ddiv>
 800f378:	ec41 0b10 	vmov	d0, r0, r1
 800f37c:	b003      	add	sp, #12
 800f37e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f382 <__copybits>:
 800f382:	3901      	subs	r1, #1
 800f384:	b570      	push	{r4, r5, r6, lr}
 800f386:	1149      	asrs	r1, r1, #5
 800f388:	6914      	ldr	r4, [r2, #16]
 800f38a:	3101      	adds	r1, #1
 800f38c:	f102 0314 	add.w	r3, r2, #20
 800f390:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800f394:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800f398:	1f05      	subs	r5, r0, #4
 800f39a:	42a3      	cmp	r3, r4
 800f39c:	d30c      	bcc.n	800f3b8 <__copybits+0x36>
 800f39e:	1aa3      	subs	r3, r4, r2
 800f3a0:	3b11      	subs	r3, #17
 800f3a2:	f023 0303 	bic.w	r3, r3, #3
 800f3a6:	3211      	adds	r2, #17
 800f3a8:	42a2      	cmp	r2, r4
 800f3aa:	bf88      	it	hi
 800f3ac:	2300      	movhi	r3, #0
 800f3ae:	4418      	add	r0, r3
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	4288      	cmp	r0, r1
 800f3b4:	d305      	bcc.n	800f3c2 <__copybits+0x40>
 800f3b6:	bd70      	pop	{r4, r5, r6, pc}
 800f3b8:	f853 6b04 	ldr.w	r6, [r3], #4
 800f3bc:	f845 6f04 	str.w	r6, [r5, #4]!
 800f3c0:	e7eb      	b.n	800f39a <__copybits+0x18>
 800f3c2:	f840 3b04 	str.w	r3, [r0], #4
 800f3c6:	e7f4      	b.n	800f3b2 <__copybits+0x30>

0800f3c8 <__any_on>:
 800f3c8:	f100 0214 	add.w	r2, r0, #20
 800f3cc:	6900      	ldr	r0, [r0, #16]
 800f3ce:	114b      	asrs	r3, r1, #5
 800f3d0:	4298      	cmp	r0, r3
 800f3d2:	b510      	push	{r4, lr}
 800f3d4:	db11      	blt.n	800f3fa <__any_on+0x32>
 800f3d6:	dd0a      	ble.n	800f3ee <__any_on+0x26>
 800f3d8:	f011 011f 	ands.w	r1, r1, #31
 800f3dc:	d007      	beq.n	800f3ee <__any_on+0x26>
 800f3de:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800f3e2:	fa24 f001 	lsr.w	r0, r4, r1
 800f3e6:	fa00 f101 	lsl.w	r1, r0, r1
 800f3ea:	428c      	cmp	r4, r1
 800f3ec:	d10b      	bne.n	800f406 <__any_on+0x3e>
 800f3ee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800f3f2:	4293      	cmp	r3, r2
 800f3f4:	d803      	bhi.n	800f3fe <__any_on+0x36>
 800f3f6:	2000      	movs	r0, #0
 800f3f8:	bd10      	pop	{r4, pc}
 800f3fa:	4603      	mov	r3, r0
 800f3fc:	e7f7      	b.n	800f3ee <__any_on+0x26>
 800f3fe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f402:	2900      	cmp	r1, #0
 800f404:	d0f5      	beq.n	800f3f2 <__any_on+0x2a>
 800f406:	2001      	movs	r0, #1
 800f408:	e7f6      	b.n	800f3f8 <__any_on+0x30>

0800f40a <_calloc_r>:
 800f40a:	b513      	push	{r0, r1, r4, lr}
 800f40c:	434a      	muls	r2, r1
 800f40e:	4611      	mov	r1, r2
 800f410:	9201      	str	r2, [sp, #4]
 800f412:	f7fc f9cd 	bl	800b7b0 <_malloc_r>
 800f416:	4604      	mov	r4, r0
 800f418:	b118      	cbz	r0, 800f422 <_calloc_r+0x18>
 800f41a:	9a01      	ldr	r2, [sp, #4]
 800f41c:	2100      	movs	r1, #0
 800f41e:	f7fc f9be 	bl	800b79e <memset>
 800f422:	4620      	mov	r0, r4
 800f424:	b002      	add	sp, #8
 800f426:	bd10      	pop	{r4, pc}

0800f428 <_free_r>:
 800f428:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f42a:	2900      	cmp	r1, #0
 800f42c:	d048      	beq.n	800f4c0 <_free_r+0x98>
 800f42e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f432:	9001      	str	r0, [sp, #4]
 800f434:	2b00      	cmp	r3, #0
 800f436:	f1a1 0404 	sub.w	r4, r1, #4
 800f43a:	bfb8      	it	lt
 800f43c:	18e4      	addlt	r4, r4, r3
 800f43e:	f7ff fb1d 	bl	800ea7c <__malloc_lock>
 800f442:	4a20      	ldr	r2, [pc, #128]	; (800f4c4 <_free_r+0x9c>)
 800f444:	9801      	ldr	r0, [sp, #4]
 800f446:	6813      	ldr	r3, [r2, #0]
 800f448:	4615      	mov	r5, r2
 800f44a:	b933      	cbnz	r3, 800f45a <_free_r+0x32>
 800f44c:	6063      	str	r3, [r4, #4]
 800f44e:	6014      	str	r4, [r2, #0]
 800f450:	b003      	add	sp, #12
 800f452:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f456:	f7ff bb17 	b.w	800ea88 <__malloc_unlock>
 800f45a:	42a3      	cmp	r3, r4
 800f45c:	d90b      	bls.n	800f476 <_free_r+0x4e>
 800f45e:	6821      	ldr	r1, [r4, #0]
 800f460:	1862      	adds	r2, r4, r1
 800f462:	4293      	cmp	r3, r2
 800f464:	bf04      	itt	eq
 800f466:	681a      	ldreq	r2, [r3, #0]
 800f468:	685b      	ldreq	r3, [r3, #4]
 800f46a:	6063      	str	r3, [r4, #4]
 800f46c:	bf04      	itt	eq
 800f46e:	1852      	addeq	r2, r2, r1
 800f470:	6022      	streq	r2, [r4, #0]
 800f472:	602c      	str	r4, [r5, #0]
 800f474:	e7ec      	b.n	800f450 <_free_r+0x28>
 800f476:	461a      	mov	r2, r3
 800f478:	685b      	ldr	r3, [r3, #4]
 800f47a:	b10b      	cbz	r3, 800f480 <_free_r+0x58>
 800f47c:	42a3      	cmp	r3, r4
 800f47e:	d9fa      	bls.n	800f476 <_free_r+0x4e>
 800f480:	6811      	ldr	r1, [r2, #0]
 800f482:	1855      	adds	r5, r2, r1
 800f484:	42a5      	cmp	r5, r4
 800f486:	d10b      	bne.n	800f4a0 <_free_r+0x78>
 800f488:	6824      	ldr	r4, [r4, #0]
 800f48a:	4421      	add	r1, r4
 800f48c:	1854      	adds	r4, r2, r1
 800f48e:	42a3      	cmp	r3, r4
 800f490:	6011      	str	r1, [r2, #0]
 800f492:	d1dd      	bne.n	800f450 <_free_r+0x28>
 800f494:	681c      	ldr	r4, [r3, #0]
 800f496:	685b      	ldr	r3, [r3, #4]
 800f498:	6053      	str	r3, [r2, #4]
 800f49a:	4421      	add	r1, r4
 800f49c:	6011      	str	r1, [r2, #0]
 800f49e:	e7d7      	b.n	800f450 <_free_r+0x28>
 800f4a0:	d902      	bls.n	800f4a8 <_free_r+0x80>
 800f4a2:	230c      	movs	r3, #12
 800f4a4:	6003      	str	r3, [r0, #0]
 800f4a6:	e7d3      	b.n	800f450 <_free_r+0x28>
 800f4a8:	6825      	ldr	r5, [r4, #0]
 800f4aa:	1961      	adds	r1, r4, r5
 800f4ac:	428b      	cmp	r3, r1
 800f4ae:	bf04      	itt	eq
 800f4b0:	6819      	ldreq	r1, [r3, #0]
 800f4b2:	685b      	ldreq	r3, [r3, #4]
 800f4b4:	6063      	str	r3, [r4, #4]
 800f4b6:	bf04      	itt	eq
 800f4b8:	1949      	addeq	r1, r1, r5
 800f4ba:	6021      	streq	r1, [r4, #0]
 800f4bc:	6054      	str	r4, [r2, #4]
 800f4be:	e7c7      	b.n	800f450 <_free_r+0x28>
 800f4c0:	b003      	add	sp, #12
 800f4c2:	bd30      	pop	{r4, r5, pc}
 800f4c4:	20002874 	.word	0x20002874

0800f4c8 <__ssputs_r>:
 800f4c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f4cc:	688e      	ldr	r6, [r1, #8]
 800f4ce:	429e      	cmp	r6, r3
 800f4d0:	4682      	mov	sl, r0
 800f4d2:	460c      	mov	r4, r1
 800f4d4:	4690      	mov	r8, r2
 800f4d6:	461f      	mov	r7, r3
 800f4d8:	d838      	bhi.n	800f54c <__ssputs_r+0x84>
 800f4da:	898a      	ldrh	r2, [r1, #12]
 800f4dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f4e0:	d032      	beq.n	800f548 <__ssputs_r+0x80>
 800f4e2:	6825      	ldr	r5, [r4, #0]
 800f4e4:	6909      	ldr	r1, [r1, #16]
 800f4e6:	eba5 0901 	sub.w	r9, r5, r1
 800f4ea:	6965      	ldr	r5, [r4, #20]
 800f4ec:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f4f0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f4f4:	3301      	adds	r3, #1
 800f4f6:	444b      	add	r3, r9
 800f4f8:	106d      	asrs	r5, r5, #1
 800f4fa:	429d      	cmp	r5, r3
 800f4fc:	bf38      	it	cc
 800f4fe:	461d      	movcc	r5, r3
 800f500:	0553      	lsls	r3, r2, #21
 800f502:	d531      	bpl.n	800f568 <__ssputs_r+0xa0>
 800f504:	4629      	mov	r1, r5
 800f506:	f7fc f953 	bl	800b7b0 <_malloc_r>
 800f50a:	4606      	mov	r6, r0
 800f50c:	b950      	cbnz	r0, 800f524 <__ssputs_r+0x5c>
 800f50e:	230c      	movs	r3, #12
 800f510:	f8ca 3000 	str.w	r3, [sl]
 800f514:	89a3      	ldrh	r3, [r4, #12]
 800f516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f51a:	81a3      	strh	r3, [r4, #12]
 800f51c:	f04f 30ff 	mov.w	r0, #4294967295
 800f520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f524:	6921      	ldr	r1, [r4, #16]
 800f526:	464a      	mov	r2, r9
 800f528:	f7fc f92b 	bl	800b782 <memcpy>
 800f52c:	89a3      	ldrh	r3, [r4, #12]
 800f52e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f532:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f536:	81a3      	strh	r3, [r4, #12]
 800f538:	6126      	str	r6, [r4, #16]
 800f53a:	6165      	str	r5, [r4, #20]
 800f53c:	444e      	add	r6, r9
 800f53e:	eba5 0509 	sub.w	r5, r5, r9
 800f542:	6026      	str	r6, [r4, #0]
 800f544:	60a5      	str	r5, [r4, #8]
 800f546:	463e      	mov	r6, r7
 800f548:	42be      	cmp	r6, r7
 800f54a:	d900      	bls.n	800f54e <__ssputs_r+0x86>
 800f54c:	463e      	mov	r6, r7
 800f54e:	4632      	mov	r2, r6
 800f550:	6820      	ldr	r0, [r4, #0]
 800f552:	4641      	mov	r1, r8
 800f554:	f000 f980 	bl	800f858 <memmove>
 800f558:	68a3      	ldr	r3, [r4, #8]
 800f55a:	6822      	ldr	r2, [r4, #0]
 800f55c:	1b9b      	subs	r3, r3, r6
 800f55e:	4432      	add	r2, r6
 800f560:	60a3      	str	r3, [r4, #8]
 800f562:	6022      	str	r2, [r4, #0]
 800f564:	2000      	movs	r0, #0
 800f566:	e7db      	b.n	800f520 <__ssputs_r+0x58>
 800f568:	462a      	mov	r2, r5
 800f56a:	f000 f98f 	bl	800f88c <_realloc_r>
 800f56e:	4606      	mov	r6, r0
 800f570:	2800      	cmp	r0, #0
 800f572:	d1e1      	bne.n	800f538 <__ssputs_r+0x70>
 800f574:	6921      	ldr	r1, [r4, #16]
 800f576:	4650      	mov	r0, sl
 800f578:	f7ff ff56 	bl	800f428 <_free_r>
 800f57c:	e7c7      	b.n	800f50e <__ssputs_r+0x46>
	...

0800f580 <_svfiprintf_r>:
 800f580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f584:	4698      	mov	r8, r3
 800f586:	898b      	ldrh	r3, [r1, #12]
 800f588:	061b      	lsls	r3, r3, #24
 800f58a:	b09d      	sub	sp, #116	; 0x74
 800f58c:	4607      	mov	r7, r0
 800f58e:	460d      	mov	r5, r1
 800f590:	4614      	mov	r4, r2
 800f592:	d50e      	bpl.n	800f5b2 <_svfiprintf_r+0x32>
 800f594:	690b      	ldr	r3, [r1, #16]
 800f596:	b963      	cbnz	r3, 800f5b2 <_svfiprintf_r+0x32>
 800f598:	2140      	movs	r1, #64	; 0x40
 800f59a:	f7fc f909 	bl	800b7b0 <_malloc_r>
 800f59e:	6028      	str	r0, [r5, #0]
 800f5a0:	6128      	str	r0, [r5, #16]
 800f5a2:	b920      	cbnz	r0, 800f5ae <_svfiprintf_r+0x2e>
 800f5a4:	230c      	movs	r3, #12
 800f5a6:	603b      	str	r3, [r7, #0]
 800f5a8:	f04f 30ff 	mov.w	r0, #4294967295
 800f5ac:	e0d1      	b.n	800f752 <_svfiprintf_r+0x1d2>
 800f5ae:	2340      	movs	r3, #64	; 0x40
 800f5b0:	616b      	str	r3, [r5, #20]
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	9309      	str	r3, [sp, #36]	; 0x24
 800f5b6:	2320      	movs	r3, #32
 800f5b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f5bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800f5c0:	2330      	movs	r3, #48	; 0x30
 800f5c2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f76c <_svfiprintf_r+0x1ec>
 800f5c6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f5ca:	f04f 0901 	mov.w	r9, #1
 800f5ce:	4623      	mov	r3, r4
 800f5d0:	469a      	mov	sl, r3
 800f5d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f5d6:	b10a      	cbz	r2, 800f5dc <_svfiprintf_r+0x5c>
 800f5d8:	2a25      	cmp	r2, #37	; 0x25
 800f5da:	d1f9      	bne.n	800f5d0 <_svfiprintf_r+0x50>
 800f5dc:	ebba 0b04 	subs.w	fp, sl, r4
 800f5e0:	d00b      	beq.n	800f5fa <_svfiprintf_r+0x7a>
 800f5e2:	465b      	mov	r3, fp
 800f5e4:	4622      	mov	r2, r4
 800f5e6:	4629      	mov	r1, r5
 800f5e8:	4638      	mov	r0, r7
 800f5ea:	f7ff ff6d 	bl	800f4c8 <__ssputs_r>
 800f5ee:	3001      	adds	r0, #1
 800f5f0:	f000 80aa 	beq.w	800f748 <_svfiprintf_r+0x1c8>
 800f5f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f5f6:	445a      	add	r2, fp
 800f5f8:	9209      	str	r2, [sp, #36]	; 0x24
 800f5fa:	f89a 3000 	ldrb.w	r3, [sl]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	f000 80a2 	beq.w	800f748 <_svfiprintf_r+0x1c8>
 800f604:	2300      	movs	r3, #0
 800f606:	f04f 32ff 	mov.w	r2, #4294967295
 800f60a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f60e:	f10a 0a01 	add.w	sl, sl, #1
 800f612:	9304      	str	r3, [sp, #16]
 800f614:	9307      	str	r3, [sp, #28]
 800f616:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f61a:	931a      	str	r3, [sp, #104]	; 0x68
 800f61c:	4654      	mov	r4, sl
 800f61e:	2205      	movs	r2, #5
 800f620:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f624:	4851      	ldr	r0, [pc, #324]	; (800f76c <_svfiprintf_r+0x1ec>)
 800f626:	f7f0 fddb 	bl	80001e0 <memchr>
 800f62a:	9a04      	ldr	r2, [sp, #16]
 800f62c:	b9d8      	cbnz	r0, 800f666 <_svfiprintf_r+0xe6>
 800f62e:	06d0      	lsls	r0, r2, #27
 800f630:	bf44      	itt	mi
 800f632:	2320      	movmi	r3, #32
 800f634:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f638:	0711      	lsls	r1, r2, #28
 800f63a:	bf44      	itt	mi
 800f63c:	232b      	movmi	r3, #43	; 0x2b
 800f63e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f642:	f89a 3000 	ldrb.w	r3, [sl]
 800f646:	2b2a      	cmp	r3, #42	; 0x2a
 800f648:	d015      	beq.n	800f676 <_svfiprintf_r+0xf6>
 800f64a:	9a07      	ldr	r2, [sp, #28]
 800f64c:	4654      	mov	r4, sl
 800f64e:	2000      	movs	r0, #0
 800f650:	f04f 0c0a 	mov.w	ip, #10
 800f654:	4621      	mov	r1, r4
 800f656:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f65a:	3b30      	subs	r3, #48	; 0x30
 800f65c:	2b09      	cmp	r3, #9
 800f65e:	d94e      	bls.n	800f6fe <_svfiprintf_r+0x17e>
 800f660:	b1b0      	cbz	r0, 800f690 <_svfiprintf_r+0x110>
 800f662:	9207      	str	r2, [sp, #28]
 800f664:	e014      	b.n	800f690 <_svfiprintf_r+0x110>
 800f666:	eba0 0308 	sub.w	r3, r0, r8
 800f66a:	fa09 f303 	lsl.w	r3, r9, r3
 800f66e:	4313      	orrs	r3, r2
 800f670:	9304      	str	r3, [sp, #16]
 800f672:	46a2      	mov	sl, r4
 800f674:	e7d2      	b.n	800f61c <_svfiprintf_r+0x9c>
 800f676:	9b03      	ldr	r3, [sp, #12]
 800f678:	1d19      	adds	r1, r3, #4
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	9103      	str	r1, [sp, #12]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	bfbb      	ittet	lt
 800f682:	425b      	neglt	r3, r3
 800f684:	f042 0202 	orrlt.w	r2, r2, #2
 800f688:	9307      	strge	r3, [sp, #28]
 800f68a:	9307      	strlt	r3, [sp, #28]
 800f68c:	bfb8      	it	lt
 800f68e:	9204      	strlt	r2, [sp, #16]
 800f690:	7823      	ldrb	r3, [r4, #0]
 800f692:	2b2e      	cmp	r3, #46	; 0x2e
 800f694:	d10c      	bne.n	800f6b0 <_svfiprintf_r+0x130>
 800f696:	7863      	ldrb	r3, [r4, #1]
 800f698:	2b2a      	cmp	r3, #42	; 0x2a
 800f69a:	d135      	bne.n	800f708 <_svfiprintf_r+0x188>
 800f69c:	9b03      	ldr	r3, [sp, #12]
 800f69e:	1d1a      	adds	r2, r3, #4
 800f6a0:	681b      	ldr	r3, [r3, #0]
 800f6a2:	9203      	str	r2, [sp, #12]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	bfb8      	it	lt
 800f6a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800f6ac:	3402      	adds	r4, #2
 800f6ae:	9305      	str	r3, [sp, #20]
 800f6b0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f77c <_svfiprintf_r+0x1fc>
 800f6b4:	7821      	ldrb	r1, [r4, #0]
 800f6b6:	2203      	movs	r2, #3
 800f6b8:	4650      	mov	r0, sl
 800f6ba:	f7f0 fd91 	bl	80001e0 <memchr>
 800f6be:	b140      	cbz	r0, 800f6d2 <_svfiprintf_r+0x152>
 800f6c0:	2340      	movs	r3, #64	; 0x40
 800f6c2:	eba0 000a 	sub.w	r0, r0, sl
 800f6c6:	fa03 f000 	lsl.w	r0, r3, r0
 800f6ca:	9b04      	ldr	r3, [sp, #16]
 800f6cc:	4303      	orrs	r3, r0
 800f6ce:	3401      	adds	r4, #1
 800f6d0:	9304      	str	r3, [sp, #16]
 800f6d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f6d6:	4826      	ldr	r0, [pc, #152]	; (800f770 <_svfiprintf_r+0x1f0>)
 800f6d8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f6dc:	2206      	movs	r2, #6
 800f6de:	f7f0 fd7f 	bl	80001e0 <memchr>
 800f6e2:	2800      	cmp	r0, #0
 800f6e4:	d038      	beq.n	800f758 <_svfiprintf_r+0x1d8>
 800f6e6:	4b23      	ldr	r3, [pc, #140]	; (800f774 <_svfiprintf_r+0x1f4>)
 800f6e8:	bb1b      	cbnz	r3, 800f732 <_svfiprintf_r+0x1b2>
 800f6ea:	9b03      	ldr	r3, [sp, #12]
 800f6ec:	3307      	adds	r3, #7
 800f6ee:	f023 0307 	bic.w	r3, r3, #7
 800f6f2:	3308      	adds	r3, #8
 800f6f4:	9303      	str	r3, [sp, #12]
 800f6f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6f8:	4433      	add	r3, r6
 800f6fa:	9309      	str	r3, [sp, #36]	; 0x24
 800f6fc:	e767      	b.n	800f5ce <_svfiprintf_r+0x4e>
 800f6fe:	fb0c 3202 	mla	r2, ip, r2, r3
 800f702:	460c      	mov	r4, r1
 800f704:	2001      	movs	r0, #1
 800f706:	e7a5      	b.n	800f654 <_svfiprintf_r+0xd4>
 800f708:	2300      	movs	r3, #0
 800f70a:	3401      	adds	r4, #1
 800f70c:	9305      	str	r3, [sp, #20]
 800f70e:	4619      	mov	r1, r3
 800f710:	f04f 0c0a 	mov.w	ip, #10
 800f714:	4620      	mov	r0, r4
 800f716:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f71a:	3a30      	subs	r2, #48	; 0x30
 800f71c:	2a09      	cmp	r2, #9
 800f71e:	d903      	bls.n	800f728 <_svfiprintf_r+0x1a8>
 800f720:	2b00      	cmp	r3, #0
 800f722:	d0c5      	beq.n	800f6b0 <_svfiprintf_r+0x130>
 800f724:	9105      	str	r1, [sp, #20]
 800f726:	e7c3      	b.n	800f6b0 <_svfiprintf_r+0x130>
 800f728:	fb0c 2101 	mla	r1, ip, r1, r2
 800f72c:	4604      	mov	r4, r0
 800f72e:	2301      	movs	r3, #1
 800f730:	e7f0      	b.n	800f714 <_svfiprintf_r+0x194>
 800f732:	ab03      	add	r3, sp, #12
 800f734:	9300      	str	r3, [sp, #0]
 800f736:	462a      	mov	r2, r5
 800f738:	4b0f      	ldr	r3, [pc, #60]	; (800f778 <_svfiprintf_r+0x1f8>)
 800f73a:	a904      	add	r1, sp, #16
 800f73c:	4638      	mov	r0, r7
 800f73e:	f7fc f931 	bl	800b9a4 <_printf_float>
 800f742:	1c42      	adds	r2, r0, #1
 800f744:	4606      	mov	r6, r0
 800f746:	d1d6      	bne.n	800f6f6 <_svfiprintf_r+0x176>
 800f748:	89ab      	ldrh	r3, [r5, #12]
 800f74a:	065b      	lsls	r3, r3, #25
 800f74c:	f53f af2c 	bmi.w	800f5a8 <_svfiprintf_r+0x28>
 800f750:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f752:	b01d      	add	sp, #116	; 0x74
 800f754:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f758:	ab03      	add	r3, sp, #12
 800f75a:	9300      	str	r3, [sp, #0]
 800f75c:	462a      	mov	r2, r5
 800f75e:	4b06      	ldr	r3, [pc, #24]	; (800f778 <_svfiprintf_r+0x1f8>)
 800f760:	a904      	add	r1, sp, #16
 800f762:	4638      	mov	r0, r7
 800f764:	f7fc fbc2 	bl	800beec <_printf_i>
 800f768:	e7eb      	b.n	800f742 <_svfiprintf_r+0x1c2>
 800f76a:	bf00      	nop
 800f76c:	08010714 	.word	0x08010714
 800f770:	0801071e 	.word	0x0801071e
 800f774:	0800b9a5 	.word	0x0800b9a5
 800f778:	0800f4c9 	.word	0x0800f4c9
 800f77c:	0801071a 	.word	0x0801071a

0800f780 <_read_r>:
 800f780:	b538      	push	{r3, r4, r5, lr}
 800f782:	4d07      	ldr	r5, [pc, #28]	; (800f7a0 <_read_r+0x20>)
 800f784:	4604      	mov	r4, r0
 800f786:	4608      	mov	r0, r1
 800f788:	4611      	mov	r1, r2
 800f78a:	2200      	movs	r2, #0
 800f78c:	602a      	str	r2, [r5, #0]
 800f78e:	461a      	mov	r2, r3
 800f790:	f7f3 f974 	bl	8002a7c <_read>
 800f794:	1c43      	adds	r3, r0, #1
 800f796:	d102      	bne.n	800f79e <_read_r+0x1e>
 800f798:	682b      	ldr	r3, [r5, #0]
 800f79a:	b103      	cbz	r3, 800f79e <_read_r+0x1e>
 800f79c:	6023      	str	r3, [r4, #0]
 800f79e:	bd38      	pop	{r3, r4, r5, pc}
 800f7a0:	20002b44 	.word	0x20002b44
 800f7a4:	00000000 	.word	0x00000000

0800f7a8 <nan>:
 800f7a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800f7b0 <nan+0x8>
 800f7ac:	4770      	bx	lr
 800f7ae:	bf00      	nop
 800f7b0:	00000000 	.word	0x00000000
 800f7b4:	7ff80000 	.word	0x7ff80000

0800f7b8 <strncmp>:
 800f7b8:	b510      	push	{r4, lr}
 800f7ba:	b16a      	cbz	r2, 800f7d8 <strncmp+0x20>
 800f7bc:	3901      	subs	r1, #1
 800f7be:	1884      	adds	r4, r0, r2
 800f7c0:	f810 3b01 	ldrb.w	r3, [r0], #1
 800f7c4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800f7c8:	4293      	cmp	r3, r2
 800f7ca:	d103      	bne.n	800f7d4 <strncmp+0x1c>
 800f7cc:	42a0      	cmp	r0, r4
 800f7ce:	d001      	beq.n	800f7d4 <strncmp+0x1c>
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d1f5      	bne.n	800f7c0 <strncmp+0x8>
 800f7d4:	1a98      	subs	r0, r3, r2
 800f7d6:	bd10      	pop	{r4, pc}
 800f7d8:	4610      	mov	r0, r2
 800f7da:	e7fc      	b.n	800f7d6 <strncmp+0x1e>

0800f7dc <__ascii_wctomb>:
 800f7dc:	b149      	cbz	r1, 800f7f2 <__ascii_wctomb+0x16>
 800f7de:	2aff      	cmp	r2, #255	; 0xff
 800f7e0:	bf85      	ittet	hi
 800f7e2:	238a      	movhi	r3, #138	; 0x8a
 800f7e4:	6003      	strhi	r3, [r0, #0]
 800f7e6:	700a      	strbls	r2, [r1, #0]
 800f7e8:	f04f 30ff 	movhi.w	r0, #4294967295
 800f7ec:	bf98      	it	ls
 800f7ee:	2001      	movls	r0, #1
 800f7f0:	4770      	bx	lr
 800f7f2:	4608      	mov	r0, r1
 800f7f4:	4770      	bx	lr
	...

0800f7f8 <__assert_func>:
 800f7f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f7fa:	4614      	mov	r4, r2
 800f7fc:	461a      	mov	r2, r3
 800f7fe:	4b09      	ldr	r3, [pc, #36]	; (800f824 <__assert_func+0x2c>)
 800f800:	681b      	ldr	r3, [r3, #0]
 800f802:	4605      	mov	r5, r0
 800f804:	68d8      	ldr	r0, [r3, #12]
 800f806:	b14c      	cbz	r4, 800f81c <__assert_func+0x24>
 800f808:	4b07      	ldr	r3, [pc, #28]	; (800f828 <__assert_func+0x30>)
 800f80a:	9100      	str	r1, [sp, #0]
 800f80c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f810:	4906      	ldr	r1, [pc, #24]	; (800f82c <__assert_func+0x34>)
 800f812:	462b      	mov	r3, r5
 800f814:	f000 f80e 	bl	800f834 <fiprintf>
 800f818:	f000 fa78 	bl	800fd0c <abort>
 800f81c:	4b04      	ldr	r3, [pc, #16]	; (800f830 <__assert_func+0x38>)
 800f81e:	461c      	mov	r4, r3
 800f820:	e7f3      	b.n	800f80a <__assert_func+0x12>
 800f822:	bf00      	nop
 800f824:	2000012c 	.word	0x2000012c
 800f828:	08010725 	.word	0x08010725
 800f82c:	08010732 	.word	0x08010732
 800f830:	08010760 	.word	0x08010760

0800f834 <fiprintf>:
 800f834:	b40e      	push	{r1, r2, r3}
 800f836:	b503      	push	{r0, r1, lr}
 800f838:	4601      	mov	r1, r0
 800f83a:	ab03      	add	r3, sp, #12
 800f83c:	4805      	ldr	r0, [pc, #20]	; (800f854 <fiprintf+0x20>)
 800f83e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f842:	6800      	ldr	r0, [r0, #0]
 800f844:	9301      	str	r3, [sp, #4]
 800f846:	f000 f871 	bl	800f92c <_vfiprintf_r>
 800f84a:	b002      	add	sp, #8
 800f84c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f850:	b003      	add	sp, #12
 800f852:	4770      	bx	lr
 800f854:	2000012c 	.word	0x2000012c

0800f858 <memmove>:
 800f858:	4288      	cmp	r0, r1
 800f85a:	b510      	push	{r4, lr}
 800f85c:	eb01 0402 	add.w	r4, r1, r2
 800f860:	d902      	bls.n	800f868 <memmove+0x10>
 800f862:	4284      	cmp	r4, r0
 800f864:	4623      	mov	r3, r4
 800f866:	d807      	bhi.n	800f878 <memmove+0x20>
 800f868:	1e43      	subs	r3, r0, #1
 800f86a:	42a1      	cmp	r1, r4
 800f86c:	d008      	beq.n	800f880 <memmove+0x28>
 800f86e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f872:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f876:	e7f8      	b.n	800f86a <memmove+0x12>
 800f878:	4402      	add	r2, r0
 800f87a:	4601      	mov	r1, r0
 800f87c:	428a      	cmp	r2, r1
 800f87e:	d100      	bne.n	800f882 <memmove+0x2a>
 800f880:	bd10      	pop	{r4, pc}
 800f882:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f886:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f88a:	e7f7      	b.n	800f87c <memmove+0x24>

0800f88c <_realloc_r>:
 800f88c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f88e:	4607      	mov	r7, r0
 800f890:	4614      	mov	r4, r2
 800f892:	460e      	mov	r6, r1
 800f894:	b921      	cbnz	r1, 800f8a0 <_realloc_r+0x14>
 800f896:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f89a:	4611      	mov	r1, r2
 800f89c:	f7fb bf88 	b.w	800b7b0 <_malloc_r>
 800f8a0:	b922      	cbnz	r2, 800f8ac <_realloc_r+0x20>
 800f8a2:	f7ff fdc1 	bl	800f428 <_free_r>
 800f8a6:	4625      	mov	r5, r4
 800f8a8:	4628      	mov	r0, r5
 800f8aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8ac:	f000 fa9a 	bl	800fde4 <_malloc_usable_size_r>
 800f8b0:	42a0      	cmp	r0, r4
 800f8b2:	d20f      	bcs.n	800f8d4 <_realloc_r+0x48>
 800f8b4:	4621      	mov	r1, r4
 800f8b6:	4638      	mov	r0, r7
 800f8b8:	f7fb ff7a 	bl	800b7b0 <_malloc_r>
 800f8bc:	4605      	mov	r5, r0
 800f8be:	2800      	cmp	r0, #0
 800f8c0:	d0f2      	beq.n	800f8a8 <_realloc_r+0x1c>
 800f8c2:	4631      	mov	r1, r6
 800f8c4:	4622      	mov	r2, r4
 800f8c6:	f7fb ff5c 	bl	800b782 <memcpy>
 800f8ca:	4631      	mov	r1, r6
 800f8cc:	4638      	mov	r0, r7
 800f8ce:	f7ff fdab 	bl	800f428 <_free_r>
 800f8d2:	e7e9      	b.n	800f8a8 <_realloc_r+0x1c>
 800f8d4:	4635      	mov	r5, r6
 800f8d6:	e7e7      	b.n	800f8a8 <_realloc_r+0x1c>

0800f8d8 <__sfputc_r>:
 800f8d8:	6893      	ldr	r3, [r2, #8]
 800f8da:	3b01      	subs	r3, #1
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	b410      	push	{r4}
 800f8e0:	6093      	str	r3, [r2, #8]
 800f8e2:	da08      	bge.n	800f8f6 <__sfputc_r+0x1e>
 800f8e4:	6994      	ldr	r4, [r2, #24]
 800f8e6:	42a3      	cmp	r3, r4
 800f8e8:	db01      	blt.n	800f8ee <__sfputc_r+0x16>
 800f8ea:	290a      	cmp	r1, #10
 800f8ec:	d103      	bne.n	800f8f6 <__sfputc_r+0x1e>
 800f8ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f8f2:	f000 b94b 	b.w	800fb8c <__swbuf_r>
 800f8f6:	6813      	ldr	r3, [r2, #0]
 800f8f8:	1c58      	adds	r0, r3, #1
 800f8fa:	6010      	str	r0, [r2, #0]
 800f8fc:	7019      	strb	r1, [r3, #0]
 800f8fe:	4608      	mov	r0, r1
 800f900:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f904:	4770      	bx	lr

0800f906 <__sfputs_r>:
 800f906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f908:	4606      	mov	r6, r0
 800f90a:	460f      	mov	r7, r1
 800f90c:	4614      	mov	r4, r2
 800f90e:	18d5      	adds	r5, r2, r3
 800f910:	42ac      	cmp	r4, r5
 800f912:	d101      	bne.n	800f918 <__sfputs_r+0x12>
 800f914:	2000      	movs	r0, #0
 800f916:	e007      	b.n	800f928 <__sfputs_r+0x22>
 800f918:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f91c:	463a      	mov	r2, r7
 800f91e:	4630      	mov	r0, r6
 800f920:	f7ff ffda 	bl	800f8d8 <__sfputc_r>
 800f924:	1c43      	adds	r3, r0, #1
 800f926:	d1f3      	bne.n	800f910 <__sfputs_r+0xa>
 800f928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f92c <_vfiprintf_r>:
 800f92c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f930:	460d      	mov	r5, r1
 800f932:	b09d      	sub	sp, #116	; 0x74
 800f934:	4614      	mov	r4, r2
 800f936:	4698      	mov	r8, r3
 800f938:	4606      	mov	r6, r0
 800f93a:	b118      	cbz	r0, 800f944 <_vfiprintf_r+0x18>
 800f93c:	6983      	ldr	r3, [r0, #24]
 800f93e:	b90b      	cbnz	r3, 800f944 <_vfiprintf_r+0x18>
 800f940:	f7fb fe5a 	bl	800b5f8 <__sinit>
 800f944:	4b89      	ldr	r3, [pc, #548]	; (800fb6c <_vfiprintf_r+0x240>)
 800f946:	429d      	cmp	r5, r3
 800f948:	d11b      	bne.n	800f982 <_vfiprintf_r+0x56>
 800f94a:	6875      	ldr	r5, [r6, #4]
 800f94c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f94e:	07d9      	lsls	r1, r3, #31
 800f950:	d405      	bmi.n	800f95e <_vfiprintf_r+0x32>
 800f952:	89ab      	ldrh	r3, [r5, #12]
 800f954:	059a      	lsls	r2, r3, #22
 800f956:	d402      	bmi.n	800f95e <_vfiprintf_r+0x32>
 800f958:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f95a:	f7fb ff10 	bl	800b77e <__retarget_lock_acquire_recursive>
 800f95e:	89ab      	ldrh	r3, [r5, #12]
 800f960:	071b      	lsls	r3, r3, #28
 800f962:	d501      	bpl.n	800f968 <_vfiprintf_r+0x3c>
 800f964:	692b      	ldr	r3, [r5, #16]
 800f966:	b9eb      	cbnz	r3, 800f9a4 <_vfiprintf_r+0x78>
 800f968:	4629      	mov	r1, r5
 800f96a:	4630      	mov	r0, r6
 800f96c:	f000 f960 	bl	800fc30 <__swsetup_r>
 800f970:	b1c0      	cbz	r0, 800f9a4 <_vfiprintf_r+0x78>
 800f972:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800f974:	07dc      	lsls	r4, r3, #31
 800f976:	d50e      	bpl.n	800f996 <_vfiprintf_r+0x6a>
 800f978:	f04f 30ff 	mov.w	r0, #4294967295
 800f97c:	b01d      	add	sp, #116	; 0x74
 800f97e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f982:	4b7b      	ldr	r3, [pc, #492]	; (800fb70 <_vfiprintf_r+0x244>)
 800f984:	429d      	cmp	r5, r3
 800f986:	d101      	bne.n	800f98c <_vfiprintf_r+0x60>
 800f988:	68b5      	ldr	r5, [r6, #8]
 800f98a:	e7df      	b.n	800f94c <_vfiprintf_r+0x20>
 800f98c:	4b79      	ldr	r3, [pc, #484]	; (800fb74 <_vfiprintf_r+0x248>)
 800f98e:	429d      	cmp	r5, r3
 800f990:	bf08      	it	eq
 800f992:	68f5      	ldreq	r5, [r6, #12]
 800f994:	e7da      	b.n	800f94c <_vfiprintf_r+0x20>
 800f996:	89ab      	ldrh	r3, [r5, #12]
 800f998:	0598      	lsls	r0, r3, #22
 800f99a:	d4ed      	bmi.n	800f978 <_vfiprintf_r+0x4c>
 800f99c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800f99e:	f7fb feef 	bl	800b780 <__retarget_lock_release_recursive>
 800f9a2:	e7e9      	b.n	800f978 <_vfiprintf_r+0x4c>
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	9309      	str	r3, [sp, #36]	; 0x24
 800f9a8:	2320      	movs	r3, #32
 800f9aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f9ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800f9b2:	2330      	movs	r3, #48	; 0x30
 800f9b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800fb78 <_vfiprintf_r+0x24c>
 800f9b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f9bc:	f04f 0901 	mov.w	r9, #1
 800f9c0:	4623      	mov	r3, r4
 800f9c2:	469a      	mov	sl, r3
 800f9c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f9c8:	b10a      	cbz	r2, 800f9ce <_vfiprintf_r+0xa2>
 800f9ca:	2a25      	cmp	r2, #37	; 0x25
 800f9cc:	d1f9      	bne.n	800f9c2 <_vfiprintf_r+0x96>
 800f9ce:	ebba 0b04 	subs.w	fp, sl, r4
 800f9d2:	d00b      	beq.n	800f9ec <_vfiprintf_r+0xc0>
 800f9d4:	465b      	mov	r3, fp
 800f9d6:	4622      	mov	r2, r4
 800f9d8:	4629      	mov	r1, r5
 800f9da:	4630      	mov	r0, r6
 800f9dc:	f7ff ff93 	bl	800f906 <__sfputs_r>
 800f9e0:	3001      	adds	r0, #1
 800f9e2:	f000 80aa 	beq.w	800fb3a <_vfiprintf_r+0x20e>
 800f9e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f9e8:	445a      	add	r2, fp
 800f9ea:	9209      	str	r2, [sp, #36]	; 0x24
 800f9ec:	f89a 3000 	ldrb.w	r3, [sl]
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	f000 80a2 	beq.w	800fb3a <_vfiprintf_r+0x20e>
 800f9f6:	2300      	movs	r3, #0
 800f9f8:	f04f 32ff 	mov.w	r2, #4294967295
 800f9fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fa00:	f10a 0a01 	add.w	sl, sl, #1
 800fa04:	9304      	str	r3, [sp, #16]
 800fa06:	9307      	str	r3, [sp, #28]
 800fa08:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800fa0c:	931a      	str	r3, [sp, #104]	; 0x68
 800fa0e:	4654      	mov	r4, sl
 800fa10:	2205      	movs	r2, #5
 800fa12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fa16:	4858      	ldr	r0, [pc, #352]	; (800fb78 <_vfiprintf_r+0x24c>)
 800fa18:	f7f0 fbe2 	bl	80001e0 <memchr>
 800fa1c:	9a04      	ldr	r2, [sp, #16]
 800fa1e:	b9d8      	cbnz	r0, 800fa58 <_vfiprintf_r+0x12c>
 800fa20:	06d1      	lsls	r1, r2, #27
 800fa22:	bf44      	itt	mi
 800fa24:	2320      	movmi	r3, #32
 800fa26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa2a:	0713      	lsls	r3, r2, #28
 800fa2c:	bf44      	itt	mi
 800fa2e:	232b      	movmi	r3, #43	; 0x2b
 800fa30:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800fa34:	f89a 3000 	ldrb.w	r3, [sl]
 800fa38:	2b2a      	cmp	r3, #42	; 0x2a
 800fa3a:	d015      	beq.n	800fa68 <_vfiprintf_r+0x13c>
 800fa3c:	9a07      	ldr	r2, [sp, #28]
 800fa3e:	4654      	mov	r4, sl
 800fa40:	2000      	movs	r0, #0
 800fa42:	f04f 0c0a 	mov.w	ip, #10
 800fa46:	4621      	mov	r1, r4
 800fa48:	f811 3b01 	ldrb.w	r3, [r1], #1
 800fa4c:	3b30      	subs	r3, #48	; 0x30
 800fa4e:	2b09      	cmp	r3, #9
 800fa50:	d94e      	bls.n	800faf0 <_vfiprintf_r+0x1c4>
 800fa52:	b1b0      	cbz	r0, 800fa82 <_vfiprintf_r+0x156>
 800fa54:	9207      	str	r2, [sp, #28]
 800fa56:	e014      	b.n	800fa82 <_vfiprintf_r+0x156>
 800fa58:	eba0 0308 	sub.w	r3, r0, r8
 800fa5c:	fa09 f303 	lsl.w	r3, r9, r3
 800fa60:	4313      	orrs	r3, r2
 800fa62:	9304      	str	r3, [sp, #16]
 800fa64:	46a2      	mov	sl, r4
 800fa66:	e7d2      	b.n	800fa0e <_vfiprintf_r+0xe2>
 800fa68:	9b03      	ldr	r3, [sp, #12]
 800fa6a:	1d19      	adds	r1, r3, #4
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	9103      	str	r1, [sp, #12]
 800fa70:	2b00      	cmp	r3, #0
 800fa72:	bfbb      	ittet	lt
 800fa74:	425b      	neglt	r3, r3
 800fa76:	f042 0202 	orrlt.w	r2, r2, #2
 800fa7a:	9307      	strge	r3, [sp, #28]
 800fa7c:	9307      	strlt	r3, [sp, #28]
 800fa7e:	bfb8      	it	lt
 800fa80:	9204      	strlt	r2, [sp, #16]
 800fa82:	7823      	ldrb	r3, [r4, #0]
 800fa84:	2b2e      	cmp	r3, #46	; 0x2e
 800fa86:	d10c      	bne.n	800faa2 <_vfiprintf_r+0x176>
 800fa88:	7863      	ldrb	r3, [r4, #1]
 800fa8a:	2b2a      	cmp	r3, #42	; 0x2a
 800fa8c:	d135      	bne.n	800fafa <_vfiprintf_r+0x1ce>
 800fa8e:	9b03      	ldr	r3, [sp, #12]
 800fa90:	1d1a      	adds	r2, r3, #4
 800fa92:	681b      	ldr	r3, [r3, #0]
 800fa94:	9203      	str	r2, [sp, #12]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	bfb8      	it	lt
 800fa9a:	f04f 33ff 	movlt.w	r3, #4294967295
 800fa9e:	3402      	adds	r4, #2
 800faa0:	9305      	str	r3, [sp, #20]
 800faa2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800fb88 <_vfiprintf_r+0x25c>
 800faa6:	7821      	ldrb	r1, [r4, #0]
 800faa8:	2203      	movs	r2, #3
 800faaa:	4650      	mov	r0, sl
 800faac:	f7f0 fb98 	bl	80001e0 <memchr>
 800fab0:	b140      	cbz	r0, 800fac4 <_vfiprintf_r+0x198>
 800fab2:	2340      	movs	r3, #64	; 0x40
 800fab4:	eba0 000a 	sub.w	r0, r0, sl
 800fab8:	fa03 f000 	lsl.w	r0, r3, r0
 800fabc:	9b04      	ldr	r3, [sp, #16]
 800fabe:	4303      	orrs	r3, r0
 800fac0:	3401      	adds	r4, #1
 800fac2:	9304      	str	r3, [sp, #16]
 800fac4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800fac8:	482c      	ldr	r0, [pc, #176]	; (800fb7c <_vfiprintf_r+0x250>)
 800faca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800face:	2206      	movs	r2, #6
 800fad0:	f7f0 fb86 	bl	80001e0 <memchr>
 800fad4:	2800      	cmp	r0, #0
 800fad6:	d03f      	beq.n	800fb58 <_vfiprintf_r+0x22c>
 800fad8:	4b29      	ldr	r3, [pc, #164]	; (800fb80 <_vfiprintf_r+0x254>)
 800fada:	bb1b      	cbnz	r3, 800fb24 <_vfiprintf_r+0x1f8>
 800fadc:	9b03      	ldr	r3, [sp, #12]
 800fade:	3307      	adds	r3, #7
 800fae0:	f023 0307 	bic.w	r3, r3, #7
 800fae4:	3308      	adds	r3, #8
 800fae6:	9303      	str	r3, [sp, #12]
 800fae8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800faea:	443b      	add	r3, r7
 800faec:	9309      	str	r3, [sp, #36]	; 0x24
 800faee:	e767      	b.n	800f9c0 <_vfiprintf_r+0x94>
 800faf0:	fb0c 3202 	mla	r2, ip, r2, r3
 800faf4:	460c      	mov	r4, r1
 800faf6:	2001      	movs	r0, #1
 800faf8:	e7a5      	b.n	800fa46 <_vfiprintf_r+0x11a>
 800fafa:	2300      	movs	r3, #0
 800fafc:	3401      	adds	r4, #1
 800fafe:	9305      	str	r3, [sp, #20]
 800fb00:	4619      	mov	r1, r3
 800fb02:	f04f 0c0a 	mov.w	ip, #10
 800fb06:	4620      	mov	r0, r4
 800fb08:	f810 2b01 	ldrb.w	r2, [r0], #1
 800fb0c:	3a30      	subs	r2, #48	; 0x30
 800fb0e:	2a09      	cmp	r2, #9
 800fb10:	d903      	bls.n	800fb1a <_vfiprintf_r+0x1ee>
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d0c5      	beq.n	800faa2 <_vfiprintf_r+0x176>
 800fb16:	9105      	str	r1, [sp, #20]
 800fb18:	e7c3      	b.n	800faa2 <_vfiprintf_r+0x176>
 800fb1a:	fb0c 2101 	mla	r1, ip, r1, r2
 800fb1e:	4604      	mov	r4, r0
 800fb20:	2301      	movs	r3, #1
 800fb22:	e7f0      	b.n	800fb06 <_vfiprintf_r+0x1da>
 800fb24:	ab03      	add	r3, sp, #12
 800fb26:	9300      	str	r3, [sp, #0]
 800fb28:	462a      	mov	r2, r5
 800fb2a:	4b16      	ldr	r3, [pc, #88]	; (800fb84 <_vfiprintf_r+0x258>)
 800fb2c:	a904      	add	r1, sp, #16
 800fb2e:	4630      	mov	r0, r6
 800fb30:	f7fb ff38 	bl	800b9a4 <_printf_float>
 800fb34:	4607      	mov	r7, r0
 800fb36:	1c78      	adds	r0, r7, #1
 800fb38:	d1d6      	bne.n	800fae8 <_vfiprintf_r+0x1bc>
 800fb3a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800fb3c:	07d9      	lsls	r1, r3, #31
 800fb3e:	d405      	bmi.n	800fb4c <_vfiprintf_r+0x220>
 800fb40:	89ab      	ldrh	r3, [r5, #12]
 800fb42:	059a      	lsls	r2, r3, #22
 800fb44:	d402      	bmi.n	800fb4c <_vfiprintf_r+0x220>
 800fb46:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800fb48:	f7fb fe1a 	bl	800b780 <__retarget_lock_release_recursive>
 800fb4c:	89ab      	ldrh	r3, [r5, #12]
 800fb4e:	065b      	lsls	r3, r3, #25
 800fb50:	f53f af12 	bmi.w	800f978 <_vfiprintf_r+0x4c>
 800fb54:	9809      	ldr	r0, [sp, #36]	; 0x24
 800fb56:	e711      	b.n	800f97c <_vfiprintf_r+0x50>
 800fb58:	ab03      	add	r3, sp, #12
 800fb5a:	9300      	str	r3, [sp, #0]
 800fb5c:	462a      	mov	r2, r5
 800fb5e:	4b09      	ldr	r3, [pc, #36]	; (800fb84 <_vfiprintf_r+0x258>)
 800fb60:	a904      	add	r1, sp, #16
 800fb62:	4630      	mov	r0, r6
 800fb64:	f7fc f9c2 	bl	800beec <_printf_i>
 800fb68:	e7e4      	b.n	800fb34 <_vfiprintf_r+0x208>
 800fb6a:	bf00      	nop
 800fb6c:	080102d0 	.word	0x080102d0
 800fb70:	080102f0 	.word	0x080102f0
 800fb74:	080102b0 	.word	0x080102b0
 800fb78:	08010714 	.word	0x08010714
 800fb7c:	0801071e 	.word	0x0801071e
 800fb80:	0800b9a5 	.word	0x0800b9a5
 800fb84:	0800f907 	.word	0x0800f907
 800fb88:	0801071a 	.word	0x0801071a

0800fb8c <__swbuf_r>:
 800fb8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb8e:	460e      	mov	r6, r1
 800fb90:	4614      	mov	r4, r2
 800fb92:	4605      	mov	r5, r0
 800fb94:	b118      	cbz	r0, 800fb9e <__swbuf_r+0x12>
 800fb96:	6983      	ldr	r3, [r0, #24]
 800fb98:	b90b      	cbnz	r3, 800fb9e <__swbuf_r+0x12>
 800fb9a:	f7fb fd2d 	bl	800b5f8 <__sinit>
 800fb9e:	4b21      	ldr	r3, [pc, #132]	; (800fc24 <__swbuf_r+0x98>)
 800fba0:	429c      	cmp	r4, r3
 800fba2:	d12b      	bne.n	800fbfc <__swbuf_r+0x70>
 800fba4:	686c      	ldr	r4, [r5, #4]
 800fba6:	69a3      	ldr	r3, [r4, #24]
 800fba8:	60a3      	str	r3, [r4, #8]
 800fbaa:	89a3      	ldrh	r3, [r4, #12]
 800fbac:	071a      	lsls	r2, r3, #28
 800fbae:	d52f      	bpl.n	800fc10 <__swbuf_r+0x84>
 800fbb0:	6923      	ldr	r3, [r4, #16]
 800fbb2:	b36b      	cbz	r3, 800fc10 <__swbuf_r+0x84>
 800fbb4:	6923      	ldr	r3, [r4, #16]
 800fbb6:	6820      	ldr	r0, [r4, #0]
 800fbb8:	1ac0      	subs	r0, r0, r3
 800fbba:	6963      	ldr	r3, [r4, #20]
 800fbbc:	b2f6      	uxtb	r6, r6
 800fbbe:	4283      	cmp	r3, r0
 800fbc0:	4637      	mov	r7, r6
 800fbc2:	dc04      	bgt.n	800fbce <__swbuf_r+0x42>
 800fbc4:	4621      	mov	r1, r4
 800fbc6:	4628      	mov	r0, r5
 800fbc8:	f7fe fb7c 	bl	800e2c4 <_fflush_r>
 800fbcc:	bb30      	cbnz	r0, 800fc1c <__swbuf_r+0x90>
 800fbce:	68a3      	ldr	r3, [r4, #8]
 800fbd0:	3b01      	subs	r3, #1
 800fbd2:	60a3      	str	r3, [r4, #8]
 800fbd4:	6823      	ldr	r3, [r4, #0]
 800fbd6:	1c5a      	adds	r2, r3, #1
 800fbd8:	6022      	str	r2, [r4, #0]
 800fbda:	701e      	strb	r6, [r3, #0]
 800fbdc:	6963      	ldr	r3, [r4, #20]
 800fbde:	3001      	adds	r0, #1
 800fbe0:	4283      	cmp	r3, r0
 800fbe2:	d004      	beq.n	800fbee <__swbuf_r+0x62>
 800fbe4:	89a3      	ldrh	r3, [r4, #12]
 800fbe6:	07db      	lsls	r3, r3, #31
 800fbe8:	d506      	bpl.n	800fbf8 <__swbuf_r+0x6c>
 800fbea:	2e0a      	cmp	r6, #10
 800fbec:	d104      	bne.n	800fbf8 <__swbuf_r+0x6c>
 800fbee:	4621      	mov	r1, r4
 800fbf0:	4628      	mov	r0, r5
 800fbf2:	f7fe fb67 	bl	800e2c4 <_fflush_r>
 800fbf6:	b988      	cbnz	r0, 800fc1c <__swbuf_r+0x90>
 800fbf8:	4638      	mov	r0, r7
 800fbfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fbfc:	4b0a      	ldr	r3, [pc, #40]	; (800fc28 <__swbuf_r+0x9c>)
 800fbfe:	429c      	cmp	r4, r3
 800fc00:	d101      	bne.n	800fc06 <__swbuf_r+0x7a>
 800fc02:	68ac      	ldr	r4, [r5, #8]
 800fc04:	e7cf      	b.n	800fba6 <__swbuf_r+0x1a>
 800fc06:	4b09      	ldr	r3, [pc, #36]	; (800fc2c <__swbuf_r+0xa0>)
 800fc08:	429c      	cmp	r4, r3
 800fc0a:	bf08      	it	eq
 800fc0c:	68ec      	ldreq	r4, [r5, #12]
 800fc0e:	e7ca      	b.n	800fba6 <__swbuf_r+0x1a>
 800fc10:	4621      	mov	r1, r4
 800fc12:	4628      	mov	r0, r5
 800fc14:	f000 f80c 	bl	800fc30 <__swsetup_r>
 800fc18:	2800      	cmp	r0, #0
 800fc1a:	d0cb      	beq.n	800fbb4 <__swbuf_r+0x28>
 800fc1c:	f04f 37ff 	mov.w	r7, #4294967295
 800fc20:	e7ea      	b.n	800fbf8 <__swbuf_r+0x6c>
 800fc22:	bf00      	nop
 800fc24:	080102d0 	.word	0x080102d0
 800fc28:	080102f0 	.word	0x080102f0
 800fc2c:	080102b0 	.word	0x080102b0

0800fc30 <__swsetup_r>:
 800fc30:	4b32      	ldr	r3, [pc, #200]	; (800fcfc <__swsetup_r+0xcc>)
 800fc32:	b570      	push	{r4, r5, r6, lr}
 800fc34:	681d      	ldr	r5, [r3, #0]
 800fc36:	4606      	mov	r6, r0
 800fc38:	460c      	mov	r4, r1
 800fc3a:	b125      	cbz	r5, 800fc46 <__swsetup_r+0x16>
 800fc3c:	69ab      	ldr	r3, [r5, #24]
 800fc3e:	b913      	cbnz	r3, 800fc46 <__swsetup_r+0x16>
 800fc40:	4628      	mov	r0, r5
 800fc42:	f7fb fcd9 	bl	800b5f8 <__sinit>
 800fc46:	4b2e      	ldr	r3, [pc, #184]	; (800fd00 <__swsetup_r+0xd0>)
 800fc48:	429c      	cmp	r4, r3
 800fc4a:	d10f      	bne.n	800fc6c <__swsetup_r+0x3c>
 800fc4c:	686c      	ldr	r4, [r5, #4]
 800fc4e:	89a3      	ldrh	r3, [r4, #12]
 800fc50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fc54:	0719      	lsls	r1, r3, #28
 800fc56:	d42c      	bmi.n	800fcb2 <__swsetup_r+0x82>
 800fc58:	06dd      	lsls	r5, r3, #27
 800fc5a:	d411      	bmi.n	800fc80 <__swsetup_r+0x50>
 800fc5c:	2309      	movs	r3, #9
 800fc5e:	6033      	str	r3, [r6, #0]
 800fc60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800fc64:	81a3      	strh	r3, [r4, #12]
 800fc66:	f04f 30ff 	mov.w	r0, #4294967295
 800fc6a:	e03e      	b.n	800fcea <__swsetup_r+0xba>
 800fc6c:	4b25      	ldr	r3, [pc, #148]	; (800fd04 <__swsetup_r+0xd4>)
 800fc6e:	429c      	cmp	r4, r3
 800fc70:	d101      	bne.n	800fc76 <__swsetup_r+0x46>
 800fc72:	68ac      	ldr	r4, [r5, #8]
 800fc74:	e7eb      	b.n	800fc4e <__swsetup_r+0x1e>
 800fc76:	4b24      	ldr	r3, [pc, #144]	; (800fd08 <__swsetup_r+0xd8>)
 800fc78:	429c      	cmp	r4, r3
 800fc7a:	bf08      	it	eq
 800fc7c:	68ec      	ldreq	r4, [r5, #12]
 800fc7e:	e7e6      	b.n	800fc4e <__swsetup_r+0x1e>
 800fc80:	0758      	lsls	r0, r3, #29
 800fc82:	d512      	bpl.n	800fcaa <__swsetup_r+0x7a>
 800fc84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800fc86:	b141      	cbz	r1, 800fc9a <__swsetup_r+0x6a>
 800fc88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800fc8c:	4299      	cmp	r1, r3
 800fc8e:	d002      	beq.n	800fc96 <__swsetup_r+0x66>
 800fc90:	4630      	mov	r0, r6
 800fc92:	f7ff fbc9 	bl	800f428 <_free_r>
 800fc96:	2300      	movs	r3, #0
 800fc98:	6363      	str	r3, [r4, #52]	; 0x34
 800fc9a:	89a3      	ldrh	r3, [r4, #12]
 800fc9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800fca0:	81a3      	strh	r3, [r4, #12]
 800fca2:	2300      	movs	r3, #0
 800fca4:	6063      	str	r3, [r4, #4]
 800fca6:	6923      	ldr	r3, [r4, #16]
 800fca8:	6023      	str	r3, [r4, #0]
 800fcaa:	89a3      	ldrh	r3, [r4, #12]
 800fcac:	f043 0308 	orr.w	r3, r3, #8
 800fcb0:	81a3      	strh	r3, [r4, #12]
 800fcb2:	6923      	ldr	r3, [r4, #16]
 800fcb4:	b94b      	cbnz	r3, 800fcca <__swsetup_r+0x9a>
 800fcb6:	89a3      	ldrh	r3, [r4, #12]
 800fcb8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800fcbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800fcc0:	d003      	beq.n	800fcca <__swsetup_r+0x9a>
 800fcc2:	4621      	mov	r1, r4
 800fcc4:	4630      	mov	r0, r6
 800fcc6:	f000 f84d 	bl	800fd64 <__smakebuf_r>
 800fcca:	89a0      	ldrh	r0, [r4, #12]
 800fccc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800fcd0:	f010 0301 	ands.w	r3, r0, #1
 800fcd4:	d00a      	beq.n	800fcec <__swsetup_r+0xbc>
 800fcd6:	2300      	movs	r3, #0
 800fcd8:	60a3      	str	r3, [r4, #8]
 800fcda:	6963      	ldr	r3, [r4, #20]
 800fcdc:	425b      	negs	r3, r3
 800fcde:	61a3      	str	r3, [r4, #24]
 800fce0:	6923      	ldr	r3, [r4, #16]
 800fce2:	b943      	cbnz	r3, 800fcf6 <__swsetup_r+0xc6>
 800fce4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800fce8:	d1ba      	bne.n	800fc60 <__swsetup_r+0x30>
 800fcea:	bd70      	pop	{r4, r5, r6, pc}
 800fcec:	0781      	lsls	r1, r0, #30
 800fcee:	bf58      	it	pl
 800fcf0:	6963      	ldrpl	r3, [r4, #20]
 800fcf2:	60a3      	str	r3, [r4, #8]
 800fcf4:	e7f4      	b.n	800fce0 <__swsetup_r+0xb0>
 800fcf6:	2000      	movs	r0, #0
 800fcf8:	e7f7      	b.n	800fcea <__swsetup_r+0xba>
 800fcfa:	bf00      	nop
 800fcfc:	2000012c 	.word	0x2000012c
 800fd00:	080102d0 	.word	0x080102d0
 800fd04:	080102f0 	.word	0x080102f0
 800fd08:	080102b0 	.word	0x080102b0

0800fd0c <abort>:
 800fd0c:	b508      	push	{r3, lr}
 800fd0e:	2006      	movs	r0, #6
 800fd10:	f000 f898 	bl	800fe44 <raise>
 800fd14:	2001      	movs	r0, #1
 800fd16:	f7f2 fea7 	bl	8002a68 <_exit>

0800fd1a <__swhatbuf_r>:
 800fd1a:	b570      	push	{r4, r5, r6, lr}
 800fd1c:	460e      	mov	r6, r1
 800fd1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fd22:	2900      	cmp	r1, #0
 800fd24:	b096      	sub	sp, #88	; 0x58
 800fd26:	4614      	mov	r4, r2
 800fd28:	461d      	mov	r5, r3
 800fd2a:	da07      	bge.n	800fd3c <__swhatbuf_r+0x22>
 800fd2c:	2300      	movs	r3, #0
 800fd2e:	602b      	str	r3, [r5, #0]
 800fd30:	89b3      	ldrh	r3, [r6, #12]
 800fd32:	061a      	lsls	r2, r3, #24
 800fd34:	d410      	bmi.n	800fd58 <__swhatbuf_r+0x3e>
 800fd36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800fd3a:	e00e      	b.n	800fd5a <__swhatbuf_r+0x40>
 800fd3c:	466a      	mov	r2, sp
 800fd3e:	f000 f89d 	bl	800fe7c <_fstat_r>
 800fd42:	2800      	cmp	r0, #0
 800fd44:	dbf2      	blt.n	800fd2c <__swhatbuf_r+0x12>
 800fd46:	9a01      	ldr	r2, [sp, #4]
 800fd48:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800fd4c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800fd50:	425a      	negs	r2, r3
 800fd52:	415a      	adcs	r2, r3
 800fd54:	602a      	str	r2, [r5, #0]
 800fd56:	e7ee      	b.n	800fd36 <__swhatbuf_r+0x1c>
 800fd58:	2340      	movs	r3, #64	; 0x40
 800fd5a:	2000      	movs	r0, #0
 800fd5c:	6023      	str	r3, [r4, #0]
 800fd5e:	b016      	add	sp, #88	; 0x58
 800fd60:	bd70      	pop	{r4, r5, r6, pc}
	...

0800fd64 <__smakebuf_r>:
 800fd64:	898b      	ldrh	r3, [r1, #12]
 800fd66:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800fd68:	079d      	lsls	r5, r3, #30
 800fd6a:	4606      	mov	r6, r0
 800fd6c:	460c      	mov	r4, r1
 800fd6e:	d507      	bpl.n	800fd80 <__smakebuf_r+0x1c>
 800fd70:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800fd74:	6023      	str	r3, [r4, #0]
 800fd76:	6123      	str	r3, [r4, #16]
 800fd78:	2301      	movs	r3, #1
 800fd7a:	6163      	str	r3, [r4, #20]
 800fd7c:	b002      	add	sp, #8
 800fd7e:	bd70      	pop	{r4, r5, r6, pc}
 800fd80:	ab01      	add	r3, sp, #4
 800fd82:	466a      	mov	r2, sp
 800fd84:	f7ff ffc9 	bl	800fd1a <__swhatbuf_r>
 800fd88:	9900      	ldr	r1, [sp, #0]
 800fd8a:	4605      	mov	r5, r0
 800fd8c:	4630      	mov	r0, r6
 800fd8e:	f7fb fd0f 	bl	800b7b0 <_malloc_r>
 800fd92:	b948      	cbnz	r0, 800fda8 <__smakebuf_r+0x44>
 800fd94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fd98:	059a      	lsls	r2, r3, #22
 800fd9a:	d4ef      	bmi.n	800fd7c <__smakebuf_r+0x18>
 800fd9c:	f023 0303 	bic.w	r3, r3, #3
 800fda0:	f043 0302 	orr.w	r3, r3, #2
 800fda4:	81a3      	strh	r3, [r4, #12]
 800fda6:	e7e3      	b.n	800fd70 <__smakebuf_r+0xc>
 800fda8:	4b0d      	ldr	r3, [pc, #52]	; (800fde0 <__smakebuf_r+0x7c>)
 800fdaa:	62b3      	str	r3, [r6, #40]	; 0x28
 800fdac:	89a3      	ldrh	r3, [r4, #12]
 800fdae:	6020      	str	r0, [r4, #0]
 800fdb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800fdb4:	81a3      	strh	r3, [r4, #12]
 800fdb6:	9b00      	ldr	r3, [sp, #0]
 800fdb8:	6163      	str	r3, [r4, #20]
 800fdba:	9b01      	ldr	r3, [sp, #4]
 800fdbc:	6120      	str	r0, [r4, #16]
 800fdbe:	b15b      	cbz	r3, 800fdd8 <__smakebuf_r+0x74>
 800fdc0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fdc4:	4630      	mov	r0, r6
 800fdc6:	f000 f86b 	bl	800fea0 <_isatty_r>
 800fdca:	b128      	cbz	r0, 800fdd8 <__smakebuf_r+0x74>
 800fdcc:	89a3      	ldrh	r3, [r4, #12]
 800fdce:	f023 0303 	bic.w	r3, r3, #3
 800fdd2:	f043 0301 	orr.w	r3, r3, #1
 800fdd6:	81a3      	strh	r3, [r4, #12]
 800fdd8:	89a0      	ldrh	r0, [r4, #12]
 800fdda:	4305      	orrs	r5, r0
 800fddc:	81a5      	strh	r5, [r4, #12]
 800fdde:	e7cd      	b.n	800fd7c <__smakebuf_r+0x18>
 800fde0:	0800b591 	.word	0x0800b591

0800fde4 <_malloc_usable_size_r>:
 800fde4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fde8:	1f18      	subs	r0, r3, #4
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	bfbc      	itt	lt
 800fdee:	580b      	ldrlt	r3, [r1, r0]
 800fdf0:	18c0      	addlt	r0, r0, r3
 800fdf2:	4770      	bx	lr

0800fdf4 <_raise_r>:
 800fdf4:	291f      	cmp	r1, #31
 800fdf6:	b538      	push	{r3, r4, r5, lr}
 800fdf8:	4604      	mov	r4, r0
 800fdfa:	460d      	mov	r5, r1
 800fdfc:	d904      	bls.n	800fe08 <_raise_r+0x14>
 800fdfe:	2316      	movs	r3, #22
 800fe00:	6003      	str	r3, [r0, #0]
 800fe02:	f04f 30ff 	mov.w	r0, #4294967295
 800fe06:	bd38      	pop	{r3, r4, r5, pc}
 800fe08:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800fe0a:	b112      	cbz	r2, 800fe12 <_raise_r+0x1e>
 800fe0c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fe10:	b94b      	cbnz	r3, 800fe26 <_raise_r+0x32>
 800fe12:	4620      	mov	r0, r4
 800fe14:	f000 f830 	bl	800fe78 <_getpid_r>
 800fe18:	462a      	mov	r2, r5
 800fe1a:	4601      	mov	r1, r0
 800fe1c:	4620      	mov	r0, r4
 800fe1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fe22:	f000 b817 	b.w	800fe54 <_kill_r>
 800fe26:	2b01      	cmp	r3, #1
 800fe28:	d00a      	beq.n	800fe40 <_raise_r+0x4c>
 800fe2a:	1c59      	adds	r1, r3, #1
 800fe2c:	d103      	bne.n	800fe36 <_raise_r+0x42>
 800fe2e:	2316      	movs	r3, #22
 800fe30:	6003      	str	r3, [r0, #0]
 800fe32:	2001      	movs	r0, #1
 800fe34:	e7e7      	b.n	800fe06 <_raise_r+0x12>
 800fe36:	2400      	movs	r4, #0
 800fe38:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800fe3c:	4628      	mov	r0, r5
 800fe3e:	4798      	blx	r3
 800fe40:	2000      	movs	r0, #0
 800fe42:	e7e0      	b.n	800fe06 <_raise_r+0x12>

0800fe44 <raise>:
 800fe44:	4b02      	ldr	r3, [pc, #8]	; (800fe50 <raise+0xc>)
 800fe46:	4601      	mov	r1, r0
 800fe48:	6818      	ldr	r0, [r3, #0]
 800fe4a:	f7ff bfd3 	b.w	800fdf4 <_raise_r>
 800fe4e:	bf00      	nop
 800fe50:	2000012c 	.word	0x2000012c

0800fe54 <_kill_r>:
 800fe54:	b538      	push	{r3, r4, r5, lr}
 800fe56:	4d07      	ldr	r5, [pc, #28]	; (800fe74 <_kill_r+0x20>)
 800fe58:	2300      	movs	r3, #0
 800fe5a:	4604      	mov	r4, r0
 800fe5c:	4608      	mov	r0, r1
 800fe5e:	4611      	mov	r1, r2
 800fe60:	602b      	str	r3, [r5, #0]
 800fe62:	f7f2 fdf1 	bl	8002a48 <_kill>
 800fe66:	1c43      	adds	r3, r0, #1
 800fe68:	d102      	bne.n	800fe70 <_kill_r+0x1c>
 800fe6a:	682b      	ldr	r3, [r5, #0]
 800fe6c:	b103      	cbz	r3, 800fe70 <_kill_r+0x1c>
 800fe6e:	6023      	str	r3, [r4, #0]
 800fe70:	bd38      	pop	{r3, r4, r5, pc}
 800fe72:	bf00      	nop
 800fe74:	20002b44 	.word	0x20002b44

0800fe78 <_getpid_r>:
 800fe78:	f7f2 bdde 	b.w	8002a38 <_getpid>

0800fe7c <_fstat_r>:
 800fe7c:	b538      	push	{r3, r4, r5, lr}
 800fe7e:	4d07      	ldr	r5, [pc, #28]	; (800fe9c <_fstat_r+0x20>)
 800fe80:	2300      	movs	r3, #0
 800fe82:	4604      	mov	r4, r0
 800fe84:	4608      	mov	r0, r1
 800fe86:	4611      	mov	r1, r2
 800fe88:	602b      	str	r3, [r5, #0]
 800fe8a:	f7f2 fe3c 	bl	8002b06 <_fstat>
 800fe8e:	1c43      	adds	r3, r0, #1
 800fe90:	d102      	bne.n	800fe98 <_fstat_r+0x1c>
 800fe92:	682b      	ldr	r3, [r5, #0]
 800fe94:	b103      	cbz	r3, 800fe98 <_fstat_r+0x1c>
 800fe96:	6023      	str	r3, [r4, #0]
 800fe98:	bd38      	pop	{r3, r4, r5, pc}
 800fe9a:	bf00      	nop
 800fe9c:	20002b44 	.word	0x20002b44

0800fea0 <_isatty_r>:
 800fea0:	b538      	push	{r3, r4, r5, lr}
 800fea2:	4d06      	ldr	r5, [pc, #24]	; (800febc <_isatty_r+0x1c>)
 800fea4:	2300      	movs	r3, #0
 800fea6:	4604      	mov	r4, r0
 800fea8:	4608      	mov	r0, r1
 800feaa:	602b      	str	r3, [r5, #0]
 800feac:	f7f2 fe3b 	bl	8002b26 <_isatty>
 800feb0:	1c43      	adds	r3, r0, #1
 800feb2:	d102      	bne.n	800feba <_isatty_r+0x1a>
 800feb4:	682b      	ldr	r3, [r5, #0]
 800feb6:	b103      	cbz	r3, 800feba <_isatty_r+0x1a>
 800feb8:	6023      	str	r3, [r4, #0]
 800feba:	bd38      	pop	{r3, r4, r5, pc}
 800febc:	20002b44 	.word	0x20002b44

0800fec0 <_init>:
 800fec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fec2:	bf00      	nop
 800fec4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fec6:	bc08      	pop	{r3}
 800fec8:	469e      	mov	lr, r3
 800feca:	4770      	bx	lr

0800fecc <_fini>:
 800fecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fece:	bf00      	nop
 800fed0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fed2:	bc08      	pop	{r3}
 800fed4:	469e      	mov	lr, r3
 800fed6:	4770      	bx	lr
